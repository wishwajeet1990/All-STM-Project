
get ADC Value.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005860  08005860  00006860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08005878  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  24000010  08005888  00007010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000094  08005888  00007094  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b381  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018cc  00000000  00000000  000123bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000940  00000000  00000000  00013c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006e8  00000000  00000000  000145d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036c3d  00000000  00000000  00014cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b6ea  00000000  00000000  0004b8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00164be8  00000000  00000000  00056fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001bbbc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000257c  00000000  00000000  001bbc0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001be188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005848 	.word	0x08005848

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005848 	.word	0x08005848

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fa85 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f811 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f8f3 	bl	80004d0 <MX_GPIO_Init>
  MX_ADC2_Init();
 80002ea:	f000 f87f 	bl	80003ec <MX_ADC2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int a = HAL_ADC_GetValue(&hadc2);
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <main+0x2c>)
 80002f0:	f000 fe6c 	bl	8000fcc <HAL_ADC_GetValue>
 80002f4:	4603      	mov	r3, r0
 80002f6:	607b      	str	r3, [r7, #4]
	  HAL_Delay(100);
 80002f8:	2064      	movs	r0, #100	@ 0x64
 80002fa:	f000 fb09 	bl	8000910 <HAL_Delay>
  {
 80002fe:	bf00      	nop
 8000300:	e7f5      	b.n	80002ee <main+0x16>
 8000302:	bf00      	nop
 8000304:	2400002c 	.word	0x2400002c

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b09c      	sub	sp, #112	@ 0x70
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000312:	224c      	movs	r2, #76	@ 0x4c
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f005 fa6a 	bl	80057f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2220      	movs	r2, #32
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f005 fa64 	bl	80057f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000328:	2002      	movs	r0, #2
 800032a:	f001 fd59 	bl	8001de0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800032e:	2300      	movs	r3, #0
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <SystemClock_Config+0xd8>)
 8000334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000336:	4a2a      	ldr	r2, [pc, #168]	@ (80003e0 <SystemClock_Config+0xd8>)
 8000338:	f023 0301 	bic.w	r3, r3, #1
 800033c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <SystemClock_Config+0xd8>)
 8000340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	4b26      	ldr	r3, [pc, #152]	@ (80003e4 <SystemClock_Config+0xdc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000350:	4a24      	ldr	r2, [pc, #144]	@ (80003e4 <SystemClock_Config+0xdc>)
 8000352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <SystemClock_Config+0xdc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000364:	bf00      	nop
 8000366:	4b1f      	ldr	r3, [pc, #124]	@ (80003e4 <SystemClock_Config+0xdc>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800036e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000372:	d1f8      	bne.n	8000366 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000374:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <SystemClock_Config+0xe0>)
 8000376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000378:	4a1b      	ldr	r2, [pc, #108]	@ (80003e8 <SystemClock_Config+0xe0>)
 800037a:	f023 0303 	bic.w	r3, r3, #3
 800037e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000384:	2301      	movs	r3, #1
 8000386:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2340      	movs	r3, #64	@ 0x40
 800038a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	2300      	movs	r3, #0
 800038e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fd5d 	bl	8001e54 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003a0:	f000 f8b0 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	233f      	movs	r3, #63	@ 0x3f
 80003a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 f99d 	bl	8002708 <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80003d4:	f000 f896 	bl	8000504 <Error_Handler>
  }
}
 80003d8:	bf00      	nop
 80003da:	3770      	adds	r7, #112	@ 0x70
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	58000400 	.word	0x58000400
 80003e4:	58024800 	.word	0x58024800
 80003e8:	58024400 	.word	0x58024400

080003ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
 8000400:	615a      	str	r2, [r3, #20]
 8000402:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000406:	4a30      	ldr	r2, [pc, #192]	@ (80004c8 <MX_ADC2_Init+0xdc>)
 8000408:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040a:	4b2e      	ldr	r3, [pc, #184]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000410:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000412:	2204      	movs	r2, #4
 8000414:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000416:	4b2b      	ldr	r3, [pc, #172]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000418:	2200      	movs	r2, #0
 800041a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800041c:	4b29      	ldr	r3, [pc, #164]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800041e:	2200      	movs	r2, #0
 8000420:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000422:	4b28      	ldr	r3, [pc, #160]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000424:	2201      	movs	r2, #1
 8000426:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000428:	4b26      	ldr	r3, [pc, #152]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800042a:	2200      	movs	r2, #0
 800042c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042e:	4b25      	ldr	r3, [pc, #148]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000430:	2200      	movs	r2, #0
 8000432:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000434:	4b23      	ldr	r3, [pc, #140]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000436:	2200      	movs	r2, #0
 8000438:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800043c:	2200      	movs	r2, #0
 800043e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000440:	4b20      	ldr	r3, [pc, #128]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000442:	2200      	movs	r2, #0
 8000444:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000446:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800044e:	2200      	movs	r2, #0
 8000450:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000456:	2201      	movs	r2, #1
 8000458:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800045a:	481a      	ldr	r0, [pc, #104]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800045c:	f000 fc14 	bl	8000c88 <HAL_ADC_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000466:	f000 f84d 	bl	8000504 <Error_Handler>
  }
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800046a:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800046c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000470:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000472:	4b14      	ldr	r3, [pc, #80]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000478:	4812      	ldr	r0, [pc, #72]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 800047a:	f000 fc05 	bl	8000c88 <HAL_ADC_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_ADC2_Init+0x9c>
  {
    Error_Handler();
 8000484:	f000 f83e 	bl	8000504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000488:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <MX_ADC2_Init+0xe0>)
 800048a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048c:	2306      	movs	r3, #6
 800048e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000494:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000498:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800049a:	2304      	movs	r3, #4
 800049c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80004a2:	2300      	movs	r3, #0
 80004a4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	4619      	mov	r1, r3
 80004aa:	4806      	ldr	r0, [pc, #24]	@ (80004c4 <MX_ADC2_Init+0xd8>)
 80004ac:	f000 fd9c 	bl	8000fe8 <HAL_ADC_ConfigChannel>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80004b6:	f000 f825 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2400002c 	.word	0x2400002c
 80004c8:	40022100 	.word	0x40022100
 80004cc:	25b00200 	.word	0x25b00200

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <MX_GPIO_Init+0x30>)
 80004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004dc:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <MX_GPIO_Init+0x30>)
 80004de:	f043 0302 	orr.w	r3, r3, #2
 80004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_GPIO_Init+0x30>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ec:	f003 0302 	and.w	r3, r3, #2
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	58024400 	.word	0x58024400

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <HAL_MspInit+0x30>)
 8000518:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800051c:	4a08      	ldr	r2, [pc, #32]	@ (8000540 <HAL_MspInit+0x30>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000526:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_MspInit+0x30>)
 8000528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800052c:	f003 0302 	and.w	r3, r3, #2
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	58024400 	.word	0x58024400

08000544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b0ba      	sub	sp, #232	@ 0xe8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	22c0      	movs	r2, #192	@ 0xc0
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f005 f943 	bl	80057f0 <memset>
  if(hadc->Instance==ADC2)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a2b      	ldr	r2, [pc, #172]	@ (800061c <HAL_ADC_MspInit+0xd8>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d14f      	bne.n	8000614 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000574:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000578:	f04f 0300 	mov.w	r3, #0
 800057c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8000584:	230a      	movs	r3, #10
 8000586:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000594:	23c0      	movs	r3, #192	@ 0xc0
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000598:	2320      	movs	r3, #32
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800059c:	2300      	movs	r3, #0
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fc22 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80005b6:	f7ff ffa5 	bl	8000504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005ba:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005c0:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d8:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005de:	4a10      	ldr	r2, [pc, #64]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <HAL_ADC_MspInit+0xdc>)
 80005ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PB0     ------> ADC2_INP9
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 80005f6:	2301      	movs	r3, #1
 80005f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fc:	2303      	movs	r3, #3
 80005fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <HAL_ADC_MspInit+0xe0>)
 8000610:	f001 fa36 	bl	8001a80 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000614:	bf00      	nop
 8000616:	37e8      	adds	r7, #232	@ 0xe8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40022100 	.word	0x40022100
 8000620:	58024400 	.word	0x58024400
 8000624:	58020400 	.word	0x58020400

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f927 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b37      	ldr	r3, [pc, #220]	@ (800076c <SystemInit+0xe4>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000692:	4a36      	ldr	r2, [pc, #216]	@ (800076c <SystemInit+0xe4>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0xe8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <SystemInit+0xe8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000770 <SystemInit+0xe8>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0xec>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000774 <SystemInit+0xec>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <SystemInit+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000774 <SystemInit+0xec>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4929      	ldr	r1, [pc, #164]	@ (8000774 <SystemInit+0xec>)
 80006d0:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <SystemInit+0xf0>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0xe8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <SystemInit+0xe8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <SystemInit+0xe8>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0xec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0xec>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0xec>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0xec>)
 8000706:	4a1d      	ldr	r2, [pc, #116]	@ (800077c <SystemInit+0xf4>)
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0xec>)
 800070c:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <SystemInit+0xf8>)
 800070e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0xec>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0xfc>)
 8000714:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0xec>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0xec>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0xfc>)
 8000720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0xec>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0xec>)
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <SystemInit+0xfc>)
 800072c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <SystemInit+0xec>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0xec>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <SystemInit+0xec>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <SystemInit+0xec>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <SystemInit+0x100>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <SystemInit+0x104>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <SystemInit+0x108>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <SystemInit+0x10c>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	5c001000 	.word	0x5c001000
 800078c:	ffff0000 	.word	0xffff0000
 8000790:	51008108 	.word	0x51008108
 8000794:	52004000 	.word	0x52004000

08000798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000798:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800079c:	f7ff ff74 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	@ (80007d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	@ (80007e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f005 f81b 	bl	8005800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ca:	f7ff fd85 	bl	80002d8 <main>
  bx  lr
 80007ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80007d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007dc:	08005878 	.word	0x08005878
  ldr r2, =_sbss
 80007e0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80007e4:	24000094 	.word	0x24000094

080007e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC3_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f2:	2003      	movs	r0, #3
 80007f4:	f001 f912 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007f8:	f002 f93c 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 80007fc:	4602      	mov	r2, r0
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_Init+0x68>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	0a1b      	lsrs	r3, r3, #8
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	4913      	ldr	r1, [pc, #76]	@ (8000858 <HAL_Init+0x6c>)
 800080a:	5ccb      	ldrb	r3, [r1, r3]
 800080c:	f003 031f 	and.w	r3, r3, #31
 8000810:	fa22 f303 	lsr.w	r3, r2, r3
 8000814:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <HAL_Init+0x68>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 030f 	and.w	r3, r3, #15
 800081e:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <HAL_Init+0x6c>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	fa22 f303 	lsr.w	r3, r2, r3
 800082c:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <HAL_Init+0x70>)
 800082e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000830:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <HAL_Init+0x74>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000836:	200f      	movs	r0, #15
 8000838:	f000 f814 	bl	8000864 <HAL_InitTick>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e002      	b.n	800084c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000846:	f7ff fe63 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	58024400 	.word	0x58024400
 8000858:	08005860 	.word	0x08005860
 800085c:	24000004 	.word	0x24000004
 8000860:	24000000 	.word	0x24000000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <HAL_InitTick+0x60>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d101      	bne.n	8000878 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e021      	b.n	80008bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <HAL_InitTick+0x64>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_InitTick+0x60>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f8e9 	bl	8001a66 <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f001 f8c1 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <HAL_InitTick+0x68>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2400000c 	.word	0x2400000c
 80008c8:	24000000 	.word	0x24000000
 80008cc:	24000008 	.word	0x24000008

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	2400000c 	.word	0x2400000c
 80008f4:	24000090 	.word	0x24000090

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	24000090 	.word	0x24000090

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff ffee 	bl	80008f8 <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffde 	bl	80008f8 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2400000c 	.word	0x2400000c

08000958 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <HAL_GetREVID+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	0c1b      	lsrs	r3, r3, #16
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	5c001000 	.word	0x5c001000

08000970 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	431a      	orrs	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	609a      	str	r2, [r3, #8]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	609a      	str	r2, [r3, #8]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3360      	adds	r3, #96	@ 0x60
 80009ea:	461a      	mov	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	430b      	orrs	r3, r1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f003 031f 	and.w	r3, r3, #31
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b087      	sub	sp, #28
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3360      	adds	r3, #96	@ 0x60
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	601a      	str	r2, [r3, #0]
  }
}
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3330      	adds	r3, #48	@ 0x30
 8000a90:	461a      	mov	r2, r3
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	f003 030c 	and.w	r3, r3, #12
 8000a9c:	4413      	add	r3, r2
 8000a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	211f      	movs	r1, #31
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	0e9b      	lsrs	r3, r3, #26
 8000ab8:	f003 011f 	and.w	r1, r3, #31
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	f003 031f 	and.w	r3, r3, #31
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000acc:	bf00      	nop
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3314      	adds	r3, #20
 8000ae8:	461a      	mov	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	0e5b      	lsrs	r3, r3, #25
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	4413      	add	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	0d1b      	lsrs	r3, r3, #20
 8000b00:	f003 031f 	and.w	r3, r3, #31
 8000b04:	2107      	movs	r1, #7
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	0d1b      	lsrs	r3, r3, #20
 8000b12:	f003 031f 	and.w	r3, r3, #31
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b22:	bf00      	nop
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0318 	and.w	r3, r3, #24
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b54:	40d9      	lsrs	r1, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	400b      	ands	r3, r1
 8000b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	000fffff 	.word	0x000fffff

08000b78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6093      	str	r3, [r2, #8]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	5fffffc0 	.word	0x5fffffc0

08000b9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bb0:	d101      	bne.n	8000bb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <LL_ADC_EnableInternalRegulator+0x24>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	6fffffc0 	.word	0x6fffffc0

08000bec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000c00:	d101      	bne.n	8000c06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d101      	bne.n	8000c2c <LL_ADC_IsEnabled+0x18>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <LL_ADC_IsEnabled+0x1a>
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d101      	bne.n	8000c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e000      	b.n	8000c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	2b08      	cmp	r3, #8
 8000c72:	d101      	bne.n	8000c78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	@ 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e18f      	b.n	8000fc2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff fc47 	bl	8000544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff67 	bl	8000b9c <LL_ADC_IsDeepPowerDownEnabled>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff4d 	bl	8000b78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff82 	bl	8000bec <LL_ADC_IsInternalRegulatorEnabled>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d114      	bne.n	8000d18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff66 	bl	8000bc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000cf8:	4b87      	ldr	r3, [pc, #540]	@ (8000f18 <HAL_ADC_Init+0x290>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	099b      	lsrs	r3, r3, #6
 8000cfe:	4a87      	ldr	r2, [pc, #540]	@ (8000f1c <HAL_ADC_Init+0x294>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	099b      	lsrs	r3, r3, #6
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d0a:	e002      	b.n	8000d12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1f9      	bne.n	8000d0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff65 	bl	8000bec <LL_ADC_IsInternalRegulatorEnabled>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10d      	bne.n	8000d44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d2c:	f043 0210 	orr.w	r2, r3, #16
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff76 	bl	8000c3a <LL_ADC_REG_IsConversionOngoing>
 8000d4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f040 8129 	bne.w	8000fb0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f040 8125 	bne.w	8000fb0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d6a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d6e:	f043 0202 	orr.w	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff4a 	bl	8000c14 <LL_ADC_IsEnabled>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d136      	bne.n	8000df4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a65      	ldr	r2, [pc, #404]	@ (8000f20 <HAL_ADC_Init+0x298>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d004      	beq.n	8000d9a <HAL_ADC_Init+0x112>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a63      	ldr	r2, [pc, #396]	@ (8000f24 <HAL_ADC_Init+0x29c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_ADC_Init+0x130>
 8000d9a:	4861      	ldr	r0, [pc, #388]	@ (8000f20 <HAL_ADC_Init+0x298>)
 8000d9c:	f7ff ff3a 	bl	8000c14 <LL_ADC_IsEnabled>
 8000da0:	4604      	mov	r4, r0
 8000da2:	4860      	ldr	r0, [pc, #384]	@ (8000f24 <HAL_ADC_Init+0x29c>)
 8000da4:	f7ff ff36 	bl	8000c14 <LL_ADC_IsEnabled>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4323      	orrs	r3, r4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf0c      	ite	eq
 8000db0:	2301      	moveq	r3, #1
 8000db2:	2300      	movne	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	e008      	b.n	8000dca <HAL_ADC_Init+0x142>
 8000db8:	485b      	ldr	r0, [pc, #364]	@ (8000f28 <HAL_ADC_Init+0x2a0>)
 8000dba:	f7ff ff2b 	bl	8000c14 <LL_ADC_IsEnabled>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d012      	beq.n	8000df4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a53      	ldr	r2, [pc, #332]	@ (8000f20 <HAL_ADC_Init+0x298>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d004      	beq.n	8000de2 <HAL_ADC_Init+0x15a>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a51      	ldr	r2, [pc, #324]	@ (8000f24 <HAL_ADC_Init+0x29c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Init+0x15e>
 8000de2:	4a52      	ldr	r2, [pc, #328]	@ (8000f2c <HAL_ADC_Init+0x2a4>)
 8000de4:	e000      	b.n	8000de8 <HAL_ADC_Init+0x160>
 8000de6:	4a52      	ldr	r2, [pc, #328]	@ (8000f30 <HAL_ADC_Init+0x2a8>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4610      	mov	r0, r2
 8000df0:	f7ff fdbe 	bl	8000970 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000df4:	f7ff fdb0 	bl	8000958 <HAL_GetREVID>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d914      	bls.n	8000e2c <HAL_ADC_Init+0x1a4>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d110      	bne.n	8000e2c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7d5b      	ldrb	r3, [r3, #21]
 8000e0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000e1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f1b      	ldrb	r3, [r3, #28]
 8000e20:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000e22:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e24:	f043 030c 	orr.w	r3, r3, #12
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	e00d      	b.n	8000e48 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	7d5b      	ldrb	r3, [r3, #21]
 8000e30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000e3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a1b      	ldr	r3, [r3, #32]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d009      	beq.n	8000e7a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e72:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <HAL_ADC_Init+0x2ac>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	6812      	ldr	r2, [r2, #0]
 8000e88:	69b9      	ldr	r1, [r7, #24]
 8000e8a:	430b      	orrs	r3, r1
 8000e8c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fed1 	bl	8000c3a <LL_ADC_REG_IsConversionOngoing>
 8000e98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fede 	bl	8000c60 <LL_ADC_INJ_IsConversionOngoing>
 8000ea4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d15f      	bne.n	8000f6c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d15c      	bne.n	8000f6c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7d1b      	ldrb	r3, [r3, #20]
 8000eb6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68da      	ldr	r2, [r3, #12]
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <HAL_ADC_Init+0x2b0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d130      	bne.n	8000f40 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_ADC_Init+0x2b4>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	0411      	lsls	r1, r2, #16
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000efa:	4311      	orrs	r1, r2
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000f00:	4311      	orrs	r1, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f06:	430a      	orrs	r2, r1
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	e01c      	b.n	8000f50 <HAL_ADC_Init+0x2c8>
 8000f16:	bf00      	nop
 8000f18:	24000000 	.word	0x24000000
 8000f1c:	053e2d63 	.word	0x053e2d63
 8000f20:	40022000 	.word	0x40022000
 8000f24:	40022100 	.word	0x40022100
 8000f28:	58026000 	.word	0x58026000
 8000f2c:	40022300 	.word	0x40022300
 8000f30:	58026300 	.word	0x58026300
 8000f34:	fff0c003 	.word	0xfff0c003
 8000f38:	ffffbffc 	.word	0xffffbffc
 8000f3c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	691a      	ldr	r2, [r3, #16]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fb9a 	bl	80016a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d10c      	bne.n	8000f8e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f023 010f 	bic.w	r1, r3, #15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8c:	e007      	b.n	8000f9e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 020f 	bic.w	r2, r2, #15
 8000f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	f043 0201 	orr.w	r2, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fae:	e007      	b.n	8000fc0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb4:	f043 0210 	orr.w	r2, r3, #16
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop

08000fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b0a1      	sub	sp, #132	@ 0x84
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a65      	ldr	r2, [pc, #404]	@ (8001198 <HAL_ADC_ConfigChannel+0x1b0>)
 8001002:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x2a>
 800100e:	2302      	movs	r3, #2
 8001010:	e32e      	b.n	8001670 <HAL_ADC_ConfigChannel+0x688>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe0b 	bl	8000c3a <LL_ADC_REG_IsConversionOngoing>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 8313 	bne.w	8001652 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db2c      	blt.n	800108e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800103c:	2b00      	cmp	r3, #0
 800103e:	d108      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x6a>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0e9b      	lsrs	r3, r3, #26
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	2201      	movs	r2, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	e016      	b.n	8001080 <HAL_ADC_ConfigChannel+0x98>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001060:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001062:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800106a:	2320      	movs	r3, #32
 800106c:	e003      	b.n	8001076 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800106e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	2201      	movs	r2, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	69d1      	ldr	r1, [r2, #28]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	430b      	orrs	r3, r1
 800108c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	f7ff fcf0 	bl	8000a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fdc8 	bl	8000c3a <LL_ADC_REG_IsConversionOngoing>
 80010aa:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fdd5 	bl	8000c60 <LL_ADC_INJ_IsConversionOngoing>
 80010b6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80b8 	bne.w	8001230 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f040 80b4 	bne.w	8001230 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f7ff fcff 	bl	8000ad8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80010da:	4b30      	ldr	r3, [pc, #192]	@ (800119c <HAL_ADC_ConfigChannel+0x1b4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80010e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010e6:	d10b      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x118>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	e01d      	b.n	800113c <HAL_ADC_ConfigChannel+0x154>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10b      	bne.n	8001126 <HAL_ADC_ConfigChannel+0x13e>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	e00a      	b.n	800113c <HAL_ADC_ConfigChannel+0x154>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b04      	cmp	r3, #4
 8001144:	d02c      	beq.n	80011a0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6919      	ldr	r1, [r3, #16]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001154:	f7ff fc40 	bl	80009d8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6919      	ldr	r1, [r3, #16]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	7e5b      	ldrb	r3, [r3, #25]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_ADC_ConfigChannel+0x186>
 8001168:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800116c:	e000      	b.n	8001170 <HAL_ADC_ConfigChannel+0x188>
 800116e:	2300      	movs	r3, #0
 8001170:	461a      	mov	r2, r3
 8001172:	f7ff fc6a 	bl	8000a4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6919      	ldr	r1, [r3, #16]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	7e1b      	ldrb	r3, [r3, #24]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <HAL_ADC_ConfigChannel+0x1a4>
 8001186:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800118a:	e000      	b.n	800118e <HAL_ADC_ConfigChannel+0x1a6>
 800118c:	2300      	movs	r3, #0
 800118e:	461a      	mov	r2, r3
 8001190:	f7ff fc42 	bl	8000a18 <LL_ADC_SetDataRightShift>
 8001194:	e04c      	b.n	8001230 <HAL_ADC_ConfigChannel+0x248>
 8001196:	bf00      	nop
 8001198:	47ff0000 	.word	0x47ff0000
 800119c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	069b      	lsls	r3, r3, #26
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	069b      	lsls	r3, r3, #26
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d107      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	069b      	lsls	r3, r3, #26
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d107      	bne.n	800120c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800120a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001212:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	429a      	cmp	r2, r3
 800121e:	d107      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800122e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fced 	bl	8000c14 <LL_ADC_IsEnabled>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	f040 8211 	bne.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff fc6e 	bl	8000b30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4aa1      	ldr	r2, [pc, #644]	@ (80014e0 <HAL_ADC_ConfigChannel+0x4f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	f040 812e 	bne.w	80014bc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <HAL_ADC_ConfigChannel+0x2a0>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0e9b      	lsrs	r3, r3, #26
 8001276:	3301      	adds	r3, #1
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	2b09      	cmp	r3, #9
 800127e:	bf94      	ite	ls
 8001280:	2301      	movls	r3, #1
 8001282:	2300      	movhi	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	e019      	b.n	80012bc <HAL_ADC_ConfigChannel+0x2d4>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001298:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800129a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80012a0:	2320      	movs	r3, #32
 80012a2:	e003      	b.n	80012ac <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80012a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b09      	cmp	r3, #9
 80012b4:	bf94      	ite	ls
 80012b6:	2301      	movls	r3, #1
 80012b8:	2300      	movhi	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d079      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d107      	bne.n	80012dc <HAL_ADC_ConfigChannel+0x2f4>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0e9b      	lsrs	r3, r3, #26
 80012d2:	3301      	adds	r3, #1
 80012d4:	069b      	lsls	r3, r3, #26
 80012d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012da:	e015      	b.n	8001308 <HAL_ADC_ConfigChannel+0x320>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80012ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80012ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80012f4:	2320      	movs	r3, #32
 80012f6:	e003      	b.n	8001300 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80012f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012fa:	fab3 f383 	clz	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	069b      	lsls	r3, r3, #26
 8001304:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x340>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0e9b      	lsrs	r3, r3, #26
 800131a:	3301      	adds	r3, #1
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	e017      	b.n	8001358 <HAL_ADC_ConfigChannel+0x370>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800133a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001340:	2320      	movs	r3, #32
 8001342:	e003      	b.n	800134c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2101      	movs	r1, #1
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	ea42 0103 	orr.w	r1, r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10a      	bne.n	800137e <HAL_ADC_ConfigChannel+0x396>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0e9b      	lsrs	r3, r3, #26
 800136e:	3301      	adds	r3, #1
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4613      	mov	r3, r2
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4413      	add	r3, r2
 800137a:	051b      	lsls	r3, r3, #20
 800137c:	e018      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x3c8>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800138c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001396:	2320      	movs	r3, #32
 8001398:	e003      	b.n	80013a2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800139a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013b0:	430b      	orrs	r3, r1
 80013b2:	e07e      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x3e8>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0e9b      	lsrs	r3, r3, #26
 80013c6:	3301      	adds	r3, #1
 80013c8:	069b      	lsls	r3, r3, #26
 80013ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013ce:	e015      	b.n	80013fc <HAL_ADC_ConfigChannel+0x414>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80013e8:	2320      	movs	r3, #32
 80013ea:	e003      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	fab3 f383 	clz	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	069b      	lsls	r3, r3, #26
 80013f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_ADC_ConfigChannel+0x434>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0e9b      	lsrs	r3, r3, #26
 800140e:	3301      	adds	r3, #1
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	e017      	b.n	800144c <HAL_ADC_ConfigChannel+0x464>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	61bb      	str	r3, [r7, #24]
  return result;
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e003      	b.n	8001440 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3301      	adds	r3, #1
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	ea42 0103 	orr.w	r1, r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x490>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0e9b      	lsrs	r3, r3, #26
 8001462:	3301      	adds	r3, #1
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	3b1e      	subs	r3, #30
 8001470:	051b      	lsls	r3, r3, #20
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001476:	e01b      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x4c8>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	60fb      	str	r3, [r7, #12]
  return result;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001490:	2320      	movs	r3, #32
 8001492:	e003      	b.n	800149c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f003 021f 	and.w	r2, r3, #31
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	3b1e      	subs	r3, #30
 80014aa:	051b      	lsls	r3, r3, #20
 80014ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b0:	430b      	orrs	r3, r1
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	6892      	ldr	r2, [r2, #8]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb0e 	bl	8000ad8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f280 80cf 	bge.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a06      	ldr	r2, [pc, #24]	@ (80014e4 <HAL_ADC_ConfigChannel+0x4fc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d004      	beq.n	80014da <HAL_ADC_ConfigChannel+0x4f2>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_ADC_ConfigChannel+0x500>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10a      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x508>
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <HAL_ADC_ConfigChannel+0x504>)
 80014dc:	e009      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x50a>
 80014de:	bf00      	nop
 80014e0:	47ff0000 	.word	0x47ff0000
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40022100 	.word	0x40022100
 80014ec:	40022300 	.word	0x40022300
 80014f0:	4b61      	ldr	r3, [pc, #388]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fa62 	bl	80009bc <LL_ADC_GetCommonPathInternalCh>
 80014f8:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d004      	beq.n	800150e <HAL_ADC_ConfigChannel+0x526>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a5d      	ldr	r2, [pc, #372]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10e      	bne.n	800152c <HAL_ADC_ConfigChannel+0x544>
 800150e:	485b      	ldr	r0, [pc, #364]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001510:	f7ff fb80 	bl	8000c14 <LL_ADC_IsEnabled>
 8001514:	4604      	mov	r4, r0
 8001516:	485a      	ldr	r0, [pc, #360]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001518:	f7ff fb7c 	bl	8000c14 <LL_ADC_IsEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	4323      	orrs	r3, r4
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e008      	b.n	800153e <HAL_ADC_ConfigChannel+0x556>
 800152c:	4855      	ldr	r0, [pc, #340]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 800152e:	f7ff fb71 	bl	8000c14 <LL_ADC_IsEnabled>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d07d      	beq.n	800163e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a50      	ldr	r2, [pc, #320]	@ (8001688 <HAL_ADC_ConfigChannel+0x6a0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d130      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x5c6>
 800154c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800154e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12b      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a4a      	ldr	r2, [pc, #296]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 8081 	bne.w	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a45      	ldr	r2, [pc, #276]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d004      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x58e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a43      	ldr	r2, [pc, #268]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d101      	bne.n	800157a <HAL_ADC_ConfigChannel+0x592>
 8001576:	4a45      	ldr	r2, [pc, #276]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 8001578:	e000      	b.n	800157c <HAL_ADC_ConfigChannel+0x594>
 800157a:	4a3f      	ldr	r2, [pc, #252]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 800157c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800157e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001582:	4619      	mov	r1, r3
 8001584:	4610      	mov	r0, r2
 8001586:	f7ff fa06 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <HAL_ADC_ConfigChannel+0x6a8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	099b      	lsrs	r3, r3, #6
 8001590:	4a40      	ldr	r2, [pc, #256]	@ (8001694 <HAL_ADC_ConfigChannel+0x6ac>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	099b      	lsrs	r3, r3, #6
 8001598:	3301      	adds	r3, #1
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800159e:	e002      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015ac:	e05a      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a39      	ldr	r2, [pc, #228]	@ (8001698 <HAL_ADC_ConfigChannel+0x6b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d11e      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x60e>
 80015b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d14b      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_ConfigChannel+0x5f8>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x5fc>
 80015e0:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_ConfigChannel+0x5fe>
 80015e4:	4a24      	ldr	r2, [pc, #144]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 80015e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff f9d1 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015f4:	e036      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a28      	ldr	r2, [pc, #160]	@ (800169c <HAL_ADC_ConfigChannel+0x6b4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d131      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
 8001600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d12c      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_ADC_ConfigChannel+0x69c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d127      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a18      	ldr	r2, [pc, #96]	@ (800167c <HAL_ADC_ConfigChannel+0x694>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d004      	beq.n	8001628 <HAL_ADC_ConfigChannel+0x640>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_ADC_ConfigChannel+0x698>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <HAL_ADC_ConfigChannel+0x644>
 8001628:	4a18      	ldr	r2, [pc, #96]	@ (800168c <HAL_ADC_ConfigChannel+0x6a4>)
 800162a:	e000      	b.n	800162e <HAL_ADC_ConfigChannel+0x646>
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <HAL_ADC_ConfigChannel+0x690>)
 800162e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001630:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff f9ad 	bl	8000996 <LL_ADC_SetCommonPathInternalCh>
 800163c:	e012      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001650:	e008      	b.n	8001664 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001656:	f043 0220 	orr.w	r2, r3, #32
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800166c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001670:	4618      	mov	r0, r3
 8001672:	3784      	adds	r7, #132	@ 0x84
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	58026300 	.word	0x58026300
 800167c:	40022000 	.word	0x40022000
 8001680:	40022100 	.word	0x40022100
 8001684:	58026000 	.word	0x58026000
 8001688:	cb840000 	.word	0xcb840000
 800168c:	40022300 	.word	0x40022300
 8001690:	24000000 	.word	0x24000000
 8001694:	053e2d63 	.word	0x053e2d63
 8001698:	c7520000 	.word	0xc7520000
 800169c:	cfb80000 	.word	0xcfb80000

080016a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a7a      	ldr	r2, [pc, #488]	@ (8001898 <ADC_ConfigureBoostMode+0x1f8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <ADC_ConfigureBoostMode+0x1c>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a79      	ldr	r2, [pc, #484]	@ (800189c <ADC_ConfigureBoostMode+0x1fc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d109      	bne.n	80016d0 <ADC_ConfigureBoostMode+0x30>
 80016bc:	4b78      	ldr	r3, [pc, #480]	@ (80018a0 <ADC_ConfigureBoostMode+0x200>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf14      	ite	ne
 80016c8:	2301      	movne	r3, #1
 80016ca:	2300      	moveq	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	e008      	b.n	80016e2 <ADC_ConfigureBoostMode+0x42>
 80016d0:	4b74      	ldr	r3, [pc, #464]	@ (80018a4 <ADC_ConfigureBoostMode+0x204>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01c      	beq.n	8001720 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80016e6:	f001 fb3f 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 80016ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80016f4:	d010      	beq.n	8001718 <ADC_ConfigureBoostMode+0x78>
 80016f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80016fa:	d873      	bhi.n	80017e4 <ADC_ConfigureBoostMode+0x144>
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d002      	beq.n	8001708 <ADC_ConfigureBoostMode+0x68>
 8001702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001706:	d16d      	bne.n	80017e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0c1b      	lsrs	r3, r3, #16
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	60fb      	str	r3, [r7, #12]
        break;
 8001716:	e068      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
        break;
 800171e:	e064      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001720:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	f002 fd6e 	bl	8004208 <HAL_RCCEx_GetPeriphCLKFreq>
 800172c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001736:	d051      	beq.n	80017dc <ADC_ConfigureBoostMode+0x13c>
 8001738:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800173c:	d854      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 800173e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001742:	d047      	beq.n	80017d4 <ADC_ConfigureBoostMode+0x134>
 8001744:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001748:	d84e      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 800174a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800174e:	d03d      	beq.n	80017cc <ADC_ConfigureBoostMode+0x12c>
 8001750:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001754:	d848      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 8001756:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800175a:	d033      	beq.n	80017c4 <ADC_ConfigureBoostMode+0x124>
 800175c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001760:	d842      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 8001762:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001766:	d029      	beq.n	80017bc <ADC_ConfigureBoostMode+0x11c>
 8001768:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800176c:	d83c      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 800176e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001772:	d01a      	beq.n	80017aa <ADC_ConfigureBoostMode+0x10a>
 8001774:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001778:	d836      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 800177a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800177e:	d014      	beq.n	80017aa <ADC_ConfigureBoostMode+0x10a>
 8001780:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001784:	d830      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 8001786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800178a:	d00e      	beq.n	80017aa <ADC_ConfigureBoostMode+0x10a>
 800178c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001790:	d82a      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 8001792:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001796:	d008      	beq.n	80017aa <ADC_ConfigureBoostMode+0x10a>
 8001798:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800179c:	d824      	bhi.n	80017e8 <ADC_ConfigureBoostMode+0x148>
 800179e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017a2:	d002      	beq.n	80017aa <ADC_ConfigureBoostMode+0x10a>
 80017a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017a8:	d11e      	bne.n	80017e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	60fb      	str	r3, [r7, #12]
        break;
 80017ba:	e016      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
        break;
 80017c2:	e012      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	60fb      	str	r3, [r7, #12]
        break;
 80017ca:	e00e      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	099b      	lsrs	r3, r3, #6
 80017d0:	60fb      	str	r3, [r7, #12]
        break;
 80017d2:	e00a      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	09db      	lsrs	r3, r3, #7
 80017d8:	60fb      	str	r3, [r7, #12]
        break;
 80017da:	e006      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	60fb      	str	r3, [r7, #12]
        break;
 80017e2:	e002      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80017e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80017ea:	f7ff f8b5 	bl	8000958 <HAL_GetREVID>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d815      	bhi.n	8001824 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a2b      	ldr	r2, [pc, #172]	@ (80018a8 <ADC_ConfigureBoostMode+0x208>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d908      	bls.n	8001812 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800180e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001810:	e03e      	b.n	8001890 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	e035      	b.n	8001890 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ac <ADC_ConfigureBoostMode+0x20c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d808      	bhi.n	8001844 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001840:	609a      	str	r2, [r3, #8]
}
 8001842:	e025      	b.n	8001890 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <ADC_ConfigureBoostMode+0x210>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d80a      	bhi.n	8001862 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	e016      	b.n	8001890 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <ADC_ConfigureBoostMode+0x214>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d80a      	bhi.n	8001880 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187c:	609a      	str	r2, [r3, #8]
}
 800187e:	e007      	b.n	8001890 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000
 800189c:	40022100 	.word	0x40022100
 80018a0:	40022300 	.word	0x40022300
 80018a4:	58026300 	.word	0x58026300
 80018a8:	01312d00 	.word	0x01312d00
 80018ac:	005f5e10 	.word	0x005f5e10
 80018b0:	00bebc20 	.word	0x00bebc20
 80018b4:	017d7840 	.word	0x017d7840

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	@ (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <__NVIC_SetPriority+0x50>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	@ 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
         );
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	@ 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff8e 	bl	800191c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff47 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff5e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff90 	bl	8001970 <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5f 	bl	800191c <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffb2 	bl	80019d8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	@ 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a8e:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <HAL_GPIO_Init+0x234>)
 8001a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a92:	e194      	b.n	8001dbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8186 	beq.w	8001db8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_GPIO_Init+0x44>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d017      	beq.n	8001b62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d123      	bne.n	8001bb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0203 	and.w	r2, r3, #3
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80e0 	beq.w	8001db8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <HAL_GPIO_Init+0x238>)
 8001bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8001cb8 <HAL_GPIO_Init+0x238>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c08:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb8 <HAL_GPIO_Init+0x238>)
 8001c0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a29      	ldr	r2, [pc, #164]	@ (8001cbc <HAL_GPIO_Init+0x23c>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a20      	ldr	r2, [pc, #128]	@ (8001cc0 <HAL_GPIO_Init+0x240>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d052      	beq.n	8001ce8 <HAL_GPIO_Init+0x268>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <HAL_GPIO_Init+0x244>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d031      	beq.n	8001cae <HAL_GPIO_Init+0x22e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_GPIO_Init+0x248>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02b      	beq.n	8001caa <HAL_GPIO_Init+0x22a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <HAL_GPIO_Init+0x24c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d025      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd0 <HAL_GPIO_Init+0x250>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01f      	beq.n	8001ca2 <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <HAL_GPIO_Init+0x254>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d019      	beq.n	8001c9e <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <HAL_GPIO_Init+0x258>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a19      	ldr	r2, [pc, #100]	@ (8001cdc <HAL_GPIO_Init+0x25c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d00d      	beq.n	8001c96 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ce0 <HAL_GPIO_Init+0x260>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d007      	beq.n	8001c92 <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_GPIO_Init+0x264>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_Init+0x20e>
 8001c8a:	2309      	movs	r3, #9
 8001c8c:	e02d      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001c8e:	230a      	movs	r3, #10
 8001c90:	e02b      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001c92:	2308      	movs	r3, #8
 8001c94:	e029      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001c96:	2307      	movs	r3, #7
 8001c98:	e027      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e025      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e023      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e021      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e01f      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e01d      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e01b      	b.n	8001cea <HAL_GPIO_Init+0x26a>
 8001cb2:	bf00      	nop
 8001cb4:	58000080 	.word	0x58000080
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	58000400 	.word	0x58000400
 8001cc0:	58020000 	.word	0x58020000
 8001cc4:	58020400 	.word	0x58020400
 8001cc8:	58020800 	.word	0x58020800
 8001ccc:	58020c00 	.word	0x58020c00
 8001cd0:	58021000 	.word	0x58021000
 8001cd4:	58021400 	.word	0x58021400
 8001cd8:	58021800 	.word	0x58021800
 8001cdc:	58021c00 	.word	0x58021c00
 8001ce0:	58022000 	.word	0x58022000
 8001ce4:	58022400 	.word	0x58022400
 8001ce8:	2300      	movs	r3, #0
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cfa:	4938      	ldr	r1, [pc, #224]	@ (8001ddc <HAL_GPIO_Init+0x35c>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f47f ae63 	bne.w	8001a94 <HAL_GPIO_Init+0x14>
  }
}
 8001dce:	bf00      	nop
 8001dd0:	bf00      	nop
 8001dd2:	3724      	adds	r7, #36	@ 0x24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	58000400 	.word	0x58000400

08001de0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_PWREx_ConfigSupply+0x70>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00a      	beq.n	8001e0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_PWREx_ConfigSupply+0x70>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e01f      	b.n	8001e46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e01d      	b.n	8001e46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_PWREx_ConfigSupply+0x70>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	490f      	ldr	r1, [pc, #60]	@ (8001e50 <HAL_PWREx_ConfigSupply+0x70>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e1a:	f7fe fd6d 	bl	80008f8 <HAL_GetTick>
 8001e1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e20:	e009      	b.n	8001e36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e22:	f7fe fd69 	bl	80008f8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e30:	d901      	bls.n	8001e36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_PWREx_ConfigSupply+0x70>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e42:	d1ee      	bne.n	8001e22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	58024800 	.word	0x58024800

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f000 bc48 	b.w	80026f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8088 	beq.w	8001f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b99      	ldr	r3, [pc, #612]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e80:	4b96      	ldr	r3, [pc, #600]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d007      	beq.n	8001e9c <HAL_RCC_OscConfig+0x48>
 8001e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8e:	2b18      	cmp	r3, #24
 8001e90:	d111      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62>
 8001e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d06d      	beq.n	8001f84 <HAL_RCC_OscConfig+0x130>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d169      	bne.n	8001f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f000 bc21 	b.w	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x7a>
 8001ec0:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a85      	ldr	r2, [pc, #532]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x9c>
 8001ed6:	4b81      	ldr	r3, [pc, #516]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a80      	ldr	r2, [pc, #512]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b7e      	ldr	r3, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7d      	ldr	r2, [pc, #500]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001efa:	4b78      	ldr	r3, [pc, #480]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a74      	ldr	r2, [pc, #464]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd8>
 8001f14:	4b71      	ldr	r3, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a70      	ldr	r2, [pc, #448]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b6e      	ldr	r3, [pc, #440]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a6d      	ldr	r2, [pc, #436]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe fce0 	bl	80008f8 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fcdc 	bl	80008f8 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e3d4      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fccc 	bl	80008f8 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fcc8 	bl	80008f8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e3c0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f76:	4b59      	ldr	r3, [pc, #356]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x110>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80ca 	beq.w	8002128 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f94:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_RCC_OscConfig+0x166>
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	2b18      	cmp	r3, #24
 8001fae:	d156      	bne.n	800205e <HAL_RCC_OscConfig+0x20a>
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d151      	bne.n	800205e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fba:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e392      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fd2:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0219 	bic.w	r2, r3, #25
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	493f      	ldr	r1, [pc, #252]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fc88 	bl	80008f8 <HAL_GetTick>
 8001fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7fe fc84 	bl	80008f8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e37c      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffe:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	f7fe fca5 	bl	8000958 <HAL_GetREVID>
 800200e:	4603      	mov	r3, r0
 8002010:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002014:	4293      	cmp	r3, r2
 8002016:	d817      	bhi.n	8002048 <HAL_RCC_OscConfig+0x1f4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b40      	cmp	r3, #64	@ 0x40
 800201e:	d108      	bne.n	8002032 <HAL_RCC_OscConfig+0x1de>
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 800202a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002030:	e07a      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	031b      	lsls	r3, r3, #12
 8002040:	4926      	ldr	r1, [pc, #152]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002046:	e06f      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	4921      	ldr	r1, [pc, #132]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800205c:	e064      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d047      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002066:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0219 	bic.w	r2, r3, #25
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	491a      	ldr	r1, [pc, #104]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fc3e 	bl	80008f8 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002080:	f7fe fc3a 	bl	80008f8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e332      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	f7fe fc5b 	bl	8000958 <HAL_GetREVID>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d819      	bhi.n	80020e0 <HAL_RCC_OscConfig+0x28c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	2b40      	cmp	r3, #64	@ 0x40
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_OscConfig+0x272>
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80020bc:	4a07      	ldr	r2, [pc, #28]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c2:	6053      	str	r3, [r2, #4]
 80020c4:	e030      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	031b      	lsls	r3, r3, #12
 80020d4:	4901      	ldr	r1, [pc, #4]	@ (80020dc <HAL_RCC_OscConfig+0x288>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
 80020da:	e025      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
 80020dc:	58024400 	.word	0x58024400
 80020e0:	4b9a      	ldr	r3, [pc, #616]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	4997      	ldr	r1, [pc, #604]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e018      	b.n	8002128 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f6:	4b95      	ldr	r3, [pc, #596]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a94      	ldr	r2, [pc, #592]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fbf9 	bl	80008f8 <HAL_GetTick>
 8002106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fbf5 	bl	80008f8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2ed      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800211c:	4b8b      	ldr	r3, [pc, #556]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a9 	beq.w	8002288 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002136:	4b85      	ldr	r3, [pc, #532]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002140:	4b82      	ldr	r3, [pc, #520]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d007      	beq.n	800215c <HAL_RCC_OscConfig+0x308>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b18      	cmp	r3, #24
 8002150:	d13a      	bne.n	80021c8 <HAL_RCC_OscConfig+0x374>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d135      	bne.n	80021c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800215c:	4b7b      	ldr	r3, [pc, #492]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_OscConfig+0x320>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b80      	cmp	r3, #128	@ 0x80
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e2c1      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002174:	f7fe fbf0 	bl	8000958 <HAL_GetREVID>
 8002178:	4603      	mov	r3, r0
 800217a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800217e:	4293      	cmp	r3, r2
 8002180:	d817      	bhi.n	80021b2 <HAL_RCC_OscConfig+0x35e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	2b20      	cmp	r3, #32
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x348>
 800218a:	4b70      	ldr	r3, [pc, #448]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002192:	4a6e      	ldr	r2, [pc, #440]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002194:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002198:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800219a:	e075      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800219c:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	4968      	ldr	r1, [pc, #416]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021b0:	e06a      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b2:	4b66      	ldr	r3, [pc, #408]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	4962      	ldr	r1, [pc, #392]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021c6:	e05f      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d042      	beq.n	8002256 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021d0:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fb8c 	bl	80008f8 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021e4:	f7fe fb88 	bl	80008f8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e280      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f6:	4b55      	ldr	r3, [pc, #340]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002202:	f7fe fba9 	bl	8000958 <HAL_GetREVID>
 8002206:	4603      	mov	r3, r0
 8002208:	f241 0203 	movw	r2, #4099	@ 0x1003
 800220c:	4293      	cmp	r3, r2
 800220e:	d817      	bhi.n	8002240 <HAL_RCC_OscConfig+0x3ec>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d108      	bne.n	800222a <HAL_RCC_OscConfig+0x3d6>
 8002218:	4b4c      	ldr	r3, [pc, #304]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002220:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002226:	6053      	str	r3, [r2, #4]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
 800222a:	4b48      	ldr	r3, [pc, #288]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	4944      	ldr	r1, [pc, #272]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
 800223e:	e023      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
 8002240:	4b42      	ldr	r3, [pc, #264]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	493f      	ldr	r1, [pc, #252]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3c      	ldr	r2, [pc, #240]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800225c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fb49 	bl	80008f8 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800226a:	f7fe fb45 	bl	80008f8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e23d      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800227c:	4b33      	ldr	r3, [pc, #204]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d036      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b2b      	ldr	r3, [pc, #172]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a0:	4a2a      	ldr	r2, [pc, #168]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a8:	f7fe fb26 	bl	80008f8 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe fb22 	bl	80008f8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e21a      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x45c>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d4:	4a1d      	ldr	r2, [pc, #116]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fb0c 	bl	80008f8 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe fb08 	bl	80008f8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e200      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d039      	beq.n	8002382 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01c      	beq.n	8002350 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a0c      	ldr	r2, [pc, #48]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002320:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002322:	f7fe fae9 	bl	80008f8 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800232a:	f7fe fae5 	bl	80008f8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e1dd      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_RCC_OscConfig+0x4f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x4d6>
 8002348:	e01b      	b.n	8002382 <HAL_RCC_OscConfig+0x52e>
 800234a:	bf00      	nop
 800234c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002350:	4b9b      	ldr	r3, [pc, #620]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a9a      	ldr	r2, [pc, #616]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800235a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800235c:	f7fe facc 	bl	80008f8 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002364:	f7fe fac8 	bl	80008f8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1c0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002376:	4b92      	ldr	r3, [pc, #584]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8081 	beq.w	8002492 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002390:	4b8c      	ldr	r3, [pc, #560]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a8b      	ldr	r2, [pc, #556]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 8002396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800239c:	f7fe faac 	bl	80008f8 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7fe faa8 	bl	80008f8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1a0      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b6:	4b83      	ldr	r3, [pc, #524]	@ (80025c4 <HAL_RCC_OscConfig+0x770>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x584>
 80023ca:	4b7d      	ldr	r3, [pc, #500]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d6:	e02d      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x5a6>
 80023e0:	4b77      	ldr	r3, [pc, #476]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e4:	4a76      	ldr	r2, [pc, #472]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023e6:	f023 0301 	bic.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ec:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f0:	4a73      	ldr	r2, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80023f2:	f023 0304 	bic.w	r3, r3, #4
 80023f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f8:	e01c      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x5c8>
 8002402:	4b6f      	ldr	r3, [pc, #444]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	4a6e      	ldr	r2, [pc, #440]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6713      	str	r3, [r2, #112]	@ 0x70
 800240e:	4b6c      	ldr	r3, [pc, #432]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002412:	4a6b      	ldr	r2, [pc, #428]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	@ 0x70
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x5e0>
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	4a67      	ldr	r2, [pc, #412]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6713      	str	r3, [r2, #112]	@ 0x70
 8002428:	4b65      	ldr	r3, [pc, #404]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a64      	ldr	r2, [pc, #400]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d015      	beq.n	8002468 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7fe fa5c 	bl	80008f8 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fa58 	bl	80008f8 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e14e      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800245a:	4b59      	ldr	r3, [pc, #356]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0ee      	beq.n	8002444 <HAL_RCC_OscConfig+0x5f0>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe fa46 	bl	80008f8 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe fa42 	bl	80008f8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e138      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002486:	4b4e      	ldr	r3, [pc, #312]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ee      	bne.n	8002470 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 812d 	beq.w	80026f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800249c:	4b48      	ldr	r3, [pc, #288]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a4:	2b18      	cmp	r3, #24
 80024a6:	f000 80bd 	beq.w	8002624 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f040 809e 	bne.w	80025f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a41      	ldr	r2, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fa1a 	bl	80008f8 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fa16 	bl	80008f8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e10e      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024da:	4b39      	ldr	r3, [pc, #228]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024ea:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <HAL_RCC_OscConfig+0x774>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024f6:	0112      	lsls	r2, r2, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	4931      	ldr	r1, [pc, #196]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	3b01      	subs	r3, #1
 8002506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	3b01      	subs	r3, #1
 8002510:	025b      	lsls	r3, r3, #9
 8002512:	b29b      	uxth	r3, r3
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251a:	3b01      	subs	r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	3b01      	subs	r3, #1
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002530:	4923      	ldr	r1, [pc, #140]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	4a21      	ldr	r2, [pc, #132]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002542:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002546:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <HAL_RCC_OscConfig+0x778>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800254e:	00d2      	lsls	r2, r2, #3
 8002550:	491b      	ldr	r1, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	f023 020c 	bic.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4917      	ldr	r1, [pc, #92]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002568:	4b15      	ldr	r3, [pc, #84]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f023 0202 	bic.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	4912      	ldr	r1, [pc, #72]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025aa:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <HAL_RCC_OscConfig+0x76c>)
 80025b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe f99f 	bl	80008f8 <HAL_GetTick>
 80025ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025bc:	e011      	b.n	80025e2 <HAL_RCC_OscConfig+0x78e>
 80025be:	bf00      	nop
 80025c0:	58024400 	.word	0x58024400
 80025c4:	58024800 	.word	0x58024800
 80025c8:	fffffc0c 	.word	0xfffffc0c
 80025cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe f992 	bl	80008f8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e08a      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025e2:	4b47      	ldr	r3, [pc, #284]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x77c>
 80025ee:	e082      	b.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b43      	ldr	r3, [pc, #268]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80025f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe f97c 	bl	80008f8 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe f978 	bl	80008f8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e070      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x7b0>
 8002622:	e068      	b.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 8002626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800262a:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	2b01      	cmp	r3, #1
 8002636:	d031      	beq.n	800269c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d12a      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d122      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0a5b      	lsrs	r3, r3, #9
 800266a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002672:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0c1b      	lsrs	r3, r3, #16
 800267c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002684:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d108      	bne.n	800269c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e02b      	b.n	80026f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026a0:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c2:	f7fe f919 	bl	80008f8 <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80026c8:	bf00      	nop
 80026ca:	f7fe f915 	bl	80008f8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d0f9      	beq.n	80026ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_RCC_OscConfig+0x8b0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026e2:	00d2      	lsls	r2, r2, #3
 80026e4:	4906      	ldr	r1, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026ea:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_RCC_OscConfig+0x8ac>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	ffff0007 	.word	0xffff0007

08002708 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e19c      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b8a      	ldr	r3, [pc, #552]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b87      	ldr	r3, [pc, #540]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4985      	ldr	r1, [pc, #532]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b83      	ldr	r3, [pc, #524]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e184      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002764:	429a      	cmp	r2, r3
 8002766:	d908      	bls.n	800277a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002768:	4b78      	ldr	r3, [pc, #480]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4975      	ldr	r1, [pc, #468]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002776:	4313      	orrs	r3, r2
 8002778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002792:	429a      	cmp	r2, r3
 8002794:	d908      	bls.n	80027a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002796:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	496a      	ldr	r1, [pc, #424]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699a      	ldr	r2, [r3, #24]
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d908      	bls.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027c4:	4b61      	ldr	r3, [pc, #388]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	495e      	ldr	r1, [pc, #376]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d908      	bls.n	8002804 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027f2:	4b56      	ldr	r3, [pc, #344]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4953      	ldr	r1, [pc, #332]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002800:	4313      	orrs	r3, r2
 8002802:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b4d      	ldr	r3, [pc, #308]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	429a      	cmp	r2, r3
 800281e:	d908      	bls.n	8002832 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b4a      	ldr	r3, [pc, #296]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f023 020f 	bic.w	r2, r3, #15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4947      	ldr	r1, [pc, #284]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800282e:	4313      	orrs	r3, r2
 8002830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d055      	beq.n	80028ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800283e:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4940      	ldr	r1, [pc, #256]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800284c:	4313      	orrs	r3, r2
 800284e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002858:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d121      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0f6      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002870:	4b36      	ldr	r3, [pc, #216]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d115      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0ea      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002888:	4b30      	ldr	r3, [pc, #192]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0de      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0d6      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a8:	4b28      	ldr	r3, [pc, #160]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4925      	ldr	r1, [pc, #148]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe f81d 	bl	80008f8 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c2:	f7fe f819 	bl	80008f8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0be      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d8:	4b1c      	ldr	r3, [pc, #112]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d1eb      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	4b14      	ldr	r3, [pc, #80]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	429a      	cmp	r2, r3
 8002904:	d208      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002906:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	490e      	ldr	r1, [pc, #56]	@ (800294c <HAL_RCC_ClockConfig+0x244>)
 8002914:	4313      	orrs	r3, r2
 8002916:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d214      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4906      	ldr	r1, [pc, #24]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_RCC_ClockConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e086      	b.n	8002a56 <HAL_RCC_ClockConfig+0x34e>
 8002948:	52002000 	.word	0x52002000
 800294c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002968:	429a      	cmp	r2, r3
 800296a:	d208      	bcs.n	800297e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800296c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4939      	ldr	r1, [pc, #228]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800297a:	4313      	orrs	r3, r2
 800297c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002996:	429a      	cmp	r2, r3
 8002998:	d208      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	492e      	ldr	r1, [pc, #184]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d208      	bcs.n	80029da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4922      	ldr	r1, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d208      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4917      	ldr	r1, [pc, #92]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a08:	f000 f834 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b14      	ldr	r3, [pc, #80]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	4912      	ldr	r1, [pc, #72]	@ (8002a64 <HAL_RCC_ClockConfig+0x35c>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
 8002a24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <HAL_RCC_ClockConfig+0x358>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <HAL_RCC_ClockConfig+0x35c>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x360>)
 8002a3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a40:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_RCC_ClockConfig+0x364>)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a46:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x368>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd ff0a 	bl	8000864 <HAL_InitTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	08005860 	.word	0x08005860
 8002a68:	24000004 	.word	0x24000004
 8002a6c:	24000000 	.word	0x24000000
 8002a70:	24000008 	.word	0x24000008

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7a:	4bb3      	ldr	r3, [pc, #716]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	f200 8155 	bhi.w	8002d32 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002af5 	.word	0x08002af5
 8002a94:	08002d33 	.word	0x08002d33
 8002a98:	08002d33 	.word	0x08002d33
 8002a9c:	08002d33 	.word	0x08002d33
 8002aa0:	08002d33 	.word	0x08002d33
 8002aa4:	08002d33 	.word	0x08002d33
 8002aa8:	08002d33 	.word	0x08002d33
 8002aac:	08002d33 	.word	0x08002d33
 8002ab0:	08002b1b 	.word	0x08002b1b
 8002ab4:	08002d33 	.word	0x08002d33
 8002ab8:	08002d33 	.word	0x08002d33
 8002abc:	08002d33 	.word	0x08002d33
 8002ac0:	08002d33 	.word	0x08002d33
 8002ac4:	08002d33 	.word	0x08002d33
 8002ac8:	08002d33 	.word	0x08002d33
 8002acc:	08002d33 	.word	0x08002d33
 8002ad0:	08002b21 	.word	0x08002b21
 8002ad4:	08002d33 	.word	0x08002d33
 8002ad8:	08002d33 	.word	0x08002d33
 8002adc:	08002d33 	.word	0x08002d33
 8002ae0:	08002d33 	.word	0x08002d33
 8002ae4:	08002d33 	.word	0x08002d33
 8002ae8:	08002d33 	.word	0x08002d33
 8002aec:	08002d33 	.word	0x08002d33
 8002af0:	08002b27 	.word	0x08002b27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af4:	4b94      	ldr	r3, [pc, #592]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b00:	4b91      	ldr	r3, [pc, #580]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	4a90      	ldr	r2, [pc, #576]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002b12:	e111      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b14:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b16:	61bb      	str	r3, [r7, #24]
      break;
 8002b18:	e10e      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b1c:	61bb      	str	r3, [r7, #24]
      break;
 8002b1e:	e10b      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002b20:	4b8c      	ldr	r3, [pc, #560]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002b22:	61bb      	str	r3, [r7, #24]
      break;
 8002b24:	e108      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b26:	4b88      	ldr	r3, [pc, #544]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002b30:	4b85      	ldr	r3, [pc, #532]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b3c:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b46:	4b80      	ldr	r3, [pc, #512]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80e1 	beq.w	8002d2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	f000 8083 	beq.w	8002c78 <HAL_RCC_GetSysClockFreq+0x204>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	f200 80a1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x248>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x114>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d056      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b86:	e099      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b88:	4b6f      	ldr	r3, [pc, #444]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02d      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b94:	4b6c      	ldr	r3, [pc, #432]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	4a6b      	ldr	r2, [pc, #428]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bbe:	4b62      	ldr	r3, [pc, #392]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bee:	e087      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c02:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c32:	e065      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4e:	ee07 3a90 	vmov	s15, r3
 8002c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c76:	e043      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cba:	e021      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ce2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	0a5b      	lsrs	r3, r3, #9
 8002d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d24:	ee17 3a90 	vmov	r3, s15
 8002d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002d32:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d34:	61bb      	str	r3, [r7, #24]
      break;
 8002d36:	bf00      	nop
  }

  return sysclockfreq;
 8002d38:	69bb      	ldr	r3, [r7, #24]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
 8002d4c:	03d09000 	.word	0x03d09000
 8002d50:	003d0900 	.word	0x003d0900
 8002d54:	017d7840 	.word	0x017d7840
 8002d58:	46000000 	.word	0x46000000
 8002d5c:	4c742400 	.word	0x4c742400
 8002d60:	4a742400 	.word	0x4a742400
 8002d64:	4bbebc20 	.word	0x4bbebc20

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d6e:	f7ff fe81 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490f      	ldr	r1, [pc, #60]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <HAL_RCC_GetHCLKFreq+0x54>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	f003 031f 	and.w	r3, r3, #31
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002da2:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002da4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002da6:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	08005860 	.word	0x08005860
 8002dc0:	24000004 	.word	0x24000004
 8002dc4:	24000000 	.word	0x24000000

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002dcc:	f7ff ffcc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	08005860 	.word	0x08005860

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b0ca      	sub	sp, #296	@ 0x128
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e18:	2500      	movs	r5, #0
 8002e1a:	ea54 0305 	orrs.w	r3, r4, r5
 8002e1e:	d049      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e2a:	d02f      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002e2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002e30:	d828      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e36:	d01a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e3c:	d822      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e46:	d007      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e48:	e01c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4a:	4bb8      	ldr	r3, [pc, #736]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	4ab7      	ldr	r2, [pc, #732]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e56:	e01a      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fb61 	bl	8005528 <RCCEx_PLL2_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e6c:	e00f      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e72:	3328      	adds	r3, #40	@ 0x28
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fc08 	bl	800568c <RCCEx_PLL3_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e82:	e004      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e96:	4ba5      	ldr	r3, [pc, #660]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ea4:	4aa1      	ldr	r2, [pc, #644]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	6513      	str	r3, [r2, #80]	@ 0x50
 8002eaa:	e003      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002ec0:	f04f 0900 	mov.w	r9, #0
 8002ec4:	ea58 0309 	orrs.w	r3, r8, r9
 8002ec8:	d047      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d82a      	bhi.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002ef1 	.word	0x08002ef1
 8002ee0:	08002eff 	.word	0x08002eff
 8002ee4:	08002f15 	.word	0x08002f15
 8002ee8:	08002f33 	.word	0x08002f33
 8002eec:	08002f33 	.word	0x08002f33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef0:	4b8e      	ldr	r3, [pc, #568]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	4a8d      	ldr	r2, [pc, #564]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002efc:	e01a      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f02:	3308      	adds	r3, #8
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fb0e 	bl	8005528 <RCCEx_PLL2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f12:	e00f      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f18:	3328      	adds	r3, #40	@ 0x28
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 fbb5 	bl	800568c <RCCEx_PLL3_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	f023 0107 	bic.w	r1, r3, #7
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	4a78      	ldr	r2, [pc, #480]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f66:	f04f 0b00 	mov.w	fp, #0
 8002f6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f6e:	d04c      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f7a:	d030      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f80:	d829      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f84:	d02d      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f88:	d825      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f8a:	2b80      	cmp	r3, #128	@ 0x80
 8002f8c:	d018      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f8e:	2b80      	cmp	r3, #128	@ 0x80
 8002f90:	d821      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002f96:	2b40      	cmp	r3, #64	@ 0x40
 8002f98:	d007      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9c:	4b63      	ldr	r3, [pc, #396]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	4a62      	ldr	r2, [pc, #392]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fae:	3308      	adds	r3, #8
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 fab8 	bl	8005528 <RCCEx_PLL2_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fbe:	e011      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc4:	3328      	adds	r3, #40	@ 0x28
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb5f 	bl	800568c <RCCEx_PLL3_Config>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002fec:	4b4f      	ldr	r3, [pc, #316]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	4a4c      	ldr	r2, [pc, #304]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003000:	e003      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003016:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003020:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003024:	460b      	mov	r3, r1
 8003026:	4313      	orrs	r3, r2
 8003028:	d053      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800302e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003036:	d035      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003038:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800303c:	d82e      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800303e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003042:	d031      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003044:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003048:	d828      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304e:	d01a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d822      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800305a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800305e:	d007      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003060:	e01c      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003062:	4b32      	ldr	r3, [pc, #200]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	4a31      	ldr	r2, [pc, #196]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800306c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800306e:	e01c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003074:	3308      	adds	r3, #8
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fa55 	bl	8005528 <RCCEx_PLL2_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003084:	e011      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	3328      	adds	r3, #40	@ 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f002 fafc 	bl	800568c <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800309a:	e006      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030a2:	e002      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80030a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80030ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030c2:	4a1a      	ldr	r2, [pc, #104]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c8:	e003      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80030e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80030ec:	460b      	mov	r3, r1
 80030ee:	4313      	orrs	r3, r2
 80030f0:	d056      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030fe:	d038      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003100:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003104:	d831      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003106:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800310a:	d034      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800310c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003110:	d82b      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003116:	d01d      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800311c:	d825      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003128:	e01f      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003130:	4ba2      	ldr	r3, [pc, #648]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	4aa1      	ldr	r2, [pc, #644]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800313c:	e01c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003142:	3308      	adds	r3, #8
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f9ee 	bl	8005528 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003152:	e011      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003158:	3328      	adds	r3, #40	@ 0x28
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f002 fa95 	bl	800568c <RCCEx_PLL3_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003180:	4b8e      	ldr	r3, [pc, #568]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003190:	4a8a      	ldr	r2, [pc, #552]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003192:	430b      	orrs	r3, r1
 8003194:	6593      	str	r3, [r2, #88]	@ 0x58
 8003196:	e003      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80031ba:	460b      	mov	r3, r1
 80031bc:	4313      	orrs	r3, r2
 80031be:	d03a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c6:	2b30      	cmp	r3, #48	@ 0x30
 80031c8:	d01f      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80031ca:	2b30      	cmp	r3, #48	@ 0x30
 80031cc:	d819      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d00c      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d815      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d111      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031de:	4b77      	ldr	r3, [pc, #476]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	4a76      	ldr	r2, [pc, #472]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	3308      	adds	r3, #8
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 f997 	bl	8005528 <RCCEx_PLL2_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003218:	4b68      	ldr	r3, [pc, #416]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003226:	4a65      	ldr	r2, [pc, #404]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003228:	430b      	orrs	r3, r1
 800322a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003242:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800324c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d051      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003260:	d035      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003262:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003266:	d82e      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800326c:	d031      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800326e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003272:	d828      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003278:	d01a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800327a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327e:	d822      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d007      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800328a:	e01c      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328c:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003290:	4a4a      	ldr	r2, [pc, #296]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003298:	e01c      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800329a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329e:	3308      	adds	r3, #8
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 f940 	bl	8005528 <RCCEx_PLL2_Config>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032ae:	e011      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	3328      	adds	r3, #40	@ 0x28
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 f9e7 	bl	800568c <RCCEx_PLL3_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80032d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032dc:	4b37      	ldr	r3, [pc, #220]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ea:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800330a:	2300      	movs	r3, #0
 800330c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003310:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003314:	460b      	mov	r3, r1
 8003316:	4313      	orrs	r3, r2
 8003318:	d056      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003324:	d033      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003326:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800332a:	d82c      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800332c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003330:	d02f      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003332:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003336:	d826      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003338:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800333c:	d02b      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800333e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003342:	d820      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003348:	d012      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800334a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800334e:	d81a      	bhi.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d022      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d115      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	3308      	adds	r3, #8
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f002 f8e0 	bl	8005528 <RCCEx_PLL2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800336e:	e015      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003374:	3328      	adds	r3, #40	@ 0x28
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f002 f987 	bl	800568c <RCCEx_PLL3_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003384:	e00a      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800338e:	bf00      	nop
 8003390:	e004      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800339a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033b2:	4a02      	ldr	r2, [pc, #8]	@ (80033bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b4:	430b      	orrs	r3, r1
 80033b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80033b8:	e006      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033ba:	bf00      	nop
 80033bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d055      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033f4:	d033      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033fa:	d82c      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d02f      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003406:	d826      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003408:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800340c:	d02b      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800340e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003412:	d820      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003418:	d012      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800341a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800341e:	d81a      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003428:	d115      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342e:	3308      	adds	r3, #8
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f002 f878 	bl	8005528 <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800343e:	e015      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	3328      	adds	r3, #40	@ 0x28
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f002 f91f 	bl	800568c <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003454:	e00a      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800345e:	bf00      	nop
 8003460:	e004      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003462:	bf00      	nop
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003474:	4ba3      	ldr	r3, [pc, #652]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003484:	4a9f      	ldr	r2, [pc, #636]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003486:	430b      	orrs	r3, r1
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d037      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034be:	d00e      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80034c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034c4:	d816      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d018      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80034ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ce:	d111      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	4a8b      	ldr	r2, [pc, #556]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034dc:	e00f      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	3308      	adds	r3, #8
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 f81e 	bl	8005528 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034f2:	e004      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003506:	4b7f      	ldr	r3, [pc, #508]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800350e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a7b      	ldr	r2, [pc, #492]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003516:	430b      	orrs	r3, r1
 8003518:	6513      	str	r3, [r2, #80]	@ 0x50
 800351a:	e003      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003534:	2300      	movs	r3, #0
 8003536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800353a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800353e:	460b      	mov	r3, r1
 8003540:	4313      	orrs	r3, r2
 8003542:	d039      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b03      	cmp	r3, #3
 800354c:	d81c      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800354e:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003591 	.word	0x08003591
 8003558:	08003565 	.word	0x08003565
 800355c:	08003573 	.word	0x08003573
 8003560:	08003591 	.word	0x08003591
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003564:	4b67      	ldr	r3, [pc, #412]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003568:	4a66      	ldr	r2, [pc, #408]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003570:	e00f      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003576:	3308      	adds	r3, #8
 8003578:	2102      	movs	r1, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 ffd4 	bl	8005528 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800359a:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	f023 0103 	bic.w	r1, r3, #3
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a8:	4a56      	ldr	r2, [pc, #344]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f000 809f 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e6:	f7fd f987 	bl	80008f8 <HAL_GetTick>
 80035ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ee:	e00b      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd f982 	bl	80008f8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d903      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003606:	e005      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003608:	4b3f      	ldr	r3, [pc, #252]	@ (8003708 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ed      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003618:	2b00      	cmp	r3, #0
 800361a:	d179      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800361c:	4b39      	ldr	r3, [pc, #228]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800361e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003628:	4053      	eors	r3, r2
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d015      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003632:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800363a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003642:	4a30      	ldr	r2, [pc, #192]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003648:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800364a:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003654:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003656:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366a:	d118      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd f944 	bl	80008f8 <HAL_GetTick>
 8003670:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003674:	e00d      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd f93f 	bl	80008f8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003680:	1ad2      	subs	r2, r2, r3
 8003682:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003686:	429a      	cmp	r2, r3
 8003688:	d903      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003690:	e005      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0eb      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800369e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d129      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b6:	d10e      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80036b8:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036c8:	091a      	lsrs	r2, r3, #4
 80036ca:	4b10      	ldr	r3, [pc, #64]	@ (800370c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6113      	str	r3, [r2, #16]
 80036d4:	e005      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036e0:	6113      	str	r3, [r2, #16]
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	e00e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003702:	e009      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003704:	58024400 	.word	0x58024400
 8003708:	58024800 	.word	0x58024800
 800370c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003714:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 0301 	and.w	r3, r2, #1
 8003724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800372e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	f000 8089 	beq.w	800384c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003740:	2b28      	cmp	r3, #40	@ 0x28
 8003742:	d86b      	bhi.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003825 	.word	0x08003825
 8003750:	0800381d 	.word	0x0800381d
 8003754:	0800381d 	.word	0x0800381d
 8003758:	0800381d 	.word	0x0800381d
 800375c:	0800381d 	.word	0x0800381d
 8003760:	0800381d 	.word	0x0800381d
 8003764:	0800381d 	.word	0x0800381d
 8003768:	0800381d 	.word	0x0800381d
 800376c:	080037f1 	.word	0x080037f1
 8003770:	0800381d 	.word	0x0800381d
 8003774:	0800381d 	.word	0x0800381d
 8003778:	0800381d 	.word	0x0800381d
 800377c:	0800381d 	.word	0x0800381d
 8003780:	0800381d 	.word	0x0800381d
 8003784:	0800381d 	.word	0x0800381d
 8003788:	0800381d 	.word	0x0800381d
 800378c:	08003807 	.word	0x08003807
 8003790:	0800381d 	.word	0x0800381d
 8003794:	0800381d 	.word	0x0800381d
 8003798:	0800381d 	.word	0x0800381d
 800379c:	0800381d 	.word	0x0800381d
 80037a0:	0800381d 	.word	0x0800381d
 80037a4:	0800381d 	.word	0x0800381d
 80037a8:	0800381d 	.word	0x0800381d
 80037ac:	08003825 	.word	0x08003825
 80037b0:	0800381d 	.word	0x0800381d
 80037b4:	0800381d 	.word	0x0800381d
 80037b8:	0800381d 	.word	0x0800381d
 80037bc:	0800381d 	.word	0x0800381d
 80037c0:	0800381d 	.word	0x0800381d
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	08003825 	.word	0x08003825
 80037d0:	0800381d 	.word	0x0800381d
 80037d4:	0800381d 	.word	0x0800381d
 80037d8:	0800381d 	.word	0x0800381d
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	0800381d 	.word	0x0800381d
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	08003825 	.word	0x08003825
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	3308      	adds	r3, #8
 80037f6:	2101      	movs	r1, #1
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fe95 	bl	8005528 <RCCEx_PLL2_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003804:	e00f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	3328      	adds	r3, #40	@ 0x28
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f001 ff3c 	bl	800568c <RCCEx_PLL3_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800381a:	e004      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003822:	e000      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800382e:	4bbf      	ldr	r3, [pc, #764]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383c:	4abb      	ldr	r2, [pc, #748]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6553      	str	r3, [r2, #84]	@ 0x54
 8003842:	e003      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 0302 	and.w	r3, r2, #2
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003862:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	d041      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003872:	2b05      	cmp	r3, #5
 8003874:	d824      	bhi.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003876:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038c9 	.word	0x080038c9
 8003880:	08003895 	.word	0x08003895
 8003884:	080038ab 	.word	0x080038ab
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
 8003890:	080038c9 	.word	0x080038c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	3308      	adds	r3, #8
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fe43 	bl	8005528 <RCCEx_PLL2_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038a8:	e00f      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ae:	3328      	adds	r3, #40	@ 0x28
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 feea 	bl	800568c <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038d2:	4b96      	ldr	r3, [pc, #600]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f023 0107 	bic.w	r1, r3, #7
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038e0:	4a92      	ldr	r2, [pc, #584]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 0304 	and.w	r3, r2, #4
 80038fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003906:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d044      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003918:	2b05      	cmp	r3, #5
 800391a:	d825      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800391c:	a201      	add	r2, pc, #4	@ (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003971 	.word	0x08003971
 8003928:	0800393d 	.word	0x0800393d
 800392c:	08003953 	.word	0x08003953
 8003930:	08003971 	.word	0x08003971
 8003934:	08003971 	.word	0x08003971
 8003938:	08003971 	.word	0x08003971
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	3308      	adds	r3, #8
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f001 fdef 	bl	8005528 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003950:	e00f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	3328      	adds	r3, #40	@ 0x28
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fe96 	bl	800568c <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003966:	e004      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800397a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f023 0107 	bic.w	r1, r3, #7
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800398a:	4a68      	ldr	r2, [pc, #416]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f002 0320 	and.w	r3, r2, #32
 80039a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d055      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c6:	d033      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039cc:	d82c      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d2:	d02f      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d8:	d826      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039de:	d02b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80039e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039e4:	d820      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ea:	d012      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f0:	d81a      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d022      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039fa:	d115      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fd8f 	bl	8005528 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a10:	e015      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 fe36 	bl	800568c <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a26:	e00a      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	e006      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a30:	bf00      	nop
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a34:	bf00      	nop
 8003a36:	e002      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10b      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a46:	4b39      	ldr	r3, [pc, #228]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	4a35      	ldr	r2, [pc, #212]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a5c:	e003      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d058      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a92:	d033      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003a94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a98:	d82c      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a9e:	d02f      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa4:	d826      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aaa:	d02b      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003aac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ab0:	d820      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab6:	d012      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003abc:	d81a      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d022      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d115      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	3308      	adds	r3, #8
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fd29 	bl	8005528 <RCCEx_PLL2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003adc:	e015      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fdd0 	bl	800568c <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003af2:	e00a      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003afa:	e006      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003afc:	bf00      	nop
 8003afe:	e004      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b00:	bf00      	nop
 8003b02:	e002      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b12:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b22:	4a02      	ldr	r2, [pc, #8]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d055      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b64:	d033      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b6a:	d82c      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b70:	d02f      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b76:	d826      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b7c:	d02b      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b82:	d820      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b88:	d012      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b8e:	d81a      	bhi.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d022      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b98:	d115      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 fcc0 	bl	8005528 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bae:	e015      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	3328      	adds	r3, #40	@ 0x28
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 fd67 	bl	800568c <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003be4:	4ba1      	ldr	r3, [pc, #644]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003bf4:	4a9d      	ldr	r2, [pc, #628]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bfa:	e003      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f002 0308 	and.w	r3, r2, #8
 8003c10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	d01e      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	3328      	adds	r3, #40	@ 0x28
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fd26 	bl	800568c <RCCEx_PLL3_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c4c:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c5c:	4a83      	ldr	r2, [pc, #524]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f002 0310 	and.w	r3, r2, #16
 8003c6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d01e      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fcf7 	bl	800568c <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003caa:	4b70      	ldr	r3, [pc, #448]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cba:	4a6c      	ldr	r2, [pc, #432]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d03e      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cec:	d022      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cf2:	d81b      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003cfe:	e015      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	3308      	adds	r3, #8
 8003d06:	2100      	movs	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fc0d 	bl	8005528 <RCCEx_PLL2_Config>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3328      	adds	r3, #40	@ 0x28
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fcb4 	bl	800568c <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10b      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d4e:	4a47      	ldr	r2, [pc, #284]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d86:	d01f      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d8c:	d818      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d92:	d003      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d98:	d007      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d9a:	e011      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b33      	ldr	r3, [pc, #204]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a32      	ldr	r2, [pc, #200]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fc6a 	bl	800568c <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd2:	4b26      	ldr	r3, [pc, #152]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e00:	2300      	movs	r3, #0
 8003e02:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d034      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d007      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003e1e:	e011      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e2c:	e00e      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	3308      	adds	r3, #8
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fb76 	bl	8005528 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10d      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e62:	4a02      	ldr	r2, [pc, #8]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e6a:	bf00      	nop
 8003e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e86:	2300      	movs	r3, #0
 8003e88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d00c      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e98:	3328      	adds	r3, #40	@ 0x28
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 fbf5 	bl	800568c <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003eba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ec0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d038      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ed6:	d018      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003edc:	d811      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee2:	d014      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ee8:	d80b      	bhi.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef4:	4bc3      	ldr	r3, [pc, #780]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	4ac2      	ldr	r2, [pc, #776]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f00:	e008      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f08:	e004      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f1c:	4bb9      	ldr	r3, [pc, #740]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2c:	4ab5      	ldr	r2, [pc, #724]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d009      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f58:	4baa      	ldr	r3, [pc, #680]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	4aa7      	ldr	r2, [pc, #668]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f78:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f88:	4b9e      	ldr	r3, [pc, #632]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f98:	4a9a      	ldr	r2, [pc, #616]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fac:	2300      	movs	r3, #0
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	d009      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fba:	4b92      	ldr	r3, [pc, #584]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fbe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc8:	4a8e      	ldr	r2, [pc, #568]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fdc:	2300      	movs	r3, #0
 8003fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fea:	4b86      	ldr	r3, [pc, #536]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4a85      	ldr	r2, [pc, #532]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ff4:	6113      	str	r3, [r2, #16]
 8003ff6:	4b83      	ldr	r3, [pc, #524]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ff8:	6919      	ldr	r1, [r3, #16]
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004014:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004016:	2300      	movs	r3, #0
 8004018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800401a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800401e:	460b      	mov	r3, r1
 8004020:	4313      	orrs	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004024:	4b77      	ldr	r3, [pc, #476]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800402c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	4a74      	ldr	r2, [pc, #464]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004034:	430b      	orrs	r3, r1
 8004036:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004044:	633b      	str	r3, [r7, #48]	@ 0x30
 8004046:	2300      	movs	r3, #0
 8004048:	637b      	str	r3, [r7, #52]	@ 0x34
 800404a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800404e:	460b      	mov	r3, r1
 8004050:	4313      	orrs	r3, r2
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004054:	4b6b      	ldr	r3, [pc, #428]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004058:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004064:	4a67      	ldr	r2, [pc, #412]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004066:	430b      	orrs	r3, r1
 8004068:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	2100      	movs	r1, #0
 8004074:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004080:	460b      	mov	r3, r1
 8004082:	4313      	orrs	r3, r2
 8004084:	d011      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	3308      	adds	r3, #8
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f001 fa4a 	bl	8005528 <RCCEx_PLL2_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800409a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	2100      	movs	r1, #0
 80040b4:	6239      	str	r1, [r7, #32]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80040bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d011      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 fa2a 	bl	8005528 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	2100      	movs	r1, #0
 80040f4:	61b9      	str	r1, [r7, #24]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	3308      	adds	r3, #8
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fa0a 	bl	8005528 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	2100      	movs	r1, #0
 8004134:	6139      	str	r1, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d011      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	3328      	adds	r3, #40	@ 0x28
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fa9c 	bl	800568c <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800415a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	2100      	movs	r1, #0
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d011      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fa7c 	bl	800568c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	2100      	movs	r1, #0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	607b      	str	r3, [r7, #4]
 80041bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041c0:	460b      	mov	r3, r1
 80041c2:	4313      	orrs	r3, r2
 80041c4:	d011      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	3328      	adds	r3, #40	@ 0x28
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fa5c 	bl	800568c <RCCEx_PLL3_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80041ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004204:	58024400 	.word	0x58024400

08004208 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b090      	sub	sp, #64	@ 0x40
 800420c:	af00      	add	r7, sp, #0
 800420e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004216:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800421a:	430b      	orrs	r3, r1
 800421c:	f040 8094 	bne.w	8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004220:	4b9e      	ldr	r3, [pc, #632]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	2b04      	cmp	r3, #4
 800422e:	f200 8087 	bhi.w	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800424d 	.word	0x0800424d
 800423c:	08004275 	.word	0x08004275
 8004240:	0800429d 	.word	0x0800429d
 8004244:	08004339 	.word	0x08004339
 8004248:	080042c5 	.word	0x080042c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800424c:	4b93      	ldr	r3, [pc, #588]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004258:	d108      	bne.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800425a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f810 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004268:	f000 bd45 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004270:	f000 bd41 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004274:	4b89      	ldr	r3, [pc, #548]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004280:	d108      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004282:	f107 0318 	add.w	r3, r7, #24
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fd54 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004290:	f000 bd31 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004298:	f000 bd2d 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800429c:	4b7f      	ldr	r3, [pc, #508]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042a8:	d108      	bne.n	80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fe94 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80042b8:	f000 bd1d 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80042c0:	f000 bd19 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80042c4:	4b75      	ldr	r3, [pc, #468]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80042ce:	4b73      	ldr	r3, [pc, #460]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80042da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042e0:	4b6e      	ldr	r3, [pc, #440]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	08db      	lsrs	r3, r3, #3
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	4a6d      	ldr	r2, [pc, #436]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042f2:	e01f      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80042f4:	4b69      	ldr	r3, [pc, #420]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004300:	d106      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004308:	d102      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800430a:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004310:	4b62      	ldr	r3, [pc, #392]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800431c:	d106      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004324:	d102      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004326:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004330:	f000 bce1 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004334:	f000 bcdf 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004338:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800433a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800433c:	f000 bcdb 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004344:	f000 bcd7 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800434c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004350:	430b      	orrs	r3, r1
 8004352:	f040 80ad 	bne.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004356:	4b51      	ldr	r3, [pc, #324]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800435e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004366:	d056      	beq.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	f200 8090 	bhi.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	2bc0      	cmp	r3, #192	@ 0xc0
 8004376:	f000 8088 	beq.w	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800437a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437c:	2bc0      	cmp	r3, #192	@ 0xc0
 800437e:	f200 8088 	bhi.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d032      	beq.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438a:	2b80      	cmp	r3, #128	@ 0x80
 800438c:	f200 8081 	bhi.w	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d014      	beq.n	80043c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800439c:	e079      	b.n	8004492 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800439e:	4b3f      	ldr	r3, [pc, #252]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043aa:	d108      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 ff67 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043ba:	f000 bc9c 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80043c2:	f000 bc98 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043c6:	4b35      	ldr	r3, [pc, #212]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043d2:	d108      	bne.n	80043e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d4:	f107 0318 	add.w	r3, r7, #24
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fcab 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80043e2:	f000 bc88 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80043ea:	f000 bc84 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043ee:	4b2b      	ldr	r3, [pc, #172]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043fa:	d108      	bne.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fdeb 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800440a:	f000 bc74 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004412:	f000 bc70 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004416:	4b21      	ldr	r3, [pc, #132]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800441e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004420:	4b1e      	ldr	r3, [pc, #120]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b04      	cmp	r3, #4
 800442a:	d10c      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800442c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004432:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	08db      	lsrs	r3, r3, #3
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800443e:	fa22 f303 	lsr.w	r3, r2, r3
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004444:	e01f      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004446:	4b15      	ldr	r3, [pc, #84]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004452:	d106      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800445a:	d102      	bne.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800445e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004460:	e011      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004462:	4b0e      	ldr	r3, [pc, #56]	@ (800449c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800446e:	d106      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004476:	d102      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004478:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800447e:	2300      	movs	r3, #0
 8004480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004482:	f000 bc38 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004486:	f000 bc36 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800448c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800448e:	f000 bc32 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004496:	f000 bc2e 	b.w	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
 80044a0:	03d09000 	.word	0x03d09000
 80044a4:	003d0900 	.word	0x003d0900
 80044a8:	017d7840 	.word	0x017d7840
 80044ac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80044b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80044b8:	430b      	orrs	r3, r1
 80044ba:	f040 809c 	bne.w	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80044be:	4b9e      	ldr	r3, [pc, #632]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80044c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80044c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044ce:	d054      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044d6:	f200 808b 	bhi.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044e0:	f000 8083 	beq.w	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80044ea:	f200 8081 	bhi.w	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f4:	d02f      	beq.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044fc:	d878      	bhi.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800450a:	d012      	beq.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800450c:	e070      	b.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800450e:	4b8a      	ldr	r3, [pc, #552]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800451a:	d107      	bne.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800451c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f000 feaf 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800452a:	e3e4      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004530:	e3e1      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004532:	4b81      	ldr	r3, [pc, #516]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800453a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800453e:	d107      	bne.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004540:	f107 0318 	add.w	r3, r7, #24
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fbf5 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800454e:	e3d2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004554:	e3cf      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004556:	4b78      	ldr	r3, [pc, #480]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800455e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004562:	d107      	bne.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fd37 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004572:	e3c0      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004578:	e3bd      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800457a:	4b6f      	ldr	r3, [pc, #444]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004584:	4b6c      	ldr	r3, [pc, #432]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d10c      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d109      	bne.n	80045aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004596:	4b68      	ldr	r3, [pc, #416]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	08db      	lsrs	r3, r3, #3
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	4a66      	ldr	r2, [pc, #408]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a8:	e01e      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80045aa:	4b63      	ldr	r3, [pc, #396]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b6:	d106      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045be:	d102      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80045c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c4:	e010      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045d2:	d106      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80045d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045da:	d102      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80045dc:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80045de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80045e6:	e386      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80045e8:	e385      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80045ea:	4b57      	ldr	r3, [pc, #348]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80045ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045ee:	e382      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80045f4:	e37f      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80045f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045fa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80045fe:	430b      	orrs	r3, r1
 8004600:	f040 80a7 	bne.w	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004604:	4b4c      	ldr	r3, [pc, #304]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004608:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800460c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004614:	d055      	beq.n	80046c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800461c:	f200 8096 	bhi.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004626:	f000 8084 	beq.w	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004630:	f200 808c 	bhi.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800463a:	d030      	beq.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004642:	f200 8083 	bhi.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004652:	d012      	beq.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004654:	e07a      	b.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004656:	4b38      	ldr	r3, [pc, #224]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004662:	d107      	bne.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fe0b 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004672:	e340      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004678:	e33d      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800467a:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004686:	d107      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004688:	f107 0318 	add.w	r3, r7, #24
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fb51 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004696:	e32e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800469c:	e32b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800469e:	4b26      	ldr	r3, [pc, #152]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046aa:	d107      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fc93 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80046ba:	e31c      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80046c0:	e319      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80046d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046de:	4b16      	ldr	r3, [pc, #88]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	4a14      	ldr	r2, [pc, #80]	@ (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80046ea:	fa22 f303 	lsr.w	r3, r2, r3
 80046ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046f0:	e01e      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046f2:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fe:	d106      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004706:	d102      	bne.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004708:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800470a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800470c:	e010      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800470e:	4b0a      	ldr	r3, [pc, #40]	@ (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800471a:	d106      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800471c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004722:	d102      	bne.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004724:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004728:	e002      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800472e:	e2e2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004730:	e2e1      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004736:	e2de      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004738:	58024400 	.word	0x58024400
 800473c:	03d09000 	.word	0x03d09000
 8004740:	003d0900 	.word	0x003d0900
 8004744:	017d7840 	.word	0x017d7840
 8004748:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004750:	e2d1      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004756:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800475a:	430b      	orrs	r3, r1
 800475c:	f040 809c 	bne.w	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004760:	4b93      	ldr	r3, [pc, #588]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004764:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004768:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004770:	d054      	beq.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004778:	f200 808b 	bhi.w	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004782:	f000 8083 	beq.w	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800478c:	f200 8081 	bhi.w	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004796:	d02f      	beq.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479e:	d878      	bhi.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d004      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80047a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ac:	d012      	beq.n	80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80047ae:	e070      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047b0:	4b7f      	ldr	r3, [pc, #508]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047bc:	d107      	bne.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd5e 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047cc:	e293      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047d2:	e290      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047d4:	4b76      	ldr	r3, [pc, #472]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e0:	d107      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e2:	f107 0318 	add.w	r3, r7, #24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 faa4 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80047f0:	e281      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80047f6:	e27e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047f8:	4b6d      	ldr	r3, [pc, #436]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004804:	d107      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fbe6 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004814:	e26f      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800481a:	e26c      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800481c:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800481e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004820:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004824:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004826:	4b62      	ldr	r3, [pc, #392]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	2b04      	cmp	r3, #4
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004838:	4b5d      	ldr	r3, [pc, #372]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	08db      	lsrs	r3, r3, #3
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	4a5c      	ldr	r2, [pc, #368]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800484a:	e01e      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800484c:	4b58      	ldr	r3, [pc, #352]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004858:	d106      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004860:	d102      	bne.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004862:	4b55      	ldr	r3, [pc, #340]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004866:	e010      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004868:	4b51      	ldr	r3, [pc, #324]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004874:	d106      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800487c:	d102      	bne.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800487e:	4b4f      	ldr	r3, [pc, #316]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004882:	e002      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004888:	e235      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800488a:	e234      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800488c:	4b4c      	ldr	r3, [pc, #304]	@ (80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800488e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004890:	e231      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004896:	e22e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800489c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80048a0:	430b      	orrs	r3, r1
 80048a2:	f040 808f 	bne.w	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80048a6:	4b42      	ldr	r3, [pc, #264]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80048a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048aa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80048ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80048b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b6:	d06b      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048be:	d874      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048c6:	d056      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80048c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048ce:	d86c      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048d6:	d03b      	beq.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80048d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048de:	d864      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048e6:	d021      	beq.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80048e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048ee:	d85c      	bhi.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d004      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80048fe:	e054      	b.n	80049aa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fa62 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8004904:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004906:	e1f6      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004908:	4b29      	ldr	r3, [pc, #164]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004914:	d107      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004916:	f107 0318 	add.w	r3, r7, #24
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fa0a 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004924:	e1e7      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800492a:	e1e4      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800492c:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004938:	d107      	bne.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800493a:	f107 030c 	add.w	r3, r7, #12
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb4c 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004948:	e1d5      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800494e:	e1d2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004950:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800495c:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800496e:	e1c2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004974:	e1bf      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004976:	4b0e      	ldr	r3, [pc, #56]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004982:	d102      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004988:	e1b5      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800498e:	e1b2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800499c:	d102      	bne.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800499e:	4b07      	ldr	r3, [pc, #28]	@ (80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80049a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049a2:	e1a8      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049a8:	e1a5      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80049aa:	2300      	movs	r3, #0
 80049ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049ae:	e1a2      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80049b0:	58024400 	.word	0x58024400
 80049b4:	03d09000 	.word	0x03d09000
 80049b8:	003d0900 	.word	0x003d0900
 80049bc:	017d7840 	.word	0x017d7840
 80049c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80049c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80049cc:	430b      	orrs	r3, r1
 80049ce:	d173      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80049d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e0:	d02f      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049e8:	d863      	bhi.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f6:	d012      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80049f8:	e05b      	b.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049fa:	4b92      	ldr	r3, [pc, #584]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a06:	d107      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a08:	f107 0318 	add.w	r3, r7, #24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f991 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a16:	e16e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a1c:	e16b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a1e:	4b89      	ldr	r3, [pc, #548]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fad3 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a3a:	e15c      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a40:	e159      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a42:	4b80      	ldr	r3, [pc, #512]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a4c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d10c      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a5e:	4b79      	ldr	r3, [pc, #484]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	4a77      	ldr	r2, [pc, #476]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a70:	e01e      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a72:	4b74      	ldr	r3, [pc, #464]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8004a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a86:	d102      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a88:	4b70      	ldr	r3, [pc, #448]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8c:	e010      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa8:	e002      	b.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004aae:	e122      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ab0:	e121      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ab6:	e11e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004abc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	d133      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004acc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ada:	d012      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8004adc:	e023      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ade:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aea:	d107      	bne.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fbc7 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004afa:	e0fc      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b00:	e0f9      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b02:	4b50      	ldr	r3, [pc, #320]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b10:	f107 0318 	add.w	r3, r7, #24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f90d 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b1e:	e0ea      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b24:	e0e7      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b2a:	e0e4      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b30:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004b34:	430b      	orrs	r3, r1
 8004b36:	f040 808d 	bne.w	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8004b3a:	4b42      	ldr	r3, [pc, #264]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8004b42:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b4a:	d06b      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b52:	d874      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5a:	d056      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d86c      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b6a:	d03b      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b72:	d864      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b7a:	d021      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b82:	d85c      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b90:	d004      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8004b92:	e054      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004b94:	f000 f8b8 	bl	8004d08 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b98:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b9a:	e0ac      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9c:	4b29      	ldr	r3, [pc, #164]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004baa:	f107 0318 	add.w	r3, r7, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f8c0 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bb8:	e09d      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bbe:	e09a      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bc0:	4b20      	ldr	r3, [pc, #128]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fa02 	bl	8004fdc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bdc:	e08b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be2:	e088      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004be4:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d109      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bf0:	4b14      	ldr	r3, [pc, #80]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a13      	ldr	r2, [pc, #76]	@ (8004c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c02:	e078      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c08:	e075      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c16:	d102      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8004c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c1c:	e06b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c22:	e068      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c24:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c30:	d102      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8004c32:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c36:	e05e      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c3c:	e05b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c42:	e058      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c44:	58024400 	.word	0x58024400
 8004c48:	03d09000 	.word	0x03d09000
 8004c4c:	003d0900 	.word	0x003d0900
 8004c50:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c58:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	d148      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004c60:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c70:	d02a      	beq.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c78:	d838      	bhi.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c86:	d00d      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8004c88:	e030      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c96:	d102      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c9c:	e02b      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ca2:	e028      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ca4:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fae4 	bl	8005284 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cc0:	e019      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cc6:	e016      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd6:	f107 0318 	add.w	r3, r7, #24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f82a 	bl	8004d34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ce4:	e007      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cea:	e004      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3740      	adds	r7, #64	@ 0x40
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	58024400 	.word	0x58024400
 8004d04:	017d7840 	.word	0x017d7840

08004d08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d0c:	f7fe f82c 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	@ (8004d30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	08005860 	.word	0x08005860

08004d34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b089      	sub	sp, #36	@ 0x24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d3c:	4ba1      	ldr	r3, [pc, #644]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004d46:	4b9f      	ldr	r3, [pc, #636]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	0b1b      	lsrs	r3, r3, #12
 8004d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d52:	4b9c      	ldr	r3, [pc, #624]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	091b      	lsrs	r3, r3, #4
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004d5e:	4b99      	ldr	r3, [pc, #612]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	08db      	lsrs	r3, r3, #3
 8004d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8111 	beq.w	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f000 8083 	beq.w	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	f200 80a1 	bhi.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d056      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d9e:	e099      	b.n	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da0:	4b88      	ldr	r3, [pc, #544]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d02d      	beq.n	8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dac:	4b85      	ldr	r3, [pc, #532]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	08db      	lsrs	r3, r3, #3
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	4a84      	ldr	r2, [pc, #528]	@ (8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e06:	e087      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	e065      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e8e:	e043      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b48      	ldr	r3, [pc, #288]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ed2:	e021      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004f18:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	0a5b      	lsrs	r3, r3, #9
 8004f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3e:	ee17 2a90 	vmov	r2, s15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004f46:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f6c:	ee17 2a90 	vmov	r2, s15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004f74:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	0e1b      	lsrs	r3, r3, #24
 8004f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9a:	ee17 2a90 	vmov	r2, s15
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	3724      	adds	r7, #36	@ 0x24
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	03d09000 	.word	0x03d09000
 8004fcc:	46000000 	.word	0x46000000
 8004fd0:	4c742400 	.word	0x4c742400
 8004fd4:	4a742400 	.word	0x4a742400
 8004fd8:	4bbebc20 	.word	0x4bbebc20

08004fdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	@ 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004fee:	4b9f      	ldr	r3, [pc, #636]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	0d1b      	lsrs	r3, r3, #20
 8004ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005006:	4b99      	ldr	r3, [pc, #612]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	08db      	lsrs	r3, r3, #3
 800500c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 8111 	beq.w	800524c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	f000 8083 	beq.w	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b02      	cmp	r3, #2
 8005036:	f200 80a1 	bhi.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d056      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005046:	e099      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005048:	4b88      	ldr	r3, [pc, #544]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d02d      	beq.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005054:	4b85      	ldr	r3, [pc, #532]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	4a84      	ldr	r2, [pc, #528]	@ (8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b7b      	ldr	r3, [pc, #492]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050ae:	e087      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b6a      	ldr	r3, [pc, #424]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050f2:	e065      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b59      	ldr	r3, [pc, #356]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005136:	e043      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b48      	ldr	r3, [pc, #288]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517a:	e021      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800527c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b37      	ldr	r3, [pc, #220]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	0a5b      	lsrs	r3, r3, #9
 80051c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051da:	edd7 6a07 	vldr	s13, [r7, #28]
 80051de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e6:	ee17 2a90 	vmov	r2, s15
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80051ee:	4b1f      	ldr	r3, [pc, #124]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005208:	edd7 6a07 	vldr	s13, [r7, #28]
 800520c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005214:	ee17 2a90 	vmov	r2, s15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800521c:	4b13      	ldr	r3, [pc, #76]	@ (800526c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800521e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005220:	0e1b      	lsrs	r3, r3, #24
 8005222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800524a:	e008      	b.n	800525e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
}
 800525e:	bf00      	nop
 8005260:	3724      	adds	r7, #36	@ 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
 8005270:	03d09000 	.word	0x03d09000
 8005274:	46000000 	.word	0x46000000
 8005278:	4c742400 	.word	0x4c742400
 800527c:	4a742400 	.word	0x4a742400
 8005280:	4bbebc20 	.word	0x4bbebc20

08005284 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	@ 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800528c:	4ba0      	ldr	r3, [pc, #640]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005296:	4b9e      	ldr	r3, [pc, #632]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80052a2:	4b9b      	ldr	r3, [pc, #620]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052ac:	4b98      	ldr	r3, [pc, #608]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8111 	beq.w	80054f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	f000 8083 	beq.w	80053de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	f200 80a1 	bhi.w	8005422 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d056      	beq.n	800539a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80052ec:	e099      	b.n	8005422 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052ee:	4b88      	ldr	r3, [pc, #544]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d02d      	beq.n	8005356 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052fa:	4b85      	ldr	r3, [pc, #532]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	08db      	lsrs	r3, r3, #3
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	4a83      	ldr	r2, [pc, #524]	@ (8005514 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005306:	fa22 f303 	lsr.w	r3, r2, r3
 800530a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005324:	4b7a      	ldr	r3, [pc, #488]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	ed97 6a03 	vldr	s12, [r7, #12]
 8005338:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800533c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800534c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005350:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005354:	e087      	b.n	8005466 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005360:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800551c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005368:	4b69      	ldr	r3, [pc, #420]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005378:	ed97 6a03 	vldr	s12, [r7, #12]
 800537c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800538c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005394:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005398:	e065      	b.n	8005466 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80053a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ac:	4b58      	ldr	r3, [pc, #352]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053dc:	e043      	b.n	8005466 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	ee07 3a90 	vmov	s15, r3
 80053e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80053ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f0:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005400:	ed97 6a03 	vldr	s12, [r7, #12]
 8005404:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005420:	e021      	b.n	8005466 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800551c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005434:	4b36      	ldr	r3, [pc, #216]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005444:	ed97 6a03 	vldr	s12, [r7, #12]
 8005448:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800544c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005460:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005464:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005466:	4b2a      	ldr	r3, [pc, #168]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	0a5b      	lsrs	r3, r3, #9
 800546c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005470:	ee07 3a90 	vmov	s15, r3
 8005474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800547c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005480:	edd7 6a07 	vldr	s13, [r7, #28]
 8005484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800548c:	ee17 2a90 	vmov	r2, s15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005494:	4b1e      	ldr	r3, [pc, #120]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80054b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ba:	ee17 2a90 	vmov	r2, s15
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80054c2:	4b13      	ldr	r3, [pc, #76]	@ (8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	0e1b      	lsrs	r3, r3, #24
 80054c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054cc:	ee07 3a90 	vmov	s15, r3
 80054d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e8:	ee17 2a90 	vmov	r2, s15
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054f0:	e008      	b.n	8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	609a      	str	r2, [r3, #8]
}
 8005504:	bf00      	nop
 8005506:	3724      	adds	r7, #36	@ 0x24
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	58024400 	.word	0x58024400
 8005514:	03d09000 	.word	0x03d09000
 8005518:	46000000 	.word	0x46000000
 800551c:	4c742400 	.word	0x4c742400
 8005520:	4a742400 	.word	0x4a742400
 8005524:	4bbebc20 	.word	0x4bbebc20

08005528 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005536:	4b53      	ldr	r3, [pc, #332]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2b03      	cmp	r3, #3
 8005540:	d101      	bne.n	8005546 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e099      	b.n	800567a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005546:	4b4f      	ldr	r3, [pc, #316]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4e      	ldr	r2, [pc, #312]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800554c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005552:	f7fb f9d1 	bl	80008f8 <HAL_GetTick>
 8005556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005558:	e008      	b.n	800556c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800555a:	f7fb f9cd 	bl	80008f8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e086      	b.n	800567a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800556c:	4b45      	ldr	r3, [pc, #276]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1f0      	bne.n	800555a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005578:	4b42      	ldr	r3, [pc, #264]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	031b      	lsls	r3, r3, #12
 8005586:	493f      	ldr	r1, [pc, #252]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	628b      	str	r3, [r1, #40]	@ 0x28
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	3b01      	subs	r3, #1
 8005592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	3b01      	subs	r3, #1
 800559c:	025b      	lsls	r3, r3, #9
 800559e:	b29b      	uxth	r3, r3
 80055a0:	431a      	orrs	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	061b      	lsls	r3, r3, #24
 80055b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055bc:	4931      	ldr	r1, [pc, #196]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055c2:	4b30      	ldr	r3, [pc, #192]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	492d      	ldr	r1, [pc, #180]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d8:	f023 0220 	bic.w	r2, r3, #32
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	4928      	ldr	r1, [pc, #160]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055e6:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055f2:	4b24      	ldr	r3, [pc, #144]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 80055f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055f6:	4b24      	ldr	r3, [pc, #144]	@ (8005688 <RCCEx_PLL2_Config+0x160>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	69d2      	ldr	r2, [r2, #28]
 80055fe:	00d2      	lsls	r2, r2, #3
 8005600:	4920      	ldr	r1, [pc, #128]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005606:	4b1f      	ldr	r3, [pc, #124]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800560c:	f043 0310 	orr.w	r3, r3, #16
 8005610:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005618:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800561e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005624:	e00f      	b.n	8005646 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d106      	bne.n	800563a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800562c:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	4a14      	ldr	r2, [pc, #80]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005636:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005638:	e005      	b.n	8005646 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800563a:	4b12      	ldr	r3, [pc, #72]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005644:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005646:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a0e      	ldr	r2, [pc, #56]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800564c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005652:	f7fb f951 	bl	80008f8 <HAL_GetTick>
 8005656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005658:	e008      	b.n	800566c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800565a:	f7fb f94d 	bl	80008f8 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e006      	b.n	800567a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800566c:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <RCCEx_PLL2_Config+0x15c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	58024400 	.word	0x58024400
 8005688:	ffff0007 	.word	0xffff0007

0800568c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800569a:	4b53      	ldr	r3, [pc, #332]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d101      	bne.n	80056aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e099      	b.n	80057de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056aa:	4b4f      	ldr	r3, [pc, #316]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4e      	ldr	r2, [pc, #312]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fb f91f 	bl	80008f8 <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056bc:	e008      	b.n	80056d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056be:	f7fb f91b 	bl	80008f8 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e086      	b.n	80057de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056d0:	4b45      	ldr	r3, [pc, #276]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056dc:	4b42      	ldr	r3, [pc, #264]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	051b      	lsls	r3, r3, #20
 80056ea:	493f      	ldr	r1, [pc, #252]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	3b01      	subs	r3, #1
 8005700:	025b      	lsls	r3, r3, #9
 8005702:	b29b      	uxth	r3, r3
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	3b01      	subs	r3, #1
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005720:	4931      	ldr	r1, [pc, #196]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005722:	4313      	orrs	r3, r2
 8005724:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005726:	4b30      	ldr	r3, [pc, #192]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	492d      	ldr	r1, [pc, #180]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005738:	4b2b      	ldr	r3, [pc, #172]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	4928      	ldr	r1, [pc, #160]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005746:	4313      	orrs	r3, r2
 8005748:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800574a:	4b27      	ldr	r3, [pc, #156]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	4a26      	ldr	r2, [pc, #152]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005754:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005756:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <RCCEx_PLL3_Config+0x160>)
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	69d2      	ldr	r2, [r2, #28]
 8005762:	00d2      	lsls	r2, r2, #3
 8005764:	4920      	ldr	r1, [pc, #128]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800576a:	4b1f      	ldr	r3, [pc, #124]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005774:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800577c:	4b1a      	ldr	r3, [pc, #104]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005782:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005786:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005788:	e00f      	b.n	80057aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d106      	bne.n	800579e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005790:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	4a14      	ldr	r2, [pc, #80]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 8005796:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800579a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800579c:	e005      	b.n	80057aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800579e:	4b12      	ldr	r3, [pc, #72]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	4a11      	ldr	r2, [pc, #68]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80057a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a0e      	ldr	r2, [pc, #56]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b6:	f7fb f89f 	bl	80008f8 <HAL_GetTick>
 80057ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057bc:	e008      	b.n	80057d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057be:	f7fb f89b 	bl	80008f8 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e006      	b.n	80057de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <RCCEx_PLL3_Config+0x15c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	58024400 	.word	0x58024400
 80057ec:	ffff0007 	.word	0xffff0007

080057f0 <memset>:
 80057f0:	4402      	add	r2, r0
 80057f2:	4603      	mov	r3, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d100      	bne.n	80057fa <memset+0xa>
 80057f8:	4770      	bx	lr
 80057fa:	f803 1b01 	strb.w	r1, [r3], #1
 80057fe:	e7f9      	b.n	80057f4 <memset+0x4>

08005800 <__libc_init_array>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4d0d      	ldr	r5, [pc, #52]	@ (8005838 <__libc_init_array+0x38>)
 8005804:	4c0d      	ldr	r4, [pc, #52]	@ (800583c <__libc_init_array+0x3c>)
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	10a4      	asrs	r4, r4, #2
 800580a:	2600      	movs	r6, #0
 800580c:	42a6      	cmp	r6, r4
 800580e:	d109      	bne.n	8005824 <__libc_init_array+0x24>
 8005810:	4d0b      	ldr	r5, [pc, #44]	@ (8005840 <__libc_init_array+0x40>)
 8005812:	4c0c      	ldr	r4, [pc, #48]	@ (8005844 <__libc_init_array+0x44>)
 8005814:	f000 f818 	bl	8005848 <_init>
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	2600      	movs	r6, #0
 800581e:	42a6      	cmp	r6, r4
 8005820:	d105      	bne.n	800582e <__libc_init_array+0x2e>
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	f855 3b04 	ldr.w	r3, [r5], #4
 8005828:	4798      	blx	r3
 800582a:	3601      	adds	r6, #1
 800582c:	e7ee      	b.n	800580c <__libc_init_array+0xc>
 800582e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005832:	4798      	blx	r3
 8005834:	3601      	adds	r6, #1
 8005836:	e7f2      	b.n	800581e <__libc_init_array+0x1e>
 8005838:	08005870 	.word	0x08005870
 800583c:	08005870 	.word	0x08005870
 8005840:	08005870 	.word	0x08005870
 8005844:	08005874 	.word	0x08005874

08005848 <_init>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr

08005854 <_fini>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr
