
Camera_Laser_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001cb4  08001cb4  00011cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce4  08001ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce4  08001ce4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce4  08001ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cf8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ffd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d9f  00000000  00000000  00024039  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c8  00000000  00000000  00024dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000340  00000000  00000000  000251a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fcef  00000000  00000000  000254e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000040c2  00000000  00000000  000351cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005c94d  00000000  00000000  00039291  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00095bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d38  00000000  00000000  00095c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001c9c 	.word	0x08001c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001c9c 	.word	0x08001c9c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f954 	bl	8000478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f83c 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f876 	bl	80002c4 <MX_GPIO_Init>


  /* USER CODE BEGIN 2 */
//  Camera Trigger
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001de:	481a      	ldr	r0, [pc, #104]	; (8000248 <main+0x80>)
 80001e0:	f000 fc2a 	bl	8000a38 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	; 0x64
 80001e6:	f000 f9ad 	bl	8000544 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	4815      	ldr	r0, [pc, #84]	; (8000248 <main+0x80>)
 80001f2:	f000 fc21 	bl	8000a38 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80001f6:	2064      	movs	r0, #100	; 0x64
 80001f8:	f000 f9a4 	bl	8000544 <HAL_Delay>

//  Laser Trigger
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4811      	ldr	r0, [pc, #68]	; (8000248 <main+0x80>)
 8000204:	f000 fc18 	bl	8000a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000208:	2001      	movs	r0, #1
 800020a:	f000 f99b 	bl	8000544 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	480c      	ldr	r0, [pc, #48]	; (8000248 <main+0x80>)
 8000216:	f000 fc0f 	bl	8000a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800021a:	2001      	movs	r0, #1
 800021c:	f000 f992 	bl	8000544 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <main+0x80>)
 8000228:	f000 fc06 	bl	8000a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800022c:	2001      	movs	r0, #1
 800022e:	f000 f989 	bl	8000544 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <main+0x80>)
 800023a:	f000 fbfd 	bl	8000a38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800023e:	2001      	movs	r0, #1
 8000240:	f000 f980 	bl	8000544 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000244:	e7ec      	b.n	8000220 <main+0x58>
 8000246:	bf00      	nop
 8000248:	48000400 	.word	0x48000400

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fd16 	bl	8001c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000276:	2310      	movs	r3, #16
 8000278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fbf0 	bl	8000a68 <HAL_RCC_OscConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800028e:	f000 f859 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000292:	230f      	movs	r3, #15
 8000294:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fae4 	bl	8001878 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f845 	bl	8000344 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_GPIO_Init+0x78>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_GPIO_Init+0x78>)
 80002e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002e4:	6153      	str	r3, [r2, #20]
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_GPIO_Init+0x78>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_GPIO_Init+0x78>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a11      	ldr	r2, [pc, #68]	; (800033c <MX_GPIO_Init+0x78>)
 80002f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002fc:	6153      	str	r3, [r2, #20]
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_GPIO_Init+0x78>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <MX_GPIO_Init+0x7c>)
 8000312:	f000 fb91 	bl	8000a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000316:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800031a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2300      	movs	r3, #0
 8000326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f107 030c 	add.w	r3, r7, #12
 800032c:	4619      	mov	r1, r3
 800032e:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_GPIO_Init+0x7c>)
 8000330:	f000 fa10 	bl	8000754 <HAL_GPIO_Init>

}
 8000334:	bf00      	nop
 8000336:	3720      	adds	r7, #32
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x44>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x44>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x44>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b09      	ldr	r3, [pc, #36]	; (8000398 <HAL_MspInit+0x44>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <HAL_MspInit+0x44>)
 8000378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800037c:	61d3      	str	r3, [r2, #28]
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_MspInit+0x44>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40021000 	.word	0x40021000

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <HardFault_Handler+0x4>

080003b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <MemManage_Handler+0x4>

080003b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <BusFault_Handler+0x4>

080003bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler+0x4>

080003c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f0:	f000 f888 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <SystemInit+0x28>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <SystemInit+0x28>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <SystemInit+0x28>)
 800040e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000412:	609a      	str	r2, [r3, #8]
#endif
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	e000ed00 	.word	0xe000ed00

08000424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800045c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000428:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800042a:	e003      	b.n	8000434 <LoopCopyDataInit>

0800042c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800042e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000430:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000432:	3104      	adds	r1, #4

08000434 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000438:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800043a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800043c:	d3f6      	bcc.n	800042c <CopyDataInit>
	ldr	r2, =_sbss
 800043e:	4a0b      	ldr	r2, [pc, #44]	; (800046c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000440:	e002      	b.n	8000448 <LoopFillZerobss>

08000442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000442:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000444:	f842 3b04 	str.w	r3, [r2], #4

08000448 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <LoopForever+0x16>)
	cmp	r2, r3
 800044a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800044c:	d3f9      	bcc.n	8000442 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f7ff ffd3 	bl	80003f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f001 fbf7 	bl	8001c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000456:	f7ff feb7 	bl	80001c8 <main>

0800045a <LoopForever>:

LoopForever:
    b LoopForever
 800045a:	e7fe      	b.n	800045a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800045c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000460:	08001cec 	.word	0x08001cec
	ldr	r0, =_sdata
 8000464:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000468:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800046c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000470:	2000002c 	.word	0x2000002c

08000474 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000474:	e7fe      	b.n	8000474 <ADC1_IRQHandler>
	...

08000478 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <HAL_Init+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <HAL_Init+0x28>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000488:	2003      	movs	r0, #3
 800048a:	f000 f92f 	bl	80006ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800048e:	2000      	movs	r0, #0
 8000490:	f000 f808 	bl	80004a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000494:	f7ff ff5e 	bl	8000354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40022000 	.word	0x40022000

080004a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <HAL_InitTick+0x54>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_InitTick+0x58>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f939 	bl	800073a <HAL_SYSTICK_Config>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e00e      	b.n	80004f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d80a      	bhi.n	80004ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d8:	2200      	movs	r2, #0
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	f04f 30ff 	mov.w	r0, #4294967295
 80004e0:	f000 f90f 	bl	8000702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <HAL_InitTick+0x5c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e000      	b.n	80004f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_IncTick+0x20>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_IncTick+0x24>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <HAL_IncTick+0x24>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000008 	.word	0x20000008
 8000528:	20000028 	.word	0x20000028

0800052c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <HAL_GetTick+0x14>)
 8000532:	681b      	ldr	r3, [r3, #0]
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff ffee 	bl	800052c <HAL_GetTick>
 8000550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800055c:	d005      	beq.n	800056a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_Delay+0x40>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800056a:	bf00      	nop
 800056c:	f7ff ffde 	bl	800052c <HAL_GetTick>
 8000570:	4602      	mov	r2, r0
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	429a      	cmp	r2, r3
 800057a:	d8f7      	bhi.n	800056c <HAL_Delay+0x28>
  {
  }
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000008 	.word	0x20000008

08000588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f003 0307 	and.w	r3, r3, #7
 8000596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ba:	4a04      	ldr	r2, [pc, #16]	; (80005cc <__NVIC_SetPriorityGrouping+0x44>)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	60d3      	str	r3, [r2, #12]
}
 80005c0:	bf00      	nop
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <__NVIC_GetPriorityGrouping+0x18>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	0a1b      	lsrs	r3, r3, #8
 80005da:	f003 0307 	and.w	r3, r3, #7
}
 80005de:	4618      	mov	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b8:	d301      	bcc.n	80006be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00f      	b.n	80006de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <SysTick_Config+0x40>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c6:	210f      	movs	r1, #15
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f7ff ff8e 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SysTick_Config+0x40>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SysTick_Config+0x40>)
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	e000e010 	.word	0xe000e010

080006ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff47 	bl	8000588 <__NVIC_SetPriorityGrouping>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b086      	sub	sp, #24
 8000706:	af00      	add	r7, sp, #0
 8000708:	4603      	mov	r3, r0
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	607a      	str	r2, [r7, #4]
 800070e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000714:	f7ff ff5c 	bl	80005d0 <__NVIC_GetPriorityGrouping>
 8000718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	6978      	ldr	r0, [r7, #20]
 8000720:	f7ff ff8e 	bl	8000640 <NVIC_EncodePriority>
 8000724:	4602      	mov	r2, r0
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff5d 	bl	80005ec <__NVIC_SetPriority>
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff ffb0 	bl	80006a8 <SysTick_Config>
 8000748:	4603      	mov	r3, r0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000762:	e14e      	b.n	8000a02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	2101      	movs	r1, #1
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 8140 	beq.w	80009fc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d00b      	beq.n	800079c <HAL_GPIO_Init+0x48>
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d007      	beq.n	800079c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	2b11      	cmp	r3, #17
 8000792:	d003      	beq.n	800079c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b12      	cmp	r3, #18
 800079a:	d130      	bne.n	80007fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	2203      	movs	r2, #3
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	68da      	ldr	r2, [r3, #12]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007d2:	2201      	movs	r2, #1
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43db      	mvns	r3, r3
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	091b      	lsrs	r3, r3, #4
 80007e8:	f003 0201 	and.w	r2, r3, #1
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	2203      	movs	r2, #3
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	4013      	ands	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	4313      	orrs	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d003      	beq.n	800083e <HAL_GPIO_Init+0xea>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b12      	cmp	r3, #18
 800083c:	d123      	bne.n	8000886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	08da      	lsrs	r2, r3, #3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3208      	adds	r2, #8
 8000846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	220f      	movs	r2, #15
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4013      	ands	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	691a      	ldr	r2, [r3, #16]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	4313      	orrs	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	08da      	lsrs	r2, r3, #3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3208      	adds	r2, #8
 8000880:	6939      	ldr	r1, [r7, #16]
 8000882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2203      	movs	r2, #3
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0203 	and.w	r2, r3, #3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 809a 	beq.w	80009fc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c8:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <HAL_GPIO_Init+0x2cc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a54      	ldr	r2, [pc, #336]	; (8000a20 <HAL_GPIO_Init+0x2cc>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <HAL_GPIO_Init+0x2cc>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008e0:	4a50      	ldr	r2, [pc, #320]	; (8000a24 <HAL_GPIO_Init+0x2d0>)
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f003 0303 	and.w	r3, r3, #3
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	220f      	movs	r2, #15
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800090a:	d013      	beq.n	8000934 <HAL_GPIO_Init+0x1e0>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <HAL_GPIO_Init+0x2d4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d00d      	beq.n	8000930 <HAL_GPIO_Init+0x1dc>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a45      	ldr	r2, [pc, #276]	; (8000a2c <HAL_GPIO_Init+0x2d8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d007      	beq.n	800092c <HAL_GPIO_Init+0x1d8>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a44      	ldr	r2, [pc, #272]	; (8000a30 <HAL_GPIO_Init+0x2dc>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d101      	bne.n	8000928 <HAL_GPIO_Init+0x1d4>
 8000924:	2303      	movs	r3, #3
 8000926:	e006      	b.n	8000936 <HAL_GPIO_Init+0x1e2>
 8000928:	2305      	movs	r3, #5
 800092a:	e004      	b.n	8000936 <HAL_GPIO_Init+0x1e2>
 800092c:	2302      	movs	r3, #2
 800092e:	e002      	b.n	8000936 <HAL_GPIO_Init+0x1e2>
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <HAL_GPIO_Init+0x1e2>
 8000934:	2300      	movs	r3, #0
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	f002 0203 	and.w	r2, r2, #3
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	4093      	lsls	r3, r2
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	4313      	orrs	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000946:	4937      	ldr	r1, [pc, #220]	; (8000a24 <HAL_GPIO_Init+0x2d0>)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3302      	adds	r3, #2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000954:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	43db      	mvns	r3, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000978:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800097e:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_GPIO_Init+0x2e0>)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	3301      	adds	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f47f aea9 	bne.w	8000764 <HAL_GPIO_Init+0x10>
  }
}
 8000a12:	bf00      	nop
 8000a14:	371c      	adds	r7, #28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010000 	.word	0x40010000
 8000a28:	48000400 	.word	0x48000400
 8000a2c:	48000800 	.word	0x48000800
 8000a30:	48000c00 	.word	0x48000c00
 8000a34:	40010400 	.word	0x40010400

08000a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
 8000a44:	4613      	mov	r3, r2
 8000a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a48:	787b      	ldrb	r3, [r7, #1]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a56:	887a      	ldrh	r2, [r7, #2]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	f000 bef4 	b.w	800186a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 816a 	beq.w	8000d66 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a92:	4bb3      	ldr	r3, [pc, #716]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 030c 	and.w	r3, r3, #12
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d00c      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a9e:	4bb0      	ldr	r3, [pc, #704]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d159      	bne.n	8000b5e <HAL_RCC_OscConfig+0xf6>
 8000aaa:	4bad      	ldr	r3, [pc, #692]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab6:	d152      	bne.n	8000b5e <HAL_RCC_OscConfig+0xf6>
 8000ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000abc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000ac4:	fa93 f3a3 	rbit	r3, r3
 8000ac8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000acc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad0:	fab3 f383 	clz	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d102      	bne.n	8000aea <HAL_RCC_OscConfig+0x82>
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	e015      	b.n	8000b16 <HAL_RCC_OscConfig+0xae>
 8000aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000af6:	fa93 f3a3 	rbit	r3, r3
 8000afa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b02:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b06:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b0a:	fa93 f3a3 	rbit	r3, r3
 8000b0e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000b12:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b1a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000b1e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b22:	fa92 f2a2 	rbit	r2, r2
 8000b26:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000b2a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	f042 0220 	orr.w	r2, r2, #32
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	f002 021f 	and.w	r2, r2, #31
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	4013      	ands	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 810c 	beq.w	8000d64 <HAL_RCC_OscConfig+0x2fc>
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 8106 	bne.w	8000d64 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	f000 be86 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b68:	d106      	bne.n	8000b78 <HAL_RCC_OscConfig+0x110>
 8000b6a:	4b7d      	ldr	r3, [pc, #500]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a7c      	ldr	r2, [pc, #496]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e030      	b.n	8000bda <HAL_RCC_OscConfig+0x172>
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x134>
 8000b82:	4b77      	ldr	r3, [pc, #476]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a73      	ldr	r2, [pc, #460]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01e      	b.n	8000bda <HAL_RCC_OscConfig+0x172>
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba6:	d10c      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x15a>
 8000ba8:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a6c      	ldr	r2, [pc, #432]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a69      	ldr	r2, [pc, #420]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e00b      	b.n	8000bda <HAL_RCC_OscConfig+0x172>
 8000bc2:	4b67      	ldr	r3, [pc, #412]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a66      	ldr	r2, [pc, #408]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a63      	ldr	r2, [pc, #396]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bda:	4b61      	ldr	r3, [pc, #388]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bde:	f023 020f 	bic.w	r2, r3, #15
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	495d      	ldr	r1, [pc, #372]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d059      	beq.n	8000cac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fc98 	bl	800052c <HAL_GetTick>
 8000bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c00:	e00a      	b.n	8000c18 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c02:	f7ff fc93 	bl	800052c <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b64      	cmp	r3, #100	; 0x64
 8000c10:	d902      	bls.n	8000c18 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f000 be29 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
 8000c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000c24:	fa93 f3a3 	rbit	r3, r3
 8000c28:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000c2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c30:	fab3 f383 	clz	r3, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d102      	bne.n	8000c4a <HAL_RCC_OscConfig+0x1e2>
 8000c44:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	e015      	b.n	8000c76 <HAL_RCC_OscConfig+0x20e>
 8000c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c52:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000c56:	fa93 f3a3 	rbit	r3, r3
 8000c5a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c66:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000c7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000c82:	fa92 f2a2 	rbit	r2, r2
 8000c86:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000c8a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	f042 0220 	orr.w	r2, r2, #32
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	f002 021f 	and.w	r2, r2, #31
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0ab      	beq.n	8000c02 <HAL_RCC_OscConfig+0x19a>
 8000caa:	e05c      	b.n	8000d66 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc3e 	bl	800052c <HAL_GetTick>
 8000cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb4:	e00a      	b.n	8000ccc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb6:	f7ff fc39 	bl	800052c <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d902      	bls.n	8000ccc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	f000 bdcf 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
 8000ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ce0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d102      	bne.n	8000cfe <HAL_RCC_OscConfig+0x296>
 8000cf8:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	e015      	b.n	8000d2a <HAL_RCC_OscConfig+0x2c2>
 8000cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d06:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d0a:	fa93 f3a3 	rbit	r3, r3
 8000d0e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d1a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_RCC_OscConfig+0x2f8>)
 8000d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000d32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d36:	fa92 f2a2 	rbit	r2, r2
 8000d3a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000d3e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	f042 0220 	orr.w	r2, r2, #32
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	f002 021f 	and.w	r2, r2, #31
 8000d52:	2101      	movs	r1, #1
 8000d54:	fa01 f202 	lsl.w	r2, r1, r2
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1ab      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x24e>
 8000d5e:	e002      	b.n	8000d66 <HAL_RCC_OscConfig+0x2fe>
 8000d60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 816f 	beq.w	8001054 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d76:	4bd0      	ldr	r3, [pc, #832]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d82:	4bcd      	ldr	r3, [pc, #820]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d16c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x400>
 8000d8e:	4bca      	ldr	r3, [pc, #808]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d166      	bne.n	8000e68 <HAL_RCC_OscConfig+0x400>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000dac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d102      	bne.n	8000dca <HAL_RCC_OscConfig+0x362>
 8000dc4:	4bbc      	ldr	r3, [pc, #752]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	e013      	b.n	8000df2 <HAL_RCC_OscConfig+0x38a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000de6:	fa93 f3a3 	rbit	r3, r3
 8000dea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000dee:	4bb2      	ldr	r3, [pc, #712]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	2202      	movs	r2, #2
 8000df4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000df8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000dfc:	fa92 f2a2 	rbit	r2, r2
 8000e00:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e04:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	f002 021f 	and.w	r2, r2, #31
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_RCC_OscConfig+0x3cc>
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d002      	beq.n	8000e34 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f000 bd1b 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e34:	4ba0      	ldr	r3, [pc, #640]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	21f8      	movs	r1, #248	; 0xf8
 8000e44:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e48:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000e4c:	fa91 f1a1 	rbit	r1, r1
 8000e50:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000e54:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000e58:	fab1 f181 	clz	r1, r1
 8000e5c:	b2c9      	uxtb	r1, r1
 8000e5e:	408b      	lsls	r3, r1
 8000e60:	4995      	ldr	r1, [pc, #596]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e66:	e0f5      	b.n	8001054 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8085 	beq.w	8000f7e <HAL_RCC_OscConfig+0x516>
 8000e74:	2301      	movs	r3, #1
 8000e76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000e7e:	fa93 f3a3 	rbit	r3, r3
 8000e82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000e86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8a:	fab3 f383 	clz	r3, r3
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fb44 	bl	800052c <HAL_GetTick>
 8000ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fb3f 	bl	800052c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d902      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f000 bcd5 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000ed2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed6:	fab3 f383 	clz	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	095b      	lsrs	r3, r3, #5
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d102      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x488>
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	e013      	b.n	8000f18 <HAL_RCC_OscConfig+0x4b0>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f14:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	2202      	movs	r2, #2
 8000f1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000f1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f22:	fa92 f2a2 	rbit	r2, r2
 8000f26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000f2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000f2e:	fab2 f282 	clz	r2, r2
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	f042 0220 	orr.w	r2, r2, #32
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0af      	beq.n	8000eaa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	21f8      	movs	r1, #248	; 0xf8
 8000f5a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000f62:	fa91 f1a1 	rbit	r1, r1
 8000f66:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000f6a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000f6e:	fab1 f181 	clz	r1, r1
 8000f72:	b2c9      	uxtb	r1, r1
 8000f74:	408b      	lsls	r3, r1
 8000f76:	4950      	ldr	r1, [pc, #320]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
 8000f7c:	e06a      	b.n	8001054 <HAL_RCC_OscConfig+0x5ec>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000f90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fabf 	bl	800052c <HAL_GetTick>
 8000fae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fb2:	e00a      	b.n	8000fca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb4:	f7ff faba 	bl	800052c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d902      	bls.n	8000fca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f000 bc50 	b.w	800186a <HAL_RCC_OscConfig+0xe02>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe0:	fab3 f383 	clz	r3, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d102      	bne.n	8000ffa <HAL_RCC_OscConfig+0x592>
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	e013      	b.n	8001022 <HAL_RCC_OscConfig+0x5ba>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800100c:	2302      	movs	r3, #2
 800100e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001012:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_RCC_OscConfig+0x650>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	2202      	movs	r2, #2
 8001024:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001028:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800102c:	fa92 f2a2 	rbit	r2, r2
 8001030:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001034:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001038:	fab2 f282 	clz	r2, r2
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	f042 0220 	orr.w	r2, r2, #32
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	f002 021f 	and.w	r2, r2, #31
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1af      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80da 	beq.w	8001218 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d069      	beq.n	8001142 <HAL_RCC_OscConfig+0x6da>
 800106e:	2301      	movs	r3, #1
 8001070:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001074:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001084:	fab3 f383 	clz	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_OscConfig+0x654>)
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	461a      	mov	r2, r3
 8001094:	2301      	movs	r3, #1
 8001096:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001098:	f7ff fa48 	bl	800052c <HAL_GetTick>
 800109c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a0:	e00e      	b.n	80010c0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a2:	f7ff fa43 	bl	800052c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d906      	bls.n	80010c0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e3d9      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	10908120 	.word	0x10908120
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010d6:	2202      	movs	r2, #2
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	fa93 f2a3 	rbit	r2, r3
 80010e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010ee:	2202      	movs	r2, #2
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	fa93 f2a3 	rbit	r2, r3
 80010fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001100:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4ba5      	ldr	r3, [pc, #660]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001106:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800110a:	2102      	movs	r1, #2
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	fa93 f1a3 	rbit	r1, r3
 8001118:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800111c:	6019      	str	r1, [r3, #0]
  return result;
 800111e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	fab3 f383 	clz	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0b0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x63a>
 8001140:	e06a      	b.n	8001218 <HAL_RCC_OscConfig+0x7b0>
 8001142:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	fa93 f2a3 	rbit	r2, r3
 8001154:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001158:	601a      	str	r2, [r3, #0]
  return result;
 800115a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800115e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	461a      	mov	r2, r3
 8001168:	4b8c      	ldr	r3, [pc, #560]	; (800139c <HAL_RCC_OscConfig+0x934>)
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	461a      	mov	r2, r3
 8001170:	2300      	movs	r3, #0
 8001172:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff f9da 	bl	800052c <HAL_GetTick>
 8001178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	e009      	b.n	8001192 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff f9d5 	bl	800052c <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e36b      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 8001192:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001196:	2202      	movs	r2, #2
 8001198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	fa93 f2a3 	rbit	r2, r3
 80011a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80011dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011e2:	2102      	movs	r1, #2
 80011e4:	6019      	str	r1, [r3, #0]
 80011e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	fa93 f1a3 	rbit	r1, r3
 80011f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011f4:	6019      	str	r1, [r3, #0]
  return result;
 80011f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2101      	movs	r1, #1
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1b2      	bne.n	800117e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8158 	beq.w	80014d8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a56      	ldr	r2, [pc, #344]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800125a:	2301      	movs	r3, #1
 800125c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_OscConfig+0x938>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001268:	2b00      	cmp	r3, #0
 800126a:	d11a      	bne.n	80012a2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126c:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_RCC_OscConfig+0x938>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_RCC_OscConfig+0x938>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001278:	f7ff f958 	bl	800052c <HAL_GetTick>
 800127c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e009      	b.n	8001296 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001282:	f7ff f953 	bl	800052c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e2e9      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001296:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <HAL_RCC_OscConfig+0x938>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0ef      	beq.n	8001282 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <HAL_RCC_OscConfig+0x852>
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a39      	ldr	r2, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e02f      	b.n	800131a <HAL_RCC_OscConfig+0x8b2>
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10c      	bne.n	80012de <HAL_RCC_OscConfig+0x876>
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a33      	ldr	r2, [pc, #204]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012ca:	f023 0301 	bic.w	r3, r3, #1
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012d6:	f023 0304 	bic.w	r3, r3, #4
 80012da:	6213      	str	r3, [r2, #32]
 80012dc:	e01d      	b.n	800131a <HAL_RCC_OscConfig+0x8b2>
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x89a>
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e00b      	b.n	800131a <HAL_RCC_OscConfig+0x8b2>
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4a24      	ldr	r2, [pc, #144]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d06b      	beq.n	80013fc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7ff f902 	bl	800052c <HAL_GetTick>
 8001328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132c:	e00b      	b.n	8001346 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff f8fd 	bl	800052c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f241 3288 	movw	r2, #5000	; 0x1388
 800133e:	4293      	cmp	r3, r2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e291      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 8001346:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800134a:	2202      	movs	r2, #2
 800134c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fa93 f2a3 	rbit	r2, r3
 8001358:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001362:	2202      	movs	r2, #2
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fa93 f2a3 	rbit	r2, r3
 8001370:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001374:	601a      	str	r2, [r3, #0]
  return result;
 8001376:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800137a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d109      	bne.n	80013a4 <HAL_RCC_OscConfig+0x93c>
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <HAL_RCC_OscConfig+0x930>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x958>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	10908120 	.word	0x10908120
 80013a0:	40007000 	.word	0x40007000
 80013a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013a8:	2202      	movs	r2, #2
 80013aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	4bbb      	ldr	r3, [pc, #748]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013c4:	2102      	movs	r1, #2
 80013c6:	6011      	str	r1, [r2, #0]
 80013c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	fa92 f1a2 	rbit	r1, r2
 80013d2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80013d6:	6011      	str	r1, [r2, #0]
  return result;
 80013d8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	fab2 f282 	clz	r2, r2
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	f002 021f 	and.w	r2, r2, #31
 80013ee:	2101      	movs	r1, #1
 80013f0:	fa01 f202 	lsl.w	r2, r1, r2
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d099      	beq.n	800132e <HAL_RCC_OscConfig+0x8c6>
 80013fa:	e063      	b.n	80014c4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff f896 	bl	800052c <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f891 	bl	800052c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e225      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 800141e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	fa93 f2a3 	rbit	r2, r3
 8001430:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800144c:	601a      	str	r2, [r3, #0]
  return result;
 800144e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001452:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0xa06>
 8001468:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	e00d      	b.n	800148a <HAL_RCC_OscConfig+0xa22>
 800146e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001472:	2202      	movs	r2, #2
 8001474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4b89      	ldr	r3, [pc, #548]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800148e:	2102      	movs	r1, #2
 8001490:	6011      	str	r1, [r2, #0]
 8001492:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	fa92 f1a2 	rbit	r1, r2
 800149c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014a0:	6011      	str	r1, [r2, #0]
  return result;
 80014a2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	fab2 f282 	clz	r2, r2
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	f002 021f 	and.w	r2, r2, #31
 80014b8:	2101      	movs	r1, #1
 80014ba:	fa01 f202 	lsl.w	r2, r1, r2
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1a0      	bne.n	8001406 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014cc:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	4a76      	ldr	r2, [pc, #472]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80014d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 81c2 	beq.w	8001868 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4b71      	ldr	r3, [pc, #452]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	f000 819c 	beq.w	800182a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	f040 8114 	bne.w	8001726 <HAL_RCC_OscConfig+0xcbe>
 80014fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001502:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	fa93 f2a3 	rbit	r2, r3
 8001512:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001516:	601a      	str	r2, [r3, #0]
  return result;
 8001518:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800151c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001528:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	461a      	mov	r2, r3
 8001530:	2300      	movs	r3, #0
 8001532:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7fe fffa 	bl	800052c <HAL_GetTick>
 8001538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	e009      	b.n	8001552 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7fe fff5 	bl	800052c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e18b      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 8001552:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001556:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800155a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	fa93 f2a3 	rbit	r2, r3
 8001566:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800156a:	601a      	str	r2, [r3, #0]
  return result;
 800156c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001570:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	fab3 f383 	clz	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	095b      	lsrs	r3, r3, #5
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d102      	bne.n	800158c <HAL_RCC_OscConfig+0xb24>
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	e01b      	b.n	80015c4 <HAL_RCC_OscConfig+0xb5c>
 800158c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001590:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015cc:	6011      	str	r1, [r2, #0]
 80015ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	fa92 f1a2 	rbit	r1, r2
 80015d8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015dc:	6011      	str	r1, [r2, #0]
  return result;
 80015de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	fab2 f282 	clz	r2, r2
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f042 0220 	orr.w	r2, r2, #32
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	f002 021f 	and.w	r2, r2, #31
 80015f4:	2101      	movs	r1, #1
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d19e      	bne.n	800153e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	430b      	orrs	r3, r1
 8001616:	4925      	ldr	r1, [pc, #148]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
 800161c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	fa93 f2a3 	rbit	r2, r3
 8001630:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001634:	601a      	str	r2, [r3, #0]
  return result;
 8001636:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800163a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001646:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	461a      	mov	r2, r3
 800164e:	2301      	movs	r3, #1
 8001650:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7fe ff6b 	bl	800052c <HAL_GetTick>
 8001656:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800165a:	e009      	b.n	8001670 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7fe ff66 	bl	800052c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0fc      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 8001670:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fa93 f2a3 	rbit	r2, r3
 8001684:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001688:	601a      	str	r2, [r3, #0]
  return result;
 800168a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800168e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_RCC_OscConfig+0xc48>
 80016a4:	4b01      	ldr	r3, [pc, #4]	; (80016ac <HAL_RCC_OscConfig+0xc44>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	e01e      	b.n	80016e8 <HAL_RCC_OscConfig+0xc80>
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_OscConfig+0xe0c>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016f0:	6011      	str	r1, [r2, #0]
 80016f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	fa92 f1a2 	rbit	r1, r2
 80016fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001700:	6011      	str	r1, [r2, #0]
  return result;
 8001702:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fab2 f282 	clz	r2, r2
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	f042 0220 	orr.w	r2, r2, #32
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f002 021f 	and.w	r2, r2, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d09b      	beq.n	800165c <HAL_RCC_OscConfig+0xbf4>
 8001724:	e0a0      	b.n	8001868 <HAL_RCC_OscConfig+0xe00>
 8001726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800172a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800172e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	601a      	str	r2, [r3, #0]
  return result;
 8001740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001744:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	2300      	movs	r3, #0
 800175a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe fee6 	bl	800052c <HAL_GetTick>
 8001760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe fee1 	bl	800052c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e077      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
 800177a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	601a      	str	r2, [r3, #0]
  return result;
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0xd4c>
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0xe0c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	e01b      	b.n	80017ec <HAL_RCC_OscConfig+0xd84>
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_OscConfig+0xe0c>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f107 0210 	add.w	r2, r7, #16
 80017f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	f107 0210 	add.w	r2, r7, #16
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	6011      	str	r1, [r2, #0]
  return result;
 8001806:	f107 020c 	add.w	r2, r7, #12
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d19e      	bne.n	8001766 <HAL_RCC_OscConfig+0xcfe>
 8001828:	e01e      	b.n	8001868 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e018      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <HAL_RCC_OscConfig+0xe0c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001840:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001844:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	429a      	cmp	r2, r3
 8001850:	d108      	bne.n	8001864 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001852:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09e      	sub	sp, #120	; 0x78
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e162      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d910      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b8d      	ldr	r3, [pc, #564]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 0207 	bic.w	r2, r3, #7
 80018a6:	498b      	ldr	r1, [pc, #556]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b89      	ldr	r3, [pc, #548]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e14a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	497f      	ldr	r1, [pc, #508]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80dc 	beq.w	8001aa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d13c      	bne.n	800196e <HAL_RCC_ClockConfig+0xf6>
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_RCC_ClockConfig+0xa6>
 8001918:	4b6f      	ldr	r3, [pc, #444]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	e00f      	b.n	800193e <HAL_RCC_ClockConfig+0xc6>
 800191e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001922:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	667b      	str	r3, [r7, #100]	; 0x64
 800192c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001930:	663b      	str	r3, [r7, #96]	; 0x60
 8001932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800193a:	4b67      	ldr	r3, [pc, #412]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001942:	65ba      	str	r2, [r7, #88]	; 0x58
 8001944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001946:	fa92 f2a2 	rbit	r2, r2
 800194a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800194c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800194e:	fab2 f282 	clz	r2, r2
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f042 0220 	orr.w	r2, r2, #32
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f002 021f 	and.w	r2, r2, #31
 800195e:	2101      	movs	r1, #1
 8001960:	fa01 f202 	lsl.w	r2, r1, r2
 8001964:	4013      	ands	r3, r2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d17b      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0f3      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d13c      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x178>
 8001976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800197a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x128>
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_ClockConfig+0x148>
 80019a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
 80019ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b2:	643b      	str	r3, [r7, #64]	; 0x40
 80019b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019bc:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80019c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019c8:	fa92 f2a2 	rbit	r2, r2
 80019cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80019ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d0:	fab2 f282 	clz	r2, r2
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f002 021f 	and.w	r2, r2, #31
 80019e0:	2101      	movs	r1, #1
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d13a      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b2      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
 80019f0:	2302      	movs	r3, #2
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80019fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x1a0>
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e00d      	b.n	8001a34 <HAL_RCC_ClockConfig+0x1bc>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2202      	movs	r2, #2
 8001a36:	61ba      	str	r2, [r7, #24]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	fa92 f2a2 	rbit	r2, r2
 8001a3e:	617a      	str	r2, [r7, #20]
  return result;
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	fab2 f282 	clz	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f042 0220 	orr.w	r2, r2, #32
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f002 021f 	and.w	r2, r2, #31
 8001a52:	2101      	movs	r1, #1
 8001a54:	fa01 f202 	lsl.w	r2, r1, r2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e079      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f023 0203 	bic.w	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	491a      	ldr	r1, [pc, #104]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7fe fd5a 	bl	800052c <HAL_GetTick>
 8001a78:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7fe fd56 	bl	800052c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e061      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_RCC_ClockConfig+0x260>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 020c 	and.w	r2, r3, #12
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1eb      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d214      	bcs.n	8001adc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 0207 	bic.w	r2, r3, #7
 8001aba:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <HAL_RCC_ClockConfig+0x25c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e040      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2de>
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae8:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_RCC_ClockConfig+0x2e8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	491a      	ldr	r1, [pc, #104]	; (8001b60 <HAL_RCC_ClockConfig+0x2e8>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x2e8>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4912      	ldr	r1, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x2e8>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b1a:	f000 f829 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4601      	mov	r1, r0
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_RCC_ClockConfig+0x2e8>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b28:	22f0      	movs	r2, #240	; 0xf0
 8001b2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	fa92 f2a2 	rbit	r2, r2
 8001b32:	60fa      	str	r2, [r7, #12]
  return result;
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	40d3      	lsrs	r3, r2
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x2ec>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	fa21 f303 	lsr.w	r3, r1, r3
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_RCC_ClockConfig+0x2f0>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_ClockConfig+0x2f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fca8 	bl	80004a4 <HAL_InitTick>
  
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3778      	adds	r7, #120	; 0x78
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08001cb4 	.word	0x08001cb4
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d002      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x36>
 8001b9e:	e03c      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ba2:	623b      	str	r3, [r7, #32]
      break;
 8001ba4:	e03c      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bb0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	fa92 f2a2 	rbit	r2, r2
 8001bb8:	607a      	str	r2, [r7, #4]
  return result;
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	40d3      	lsrs	r3, r2
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	fa92 f2a2 	rbit	r2, r2
 8001bdc:	60fa      	str	r2, [r7, #12]
  return result;
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	40d3      	lsrs	r3, r2
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
 8001c08:	e004      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	623b      	str	r3, [r7, #32]
      break;
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c1c:	623b      	str	r3, [r7, #32]
      break;
 8001c1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	372c      	adds	r7, #44	; 0x2c
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	007a1200 	.word	0x007a1200
 8001c38:	08001cc4 	.word	0x08001cc4
 8001c3c:	08001cd4 	.word	0x08001cd4
 8001c40:	003d0900 	.word	0x003d0900

08001c44 <__libc_init_array>:
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4e0d      	ldr	r6, [pc, #52]	; (8001c7c <__libc_init_array+0x38>)
 8001c48:	4c0d      	ldr	r4, [pc, #52]	; (8001c80 <__libc_init_array+0x3c>)
 8001c4a:	1ba4      	subs	r4, r4, r6
 8001c4c:	10a4      	asrs	r4, r4, #2
 8001c4e:	2500      	movs	r5, #0
 8001c50:	42a5      	cmp	r5, r4
 8001c52:	d109      	bne.n	8001c68 <__libc_init_array+0x24>
 8001c54:	4e0b      	ldr	r6, [pc, #44]	; (8001c84 <__libc_init_array+0x40>)
 8001c56:	4c0c      	ldr	r4, [pc, #48]	; (8001c88 <__libc_init_array+0x44>)
 8001c58:	f000 f820 	bl	8001c9c <_init>
 8001c5c:	1ba4      	subs	r4, r4, r6
 8001c5e:	10a4      	asrs	r4, r4, #2
 8001c60:	2500      	movs	r5, #0
 8001c62:	42a5      	cmp	r5, r4
 8001c64:	d105      	bne.n	8001c72 <__libc_init_array+0x2e>
 8001c66:	bd70      	pop	{r4, r5, r6, pc}
 8001c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c6c:	4798      	blx	r3
 8001c6e:	3501      	adds	r5, #1
 8001c70:	e7ee      	b.n	8001c50 <__libc_init_array+0xc>
 8001c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c76:	4798      	blx	r3
 8001c78:	3501      	adds	r5, #1
 8001c7a:	e7f2      	b.n	8001c62 <__libc_init_array+0x1e>
 8001c7c:	08001ce4 	.word	0x08001ce4
 8001c80:	08001ce4 	.word	0x08001ce4
 8001c84:	08001ce4 	.word	0x08001ce4
 8001c88:	08001ce8 	.word	0x08001ce8

08001c8c <memset>:
 8001c8c:	4402      	add	r2, r0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d100      	bne.n	8001c96 <memset+0xa>
 8001c94:	4770      	bx	lr
 8001c96:	f803 1b01 	strb.w	r1, [r3], #1
 8001c9a:	e7f9      	b.n	8001c90 <memset+0x4>

08001c9c <_init>:
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	bf00      	nop
 8001ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca2:	bc08      	pop	{r3}
 8001ca4:	469e      	mov	lr, r3
 8001ca6:	4770      	bx	lr

08001ca8 <_fini>:
 8001ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001caa:	bf00      	nop
 8001cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cae:	bc08      	pop	{r3}
 8001cb0:	469e      	mov	lr, r3
 8001cb2:	4770      	bx	lr
