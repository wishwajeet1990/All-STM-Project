
PWM and GPIO init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e98  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003020  08003020  00004020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003050  08003050  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003050  08003050  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003054  08003054  00004054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003058  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003064  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003064  00005078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008835  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c1  00000000  00000000  0000d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0000ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000724  00000000  00000000  0000f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014243  00000000  00000000  0000fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab60  00000000  00000000  00023fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f735  00000000  00000000  0002eb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae274  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000265c  00000000  00000000  000ae2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b0914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003008 	.word	0x08003008

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003008 	.word	0x08003008

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa1c 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d0 	bl	8000378 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f858 	bl	800028c <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(output_LED_GPIO_Port, output_LED_Pin,GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2180      	movs	r1, #128	@ 0x80
 80001e0:	480a      	ldr	r0, [pc, #40]	@ (800020c <main+0x44>)
 80001e2:	f000 fcf3 	bl	8000bcc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ea:	f000 fa73 	bl	80006d4 <HAL_Delay>
	  HAL_GPIO_WritePin(output_LED_GPIO_Port, output_LED_Pin,GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2180      	movs	r1, #128	@ 0x80
 80001f2:	4806      	ldr	r0, [pc, #24]	@ (800020c <main+0x44>)
 80001f4:	f000 fcea 	bl	8000bcc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80001f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fc:	f000 fa6a 	bl	80006d4 <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000200:	2104      	movs	r1, #4
 8000202:	4803      	ldr	r0, [pc, #12]	@ (8000210 <main+0x48>)
 8000204:	f001 ffd6 	bl	80021b4 <HAL_TIM_PWM_Start>
	  HAL_GPIO_WritePin(output_LED_GPIO_Port, output_LED_Pin,GPIO_PIN_SET);
 8000208:	bf00      	nop
 800020a:	e7e7      	b.n	80001dc <main+0x14>
 800020c:	48000400 	.word	0x48000400
 8000210:	20000028 	.word	0x20000028

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	@ 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fec4 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fcd6 	bl	8000bfc <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000256:	f000 f8cd 	bl	80003f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fd00 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f8b9 	bl	80003f4 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	@ 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b08e      	sub	sp, #56	@ 0x38
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a0:	f107 031c 	add.w	r3, r7, #28
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002be:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250;
 80002c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002c8:	22fa      	movs	r2, #250	@ 0xfa
 80002ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002cc:	4b29      	ldr	r3, [pc, #164]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80002d2:	4b28      	ldr	r3, [pc, #160]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002d4:	22ff      	movs	r2, #255	@ 0xff
 80002d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d8:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002de:	4b25      	ldr	r3, [pc, #148]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002e0:	2280      	movs	r2, #128	@ 0x80
 80002e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002e4:	4823      	ldr	r0, [pc, #140]	@ (8000374 <MX_TIM2_Init+0xe8>)
 80002e6:	f001 fead 	bl	8002044 <HAL_TIM_Base_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80002f0:	f000 f880 	bl	80003f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fe:	4619      	mov	r1, r3
 8000300:	481c      	ldr	r0, [pc, #112]	@ (8000374 <MX_TIM2_Init+0xe8>)
 8000302:	f002 f951 	bl	80025a8 <HAL_TIM_ConfigClockSource>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800030c:	f000 f872 	bl	80003f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000310:	4818      	ldr	r0, [pc, #96]	@ (8000374 <MX_TIM2_Init+0xe8>)
 8000312:	f001 feee 	bl	80020f2 <HAL_TIM_PWM_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800031c:	f000 f86a 	bl	80003f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	4619      	mov	r1, r3
 800032e:	4811      	ldr	r0, [pc, #68]	@ (8000374 <MX_TIM2_Init+0xe8>)
 8000330:	f002 fdd8 	bl	8002ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800033a:	f000 f85b 	bl	80003f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	@ 0x60
 8000340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 127;
 8000342:	237f      	movs	r3, #127	@ 0x7f
 8000344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	4619      	mov	r1, r3
 8000354:	4807      	ldr	r0, [pc, #28]	@ (8000374 <MX_TIM2_Init+0xe8>)
 8000356:	f002 f813 	bl	8002380 <HAL_TIM_PWM_ConfigChannel>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000360:	f000 f848 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000364:	4803      	ldr	r0, [pc, #12]	@ (8000374 <MX_TIM2_Init+0xe8>)
 8000366:	f000 f8af 	bl	80004c8 <HAL_TIM_MspPostInit>

}
 800036a:	bf00      	nop
 800036c:	3738      	adds	r7, #56	@ 0x38
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_GPIO_Init+0x74>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <MX_GPIO_Init+0x74>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_GPIO_Init+0x74>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a2:	60bb      	str	r3, [r7, #8]
 80003a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_GPIO_Init+0x74>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a10      	ldr	r2, [pc, #64]	@ (80003ec <MX_GPIO_Init+0x74>)
 80003ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_GPIO_Init+0x74>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_LED_GPIO_Port, output_LED_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2180      	movs	r1, #128	@ 0x80
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <MX_GPIO_Init+0x78>)
 80003c4:	f000 fc02 	bl	8000bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : output_LED_Pin */
  GPIO_InitStruct.Pin = output_LED_Pin;
 80003c8:	2380      	movs	r3, #128	@ 0x80
 80003ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003d0:	2302      	movs	r3, #2
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(output_LED_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	4619      	mov	r1, r3
 80003de:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_GPIO_Init+0x78>)
 80003e0:	f000 fa82 	bl	80008e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000400 	.word	0x48000400

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f8:	b672      	cpsid	i
}
 80003fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <Error_Handler+0x8>

08000400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <HAL_MspInit+0x44>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6193      	str	r3, [r2, #24]
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <HAL_MspInit+0x44>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <HAL_MspInit+0x44>)
 8000424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000428:	61d3      	str	r3, [r2, #28]
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <HAL_MspInit+0x44>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000468:	d128      	bne.n	80004bc <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800046a:	4b16      	ldr	r3, [pc, #88]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a15      	ldr	r2, [pc, #84]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 8000488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <HAL_TIM_Base_MspInit+0x7c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800049a:	2304      	movs	r3, #4
 800049c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049e:	2302      	movs	r3, #2
 80004a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2300      	movs	r3, #0
 80004a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80004aa:	2301      	movs	r3, #1
 80004ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	4619      	mov	r1, r3
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004b8:	f000 fa16 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004bc:	bf00      	nop
 80004be:	3728      	adds	r7, #40	@ 0x28
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 030c 	add.w	r3, r7, #12
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80004e8:	d11c      	bne.n	8000524 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <HAL_TIM_MspPostInit+0x64>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000502:	2301      	movs	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000506:	2302      	movs	r3, #2
 8000508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000512:	2301      	movs	r3, #1
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000520:	f000 f9e2 	bl	80008e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <NMI_Handler+0x4>

08000538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <MemManage_Handler+0x4>

08000548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <UsageFault_Handler+0x4>

08000558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000586:	f000 f885 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	@ (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005ec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b8:	f7ff ffea 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005be:	490d      	ldr	r1, [pc, #52]	@ (80005f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <LoopForever+0xe>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c4:	e002      	b.n	80005cc <LoopCopyDataInit>

080005c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ca:	3304      	adds	r3, #4

080005cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d0:	d3f9      	bcc.n	80005c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d2:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000600 <LoopForever+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d8:	e001      	b.n	80005de <LoopFillZerobss>

080005da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005dc:	3204      	adds	r2, #4

080005de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e0:	d3fb      	bcc.n	80005da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e2:	f002 fced 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fdef 	bl	80001c8 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f8:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 80005fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000600:	20000078 	.word	0x20000078

08000604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_IRQHandler>
	...

08000608 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	@ (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f931 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff feec 	bl	8000400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f93b 	bl	80008ce <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f911 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_IncTick+0x20>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_IncTick+0x24>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <HAL_IncTick+0x24>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000008 	.word	0x20000008
 80006b8:	20000074 	.word	0x20000074

080006bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c0:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <HAL_GetTick+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000074 	.word	0x20000074

080006d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006dc:	f7ff ffee 	bl	80006bc <HAL_GetTick>
 80006e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ec:	d005      	beq.n	80006fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <HAL_Delay+0x44>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006fa:	bf00      	nop
 80006fc:	f7ff ffde 	bl	80006bc <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	429a      	cmp	r2, r3
 800070a:	d8f7      	bhi.n	80006fc <HAL_Delay+0x28>
  {
  }
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	@ (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	@ (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	@ (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	@ 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	@ 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	@ (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	@ (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e14e      	b.n	8000b96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	2101      	movs	r1, #1
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 8140 	beq.w	8000b90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	2b01      	cmp	r3, #1
 800091a:	d005      	beq.n	8000928 <HAL_GPIO_Init+0x40>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	2b02      	cmp	r3, #2
 8000926:	d130      	bne.n	800098a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800095e:	2201      	movs	r2, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	091b      	lsrs	r3, r3, #4
 8000974:	f003 0201 	and.w	r2, r3, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4313      	orrs	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	2b03      	cmp	r3, #3
 8000994:	d017      	beq.n	80009c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	6939      	ldr	r1, [r7, #16]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 809a 	beq.w	8000b90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	4b55      	ldr	r3, [pc, #340]	@ (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a54      	ldr	r2, [pc, #336]	@ (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b52      	ldr	r3, [pc, #328]	@ (8000bb4 <HAL_GPIO_Init+0x2cc>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a74:	4a50      	ldr	r2, [pc, #320]	@ (8000bb8 <HAL_GPIO_Init+0x2d0>)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e0>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a46      	ldr	r2, [pc, #280]	@ (8000bbc <HAL_GPIO_Init+0x2d4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1dc>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a45      	ldr	r2, [pc, #276]	@ (8000bc0 <HAL_GPIO_Init+0x2d8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1d8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a44      	ldr	r2, [pc, #272]	@ (8000bc4 <HAL_GPIO_Init+0x2dc>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1d4>
 8000ab8:	2303      	movs	r3, #3
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000abc:	2305      	movs	r3, #5
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1e2>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ada:	4937      	ldr	r1, [pc, #220]	@ (8000bb8 <HAL_GPIO_Init+0x2d0>)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae8:	4b37      	ldr	r3, [pc, #220]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b36:	4a24      	ldr	r2, [pc, #144]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b60:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc8 <HAL_GPIO_Init+0x2e0>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f47f aea9 	bne.w	80008f8 <HAL_GPIO_Init+0x10>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	371c      	adds	r7, #28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	40010400 	.word	0x40010400

08000bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000be8:	e002      	b.n	8000bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f001 b823 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 817d 	beq.w	8000f32 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c38:	4bbc      	ldr	r3, [pc, #752]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d00c      	beq.n	8000c5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c44:	4bb9      	ldr	r3, [pc, #740]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d15c      	bne.n	8000d0a <HAL_RCC_OscConfig+0x10e>
 8000c50:	4bb6      	ldr	r3, [pc, #728]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c5c:	d155      	bne.n	8000d0a <HAL_RCC_OscConfig+0x10e>
 8000c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c76:	fab3 f383 	clz	r3, r3
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	095b      	lsrs	r3, r3, #5
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d102      	bne.n	8000c90 <HAL_RCC_OscConfig+0x94>
 8000c8a:	4ba8      	ldr	r3, [pc, #672]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	e015      	b.n	8000cbc <HAL_RCC_OscConfig+0xc0>
 8000c90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c94:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c9c:	fa93 f3a3 	rbit	r3, r3
 8000ca0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ca4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ca8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000cac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000cb0:	fa93 f3a3 	rbit	r3, r3
 8000cb4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000cb8:	4b9c      	ldr	r3, [pc, #624]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cc0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000cc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000cc8:	fa92 f2a2 	rbit	r2, r2
 8000ccc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000cd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	f002 021f 	and.w	r2, r2, #31
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 811f 	beq.w	8000f30 <HAL_RCC_OscConfig+0x334>
 8000cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8116 	bne.w	8000f30 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f000 bfaf 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x12e>
 8000d1c:	4b83      	ldr	r3, [pc, #524]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a82      	ldr	r2, [pc, #520]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e036      	b.n	8000d98 <HAL_RCC_OscConfig+0x19c>
 8000d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x158>
 8000d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a7b      	ldr	r2, [pc, #492]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b79      	ldr	r3, [pc, #484]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a78      	ldr	r2, [pc, #480]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e021      	b.n	8000d98 <HAL_RCC_OscConfig+0x19c>
 8000d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x184>
 8000d66:	4b71      	ldr	r3, [pc, #452]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a70      	ldr	r2, [pc, #448]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b6e      	ldr	r3, [pc, #440]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a6d      	ldr	r2, [pc, #436]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e00b      	b.n	8000d98 <HAL_RCC_OscConfig+0x19c>
 8000d80:	4b6a      	ldr	r3, [pc, #424]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a69      	ldr	r2, [pc, #420]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b67      	ldr	r3, [pc, #412]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a66      	ldr	r2, [pc, #408]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d98:	4b64      	ldr	r3, [pc, #400]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d9c:	f023 020f 	bic.w	r2, r3, #15
 8000da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000da4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	495f      	ldr	r1, [pc, #380]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000db6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d059      	beq.n	8000e76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fc7b 	bl	80006bc <HAL_GetTick>
 8000dc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e00a      	b.n	8000de2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fc76 	bl	80006bc <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b64      	cmp	r3, #100	@ 0x64
 8000dda:	d902      	bls.n	8000de2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f000 bf43 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 8000de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000df6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	fab3 f383 	clz	r3, r3
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	095b      	lsrs	r3, r3, #5
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d102      	bne.n	8000e14 <HAL_RCC_OscConfig+0x218>
 8000e0e:	4b47      	ldr	r3, [pc, #284]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	e015      	b.n	8000e40 <HAL_RCC_OscConfig+0x244>
 8000e14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e18:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e44:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e4c:	fa92 f2a2 	rbit	r2, r2
 8000e50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e58:	fab2 f282 	clz	r2, r2
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	f042 0220 	orr.w	r2, r2, #32
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	f002 021f 	and.w	r2, r2, #31
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	4013      	ands	r3, r2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0ab      	beq.n	8000dcc <HAL_RCC_OscConfig+0x1d0>
 8000e74:	e05d      	b.n	8000f32 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fc21 	bl	80006bc <HAL_GetTick>
 8000e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc1c 	bl	80006bc <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b64      	cmp	r3, #100	@ 0x64
 8000e8e:	d902      	bls.n	8000e96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f000 bee9 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 8000e96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e9a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000eaa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eae:	fab3 f383 	clz	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d102      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x2cc>
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	e015      	b.n	8000ef4 <HAL_RCC_OscConfig+0x2f8>
 8000ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ecc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ed4:	fa93 f3a3 	rbit	r3, r3
 8000ed8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ee0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ee4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <HAL_RCC_OscConfig+0x330>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ef8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000efc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f00:	fa92 f2a2 	rbit	r2, r2
 8000f04:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000f08:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000f0c:	fab2 f282 	clz	r2, r2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f042 0220 	orr.w	r2, r2, #32
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	f002 021f 	and.w	r2, r2, #31
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ab      	bne.n	8000e80 <HAL_RCC_OscConfig+0x284>
 8000f28:	e003      	b.n	8000f32 <HAL_RCC_OscConfig+0x336>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 817d 	beq.w	8001242 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f48:	4ba6      	ldr	r3, [pc, #664]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00b      	beq.n	8000f6c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f54:	4ba3      	ldr	r3, [pc, #652]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d172      	bne.n	8001046 <HAL_RCC_OscConfig+0x44a>
 8000f60:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d16c      	bne.n	8001046 <HAL_RCC_OscConfig+0x44a>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f7e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d102      	bne.n	8000f9c <HAL_RCC_OscConfig+0x3a0>
 8000f96:	4b93      	ldr	r3, [pc, #588]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	e013      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3c8>
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000fb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000fc0:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000fca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000fce:	fa92 f2a2 	rbit	r2, r2
 8000fd2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000fd6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000fda:	fab2 f282 	clz	r2, r2
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	f042 0220 	orr.w	r2, r2, #32
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	f002 021f 	and.w	r2, r2, #31
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <HAL_RCC_OscConfig+0x410>
 8000ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 be2e 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100c:	4b75      	ldr	r3, [pc, #468]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001018:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	21f8      	movs	r1, #248	@ 0xf8
 8001022:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800102a:	fa91 f1a1 	rbit	r1, r1
 800102e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001032:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001036:	fab1 f181 	clz	r1, r1
 800103a:	b2c9      	uxtb	r1, r1
 800103c:	408b      	lsls	r3, r1
 800103e:	4969      	ldr	r1, [pc, #420]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001044:	e0fd      	b.n	8001242 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 8088 	beq.w	8001168 <HAL_RCC_OscConfig+0x56c>
 8001058:	2301      	movs	r3, #1
 800105a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800106a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001078:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	461a      	mov	r2, r3
 8001080:	2301      	movs	r3, #1
 8001082:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fb1a 	bl	80006bc <HAL_GetTick>
 8001088:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fb15 	bl	80006bc <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d902      	bls.n	80010a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	f000 bde2 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80010b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	095b      	lsrs	r3, r3, #5
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d102      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4d8>
 80010ce:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	e013      	b.n	80010fc <HAL_RCC_OscConfig+0x500>
 80010d4:	2302      	movs	r3, #2
 80010d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010f8:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	2202      	movs	r2, #2
 80010fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001102:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001106:	fa92 f2a2 	rbit	r2, r2
 800110a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800110e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001112:	fab2 f282 	clz	r2, r2
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f042 0220 	orr.w	r2, r2, #32
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	f002 021f 	and.w	r2, r2, #31
 8001122:	2101      	movs	r1, #1
 8001124:	fa01 f202 	lsl.w	r2, r1, r2
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0af      	beq.n	800108e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800113a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	21f8      	movs	r1, #248	@ 0xf8
 8001144:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800114c:	fa91 f1a1 	rbit	r1, r1
 8001150:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001154:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001158:	fab1 f181 	clz	r1, r1
 800115c:	b2c9      	uxtb	r1, r1
 800115e:	408b      	lsls	r3, r1
 8001160:	4920      	ldr	r1, [pc, #128]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
 8001166:	e06c      	b.n	8001242 <HAL_RCC_OscConfig+0x646>
 8001168:	2301      	movs	r3, #1
 800116a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800117a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001188:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	461a      	mov	r2, r3
 8001190:	2300      	movs	r3, #0
 8001192:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fa92 	bl	80006bc <HAL_GetTick>
 8001198:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119e:	f7ff fa8d 	bl	80006bc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d902      	bls.n	80011b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f000 bd5a 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80011c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	fab3 f383 	clz	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d104      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5ec>
 80011de:	4b01      	ldr	r3, [pc, #4]	@ (80011e4 <HAL_RCC_OscConfig+0x5e8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	e015      	b.n	8001210 <HAL_RCC_OscConfig+0x614>
 80011e4:	40021000 	.word	0x40021000
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001200:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800120c:	4bc8      	ldr	r3, [pc, #800]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	2202      	movs	r2, #2
 8001212:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001216:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001222:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1ad      	bne.n	800119e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001246:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8110 	beq.w	8001478 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800125c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d079      	beq.n	800135c <HAL_RCC_OscConfig+0x760>
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800127a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4bab      	ldr	r3, [pc, #684]	@ (8001534 <HAL_RCC_OscConfig+0x938>)
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	2301      	movs	r3, #1
 8001290:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fa13 	bl	80006bc <HAL_GetTick>
 8001296:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fa0e 	bl	80006bc <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d902      	bls.n	80012b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f000 bcdb 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012cc:	2202      	movs	r2, #2
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012f0:	2202      	movs	r2, #2
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	fa93 f2a3 	rbit	r2, r3
 8001302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001306:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800130a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 800130e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001314:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001318:	2102      	movs	r1, #2
 800131a:	6019      	str	r1, [r3, #0]
 800131c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001320:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	fa93 f1a3 	rbit	r1, r3
 800132a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001332:	6019      	str	r1, [r3, #0]
  return result;
 8001334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001338:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0a0      	beq.n	800129c <HAL_RCC_OscConfig+0x6a0>
 800135a:	e08d      	b.n	8001478 <HAL_RCC_OscConfig+0x87c>
 800135c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001360:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800136c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	fa93 f2a3 	rbit	r2, r3
 8001376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800137e:	601a      	str	r2, [r3, #0]
  return result;
 8001380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001384:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001388:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4b68      	ldr	r3, [pc, #416]	@ (8001534 <HAL_RCC_OscConfig+0x938>)
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	461a      	mov	r2, r3
 800139a:	2300      	movs	r3, #0
 800139c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff f98d 	bl	80006bc <HAL_GetTick>
 80013a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a6:	e00a      	b.n	80013be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff f988 	bl	80006bc <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d902      	bls.n	80013be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	f000 bc55 	b.w	8001c68 <HAL_RCC_OscConfig+0x106c>
 80013be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f2a3 	rbit	r2, r3
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013ea:	2202      	movs	r2, #2
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fa93 f2a3 	rbit	r2, r3
 80013fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001400:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001416:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fa93 f2a3 	rbit	r2, r3
 8001420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001424:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001428:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	4b41      	ldr	r3, [pc, #260]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 800142c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001432:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001436:	2102      	movs	r1, #2
 8001438:	6019      	str	r1, [r3, #0]
 800143a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f1a3 	rbit	r1, r3
 8001448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001450:	6019      	str	r1, [r3, #0]
  return result;
 8001452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001456:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 031f 	and.w	r3, r3, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d197      	bne.n	80013a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 81a1 	beq.w	80017d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d116      	bne.n	80014ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	61d3      	str	r3, [r2, #28]
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80014b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80014c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_RCC_OscConfig+0x93c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d11a      	bne.n	8001510 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_RCC_OscConfig+0x93c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <HAL_RCC_OscConfig+0x93c>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff f8e9 	bl	80006bc <HAL_GetTick>
 80014ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ee:	e009      	b.n	8001504 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f0:	f7ff f8e4 	bl	80006bc <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	@ 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e3b1      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_RCC_OscConfig+0x93c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ef      	beq.n	80014f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d10d      	bne.n	800153c <HAL_RCC_OscConfig+0x940>
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a02      	ldr	r2, [pc, #8]	@ (8001530 <HAL_RCC_OscConfig+0x934>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	e03c      	b.n	80015a8 <HAL_RCC_OscConfig+0x9ac>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	10908120 	.word	0x10908120
 8001538:	40007000 	.word	0x40007000
 800153c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001540:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x96a>
 800154c:	4bc1      	ldr	r3, [pc, #772]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4ac0      	ldr	r2, [pc, #768]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	4bbe      	ldr	r3, [pc, #760]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4abd      	ldr	r2, [pc, #756]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6213      	str	r3, [r2, #32]
 8001564:	e020      	b.n	80015a8 <HAL_RCC_OscConfig+0x9ac>
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x994>
 8001576:	4bb7      	ldr	r3, [pc, #732]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4ab6      	ldr	r2, [pc, #728]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4bb4      	ldr	r3, [pc, #720]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4ab3      	ldr	r2, [pc, #716]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0x9ac>
 8001590:	4bb0      	ldr	r3, [pc, #704]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4aaf      	ldr	r2, [pc, #700]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6213      	str	r3, [r2, #32]
 800159c:	4bad      	ldr	r3, [pc, #692]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4aac      	ldr	r2, [pc, #688]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 80015a2:	f023 0304 	bic.w	r3, r3, #4
 80015a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8081 	beq.w	80016bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f87f 	bl	80006bc <HAL_GetTick>
 80015be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff f87a 	bl	80006bc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e345      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
 80015dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015e4:	2202      	movs	r2, #2
 80015e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001604:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001622:	601a      	str	r2, [r3, #0]
  return result;
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800162c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0xa4c>
 8001642:	4b84      	ldr	r3, [pc, #528]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	e013      	b.n	8001670 <HAL_RCC_OscConfig+0xa74>
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001666:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001670:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001674:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001678:	2102      	movs	r1, #2
 800167a:	6011      	str	r1, [r2, #0]
 800167c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001680:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	fa92 f1a2 	rbit	r1, r2
 800168a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800168e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001692:	6011      	str	r1, [r2, #0]
  return result;
 8001694:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001698:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	fab2 f282 	clz	r2, r2
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f002 021f 	and.w	r2, r2, #31
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d084      	beq.n	80015c4 <HAL_RCC_OscConfig+0x9c8>
 80016ba:	e07f      	b.n	80017bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7fe fffe 	bl	80006bc <HAL_GetTick>
 80016c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7fe fff9 	bl	80006bc <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e2c4      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001712:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001724:	601a      	str	r2, [r3, #0]
  return result;
 8001726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800172e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d102      	bne.n	800174a <HAL_RCC_OscConfig+0xb4e>
 8001744:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	e013      	b.n	8001772 <HAL_RCC_OscConfig+0xb76>
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001752:	2202      	movs	r2, #2
 8001754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001768:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	4b39      	ldr	r3, [pc, #228]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001776:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800177a:	2102      	movs	r1, #2
 800177c:	6011      	str	r1, [r2, #0]
 800177e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001782:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	fa92 f1a2 	rbit	r1, r2
 800178c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001790:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001794:	6011      	str	r1, [r2, #0]
  return result;
 8001796:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800179a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	fab2 f282 	clz	r2, r2
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	f002 021f 	and.w	r2, r2, #31
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d184      	bne.n	80016c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8242 	beq.w	8001c66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_RCC_OscConfig+0xc58>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	f000 8213 	beq.w	8001c16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 8162 	bne.w	8001ac6 <HAL_RCC_OscConfig+0xeca>
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800180a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001814:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001826:	601a      	str	r2, [r3, #0]
  return result;
 8001828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001830:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800183c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
 8001844:	2300      	movs	r3, #0
 8001846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7fe ff38 	bl	80006bc <HAL_GetTick>
 800184c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001850:	e00c      	b.n	800186c <HAL_RCC_OscConfig+0xc70>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe ff30 	bl	80006bc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1fd      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001890:	601a      	str	r2, [r3, #0]
  return result;
 8001892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001896:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800189a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_RCC_OscConfig+0xcba>
 80018b0:	4bb0      	ldr	r3, [pc, #704]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e027      	b.n	8001906 <HAL_RCC_OscConfig+0xd0a>
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4b9c      	ldr	r3, [pc, #624]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800190a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800190e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001912:	6011      	str	r1, [r2, #0]
 8001914:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001918:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fa92 f1a2 	rbit	r1, r2
 8001922:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001926:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800192a:	6011      	str	r1, [r2, #0]
  return result;
 800192c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001930:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	fab2 f282 	clz	r2, r2
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	f042 0220 	orr.w	r2, r2, #32
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f002 021f 	and.w	r2, r2, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f202 	lsl.w	r2, r1, r2
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d182      	bne.n	8001858 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001952:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	430b      	orrs	r3, r1
 8001974:	497f      	ldr	r1, [pc, #508]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
 800197a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001982:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800199e:	601a      	str	r2, [r3, #0]
  return result;
 80019a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2301      	movs	r3, #1
 80019be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe fe7c 	bl	80006bc <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ca:	f7fe fe77 	bl	80006bc <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e144      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a02:	601a      	str	r2, [r3, #0]
  return result;
 8001a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0xe2c>
 8001a22:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	e027      	b.n	8001a78 <HAL_RCC_OscConfig+0xe7c>
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a7c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a84:	6011      	str	r1, [r2, #0]
 8001a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a8a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	fa92 f1a2 	rbit	r1, r2
 8001a94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a98:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a9c:	6011      	str	r1, [r2, #0]
  return result;
 8001a9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aa2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	f042 0220 	orr.w	r2, r2, #32
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	f002 021f 	and.w	r2, r2, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d082      	beq.n	80019ca <HAL_RCC_OscConfig+0xdce>
 8001ac4:	e0cf      	b.n	8001c66 <HAL_RCC_OscConfig+0x106a>
 8001ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ace:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001aea:	601a      	str	r2, [r3, #0]
  return result;
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001af4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	461a      	mov	r2, r3
 8001b08:	2300      	movs	r3, #0
 8001b0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7fe fdd6 	bl	80006bc <HAL_GetTick>
 8001b10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7fe fdd1 	bl	80006bc <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e09e      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b4e:	601a      	str	r2, [r3, #0]
  return result;
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d104      	bne.n	8001b78 <HAL_RCC_OscConfig+0xf7c>
 8001b6e:	4b01      	ldr	r3, [pc, #4]	@ (8001b74 <HAL_RCC_OscConfig+0xf78>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	e029      	b.n	8001bc8 <HAL_RCC_OscConfig+0xfcc>
 8001b74:	40021000 	.word	0x40021000
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <HAL_RCC_OscConfig+0x1078>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bcc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001bd0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bd4:	6011      	str	r1, [r2, #0]
 8001bd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bda:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	fa92 f1a2 	rbit	r1, r2
 8001be4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001be8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bec:	6011      	str	r1, [r2, #0]
  return result;
 8001bee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	f042 0220 	orr.w	r2, r2, #32
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	f002 021f 	and.w	r2, r2, #31
 8001c08:	2101      	movs	r1, #1
 8001c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d180      	bne.n	8001b16 <HAL_RCC_OscConfig+0xf1a>
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01e      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <HAL_RCC_OscConfig+0x1078>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c36:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d10b      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09e      	sub	sp, #120	@ 0x78
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e162      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b90      	ldr	r3, [pc, #576]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	498b      	ldr	r1, [pc, #556]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b89      	ldr	r3, [pc, #548]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e14a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ccc:	4b82      	ldr	r3, [pc, #520]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	497f      	ldr	r1, [pc, #508]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80dc 	beq.w	8001ea4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d13c      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xf6>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cfc:	fa93 f3a3 	rbit	r3, r3
 8001d00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xa6>
 8001d18:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e00f      	b.n	8001d3e <HAL_RCC_ClockConfig+0xc6>
 8001d1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d3a:	4b67      	ldr	r3, [pc, #412]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	f042 0220 	orr.w	r2, r2, #32
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f002 021f 	and.w	r2, r2, #31
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f202 	lsl.w	r2, r1, r2
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d17b      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0f3      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d13c      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x178>
 8001d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d7a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x128>
 8001d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
 8001da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dbc:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001dc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001dce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0220 	orr.w	r2, r2, #32
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d13a      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b2      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
 8001df0:	2302      	movs	r3, #2
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x1a0>
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e00d      	b.n	8001e34 <HAL_RCC_ClockConfig+0x1bc>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e24:	2302      	movs	r3, #2
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	2202      	movs	r2, #2
 8001e36:	61ba      	str	r2, [r7, #24]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	617a      	str	r2, [r7, #20]
  return result;
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f042 0220 	orr.w	r2, r2, #32
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 021f 	and.w	r2, r2, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f202 	lsl.w	r2, r1, r2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e079      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f023 0203 	bic.w	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	491a      	ldr	r1, [pc, #104]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7fe fc22 	bl	80006bc <HAL_GetTick>
 8001e78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7fe fc1e 	bl	80006bc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e061      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_RCC_ClockConfig+0x260>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d214      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 0207 	bic.w	r2, r3, #7
 8001eba:	4906      	ldr	r1, [pc, #24]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <HAL_RCC_ClockConfig+0x25c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e040      	b.n	8001f56 <HAL_RCC_ClockConfig+0x2de>
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_RCC_ClockConfig+0x2e8>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	491a      	ldr	r1, [pc, #104]	@ (8001f60 <HAL_RCC_ClockConfig+0x2e8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f06:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <HAL_RCC_ClockConfig+0x2e8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4912      	ldr	r1, [pc, #72]	@ (8001f60 <HAL_RCC_ClockConfig+0x2e8>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f1a:	f000 f829 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <HAL_RCC_ClockConfig+0x2e8>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f28:	22f0      	movs	r2, #240	@ 0xf0
 8001f2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	fa92 f2a2 	rbit	r2, r2
 8001f32:	60fa      	str	r2, [r7, #12]
  return result;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	40d3      	lsrs	r3, r2
 8001f3e:	4a09      	ldr	r2, [pc, #36]	@ (8001f64 <HAL_RCC_ClockConfig+0x2ec>)
 8001f40:	5cd3      	ldrb	r3, [r2, r3]
 8001f42:	fa21 f303 	lsr.w	r3, r1, r3
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_RCC_ClockConfig+0x2f0>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <HAL_RCC_ClockConfig+0x2f4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb70 	bl	8000634 <HAL_InitTick>
  
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3778      	adds	r7, #120	@ 0x78
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003020 	.word	0x08003020
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b08b      	sub	sp, #44	@ 0x2c
 8001f74:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f8a:	4b29      	ldr	r3, [pc, #164]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8001f9e:	e03c      	b.n	800201a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fa2:	623b      	str	r3, [r7, #32]
      break;
 8001fa4:	e03c      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001fac:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001fb0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	607a      	str	r2, [r7, #4]
  return result;
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	40d3      	lsrs	r3, r2
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	fa92 f2a2 	rbit	r2, r2
 8001fdc:	60fa      	str	r2, [r7, #12]
  return result;
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	40d3      	lsrs	r3, r2
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	627b      	str	r3, [r7, #36]	@ 0x24
 8002008:	e004      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <HAL_RCC_GetSysClockFreq+0xd0>)
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	623b      	str	r3, [r7, #32]
      break;
 8002018:	e002      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xc4>)
 800201c:	623b      	str	r3, [r7, #32]
      break;
 800201e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002020:	6a3b      	ldr	r3, [r7, #32]
}
 8002022:	4618      	mov	r0, r3
 8002024:	372c      	adds	r7, #44	@ 0x2c
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	007a1200 	.word	0x007a1200
 8002038:	08003030 	.word	0x08003030
 800203c:	08003040 	.word	0x08003040
 8002040:	003d0900 	.word	0x003d0900

08002044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e049      	b.n	80020ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe f9ec 	bl	8000448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2202      	movs	r2, #2
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f000 fb5a 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e049      	b.n	8002198 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f841 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f000 fb03 	bl	800273c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_TIM_PWM_Start+0x24>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e03c      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d109      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e02f      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_TIM_PWM_Start+0x58>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e022      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d109      	bne.n	8002226 <HAL_TIM_PWM_Start+0x72>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e015      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d109      	bne.n	8002240 <HAL_TIM_PWM_Start+0x8c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e008      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e083      	b.n	8002362 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_TIM_PWM_Start+0xb6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002268:	e023      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d104      	bne.n	800227a <HAL_TIM_PWM_Start+0xc6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002278:	e01b      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d104      	bne.n	800228a <HAL_TIM_PWM_Start+0xd6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002288:	e013      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d104      	bne.n	800229a <HAL_TIM_PWM_Start+0xe6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002298:	e00b      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d104      	bne.n	80022aa <HAL_TIM_PWM_Start+0xf6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a8:	e003      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fdec 	bl	8002e98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a29      	ldr	r2, [pc, #164]	@ (800236c <HAL_TIM_PWM_Start+0x1b8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00e      	beq.n	80022e8 <HAL_TIM_PWM_Start+0x134>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a28      	ldr	r2, [pc, #160]	@ (8002370 <HAL_TIM_PWM_Start+0x1bc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_TIM_PWM_Start+0x134>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a26      	ldr	r2, [pc, #152]	@ (8002374 <HAL_TIM_PWM_Start+0x1c0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_TIM_PWM_Start+0x134>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a25      	ldr	r2, [pc, #148]	@ (8002378 <HAL_TIM_PWM_Start+0x1c4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_PWM_Start+0x138>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_TIM_PWM_Start+0x13a>
 80022ec:	2300      	movs	r3, #0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a19      	ldr	r2, [pc, #100]	@ (800236c <HAL_TIM_PWM_Start+0x1b8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_TIM_PWM_Start+0x16c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002314:	d004      	beq.n	8002320 <HAL_TIM_PWM_Start+0x16c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a15      	ldr	r2, [pc, #84]	@ (8002370 <HAL_TIM_PWM_Start+0x1bc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d115      	bne.n	800234c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_TIM_PWM_Start+0x1c8>)
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d015      	beq.n	800235e <HAL_TIM_PWM_Start+0x1aa>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002338:	d011      	beq.n	800235e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0201 	orr.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	e008      	b.n	800235e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e000      	b.n	8002360 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40014000 	.word	0x40014000
 8002374:	40014400 	.word	0x40014400
 8002378:	40014800 	.word	0x40014800
 800237c:	00010007 	.word	0x00010007

08002380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800239a:	2302      	movs	r3, #2
 800239c:	e0ff      	b.n	800259e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b14      	cmp	r3, #20
 80023aa:	f200 80f0 	bhi.w	800258e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023ae:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	08002409 	.word	0x08002409
 80023b8:	0800258f 	.word	0x0800258f
 80023bc:	0800258f 	.word	0x0800258f
 80023c0:	0800258f 	.word	0x0800258f
 80023c4:	08002449 	.word	0x08002449
 80023c8:	0800258f 	.word	0x0800258f
 80023cc:	0800258f 	.word	0x0800258f
 80023d0:	0800258f 	.word	0x0800258f
 80023d4:	0800248b 	.word	0x0800248b
 80023d8:	0800258f 	.word	0x0800258f
 80023dc:	0800258f 	.word	0x0800258f
 80023e0:	0800258f 	.word	0x0800258f
 80023e4:	080024cb 	.word	0x080024cb
 80023e8:	0800258f 	.word	0x0800258f
 80023ec:	0800258f 	.word	0x0800258f
 80023f0:	0800258f 	.word	0x0800258f
 80023f4:	0800250d 	.word	0x0800250d
 80023f8:	0800258f 	.word	0x0800258f
 80023fc:	0800258f 	.word	0x0800258f
 8002400:	0800258f 	.word	0x0800258f
 8002404:	0800254d 	.word	0x0800254d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fa02 	bl	8002818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0208 	orr.w	r2, r2, #8
 8002422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0204 	bic.w	r2, r2, #4
 8002432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6999      	ldr	r1, [r3, #24]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	619a      	str	r2, [r3, #24]
      break;
 8002446:	e0a5      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fa68 	bl	8002924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6999      	ldr	r1, [r3, #24]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	021a      	lsls	r2, r3, #8
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
      break;
 8002488:	e084      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fac7 	bl	8002a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69da      	ldr	r2, [r3, #28]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0208 	orr.w	r2, r2, #8
 80024a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0204 	bic.w	r2, r2, #4
 80024b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69d9      	ldr	r1, [r3, #28]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
      break;
 80024c8:	e064      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fb25 	bl	8002b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69d9      	ldr	r1, [r3, #28]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	021a      	lsls	r2, r3, #8
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	61da      	str	r2, [r3, #28]
      break;
 800250a:	e043      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fb68 	bl	8002be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800254a:	e023      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fba6 	bl	8002ca4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	021a      	lsls	r2, r3, #8
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800258c:	e002      	b.n	8002594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	75fb      	strb	r3, [r7, #23]
      break;
 8002592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800259c:	7dfb      	ldrb	r3, [r7, #23]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop

080025a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_ConfigClockSource+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0b6      	b.n	8002732 <HAL_TIM_ConfigClockSource+0x18a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80025e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002600:	d03e      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0xd8>
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002606:	f200 8087 	bhi.w	8002718 <HAL_TIM_ConfigClockSource+0x170>
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260e:	f000 8086 	beq.w	800271e <HAL_TIM_ConfigClockSource+0x176>
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002616:	d87f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002618:	2b70      	cmp	r3, #112	@ 0x70
 800261a:	d01a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0xaa>
 800261c:	2b70      	cmp	r3, #112	@ 0x70
 800261e:	d87b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002620:	2b60      	cmp	r3, #96	@ 0x60
 8002622:	d050      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x11e>
 8002624:	2b60      	cmp	r3, #96	@ 0x60
 8002626:	d877      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002628:	2b50      	cmp	r3, #80	@ 0x50
 800262a:	d03c      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xfe>
 800262c:	2b50      	cmp	r3, #80	@ 0x50
 800262e:	d873      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002630:	2b40      	cmp	r3, #64	@ 0x40
 8002632:	d058      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x13e>
 8002634:	2b40      	cmp	r3, #64	@ 0x40
 8002636:	d86f      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002638:	2b30      	cmp	r3, #48	@ 0x30
 800263a:	d064      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15e>
 800263c:	2b30      	cmp	r3, #48	@ 0x30
 800263e:	d86b      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d060      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15e>
 8002644:	2b20      	cmp	r3, #32
 8002646:	d867      	bhi.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05c      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15e>
 800264c:	2b10      	cmp	r3, #16
 800264e:	d05a      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x15e>
 8002650:	e062      	b.n	8002718 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002662:	f000 fbf9 	bl	8002e58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
      break;
 800267e:	e04f      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002690:	f000 fbe2 	bl	8002e58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026a2:	609a      	str	r2, [r3, #8]
      break;
 80026a4:	e03c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	461a      	mov	r2, r3
 80026b4:	f000 fb56 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2150      	movs	r1, #80	@ 0x50
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fbaf 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 80026c4:	e02c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026d2:	461a      	mov	r2, r3
 80026d4:	f000 fb75 	bl	8002dc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2160      	movs	r1, #96	@ 0x60
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fb9f 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 80026e4:	e01c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f2:	461a      	mov	r2, r3
 80026f4:	f000 fb36 	bl	8002d64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2140      	movs	r1, #64	@ 0x40
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fb8f 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 8002704:	e00c      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f000 fb86 	bl	8002e22 <TIM_ITRx_SetConfig>
      break;
 8002716:	e003      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e000      	b.n	8002720 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800271e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a2e      	ldr	r2, [pc, #184]	@ (8002808 <TIM_Base_SetConfig+0xcc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d003      	beq.n	800275c <TIM_Base_SetConfig+0x20>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275a:	d108      	bne.n	800276e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a25      	ldr	r2, [pc, #148]	@ (8002808 <TIM_Base_SetConfig+0xcc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00f      	beq.n	8002796 <TIM_Base_SetConfig+0x5a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800277c:	d00b      	beq.n	8002796 <TIM_Base_SetConfig+0x5a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a22      	ldr	r2, [pc, #136]	@ (800280c <TIM_Base_SetConfig+0xd0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0x5a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a21      	ldr	r2, [pc, #132]	@ (8002810 <TIM_Base_SetConfig+0xd4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0x5a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <TIM_Base_SetConfig+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d108      	bne.n	80027a8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <TIM_Base_SetConfig+0xcc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00b      	beq.n	80027ec <TIM_Base_SetConfig+0xb0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <TIM_Base_SetConfig+0xd0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_Base_SetConfig+0xb0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <TIM_Base_SetConfig+0xd4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_Base_SetConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <TIM_Base_SetConfig+0xd8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d103      	bne.n	80027f4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	615a      	str	r2, [r3, #20]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800

08002818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0201 	bic.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a28      	ldr	r2, [pc, #160]	@ (8002914 <TIM_OC1_SetConfig+0xfc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <TIM_OC1_SetConfig+0x78>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <TIM_OC1_SetConfig+0x100>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_OC1_SetConfig+0x78>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a26      	ldr	r2, [pc, #152]	@ (800291c <TIM_OC1_SetConfig+0x104>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_OC1_SetConfig+0x78>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a25      	ldr	r2, [pc, #148]	@ (8002920 <TIM_OC1_SetConfig+0x108>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10c      	bne.n	80028aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0308 	bic.w	r3, r3, #8
 8002896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 0304 	bic.w	r3, r3, #4
 80028a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <TIM_OC1_SetConfig+0xfc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00b      	beq.n	80028ca <TIM_OC1_SetConfig+0xb2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <TIM_OC1_SetConfig+0x100>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_OC1_SetConfig+0xb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a17      	ldr	r2, [pc, #92]	@ (800291c <TIM_OC1_SetConfig+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC1_SetConfig+0xb2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a16      	ldr	r2, [pc, #88]	@ (8002920 <TIM_OC1_SetConfig+0x108>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d111      	bne.n	80028ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	621a      	str	r2, [r3, #32]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40014000 	.word	0x40014000
 800291c:	40014400 	.word	0x40014400
 8002920:	40014800 	.word	0x40014800

08002924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0210 	bic.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800295e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0320 	bic.w	r3, r3, #32
 8002972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a24      	ldr	r2, [pc, #144]	@ (8002a14 <TIM_OC2_SetConfig+0xf0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10d      	bne.n	80029a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800298e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <TIM_OC2_SetConfig+0xf0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_OC2_SetConfig+0xa0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <TIM_OC2_SetConfig+0xf4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_OC2_SetConfig+0xa0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a19      	ldr	r2, [pc, #100]	@ (8002a1c <TIM_OC2_SetConfig+0xf8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC2_SetConfig+0xa0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a18      	ldr	r2, [pc, #96]	@ (8002a20 <TIM_OC2_SetConfig+0xfc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d113      	bne.n	80029ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80029ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800

08002a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a23      	ldr	r2, [pc, #140]	@ (8002b10 <TIM_OC3_SetConfig+0xec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10d      	bne.n	8002aa2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	021b      	lsls	r3, r3, #8
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002aa0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <TIM_OC3_SetConfig+0xec>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_OC3_SetConfig+0x9e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <TIM_OC3_SetConfig+0xf0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_OC3_SetConfig+0x9e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <TIM_OC3_SetConfig+0xf4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_OC3_SetConfig+0x9e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <TIM_OC3_SetConfig+0xf8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d113      	bne.n	8002aea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800

08002b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	031b      	lsls	r3, r3, #12
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a16      	ldr	r2, [pc, #88]	@ (8002bd8 <TIM_OC4_SetConfig+0xb8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <TIM_OC4_SetConfig+0x7c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a15      	ldr	r2, [pc, #84]	@ (8002bdc <TIM_OC4_SetConfig+0xbc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_OC4_SetConfig+0x7c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <TIM_OC4_SetConfig+0xc0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_OC4_SetConfig+0x7c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <TIM_OC4_SetConfig+0xc4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d109      	bne.n	8002bb0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800

08002be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <TIM_OC5_SetConfig+0xac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <TIM_OC5_SetConfig+0x72>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <TIM_OC5_SetConfig+0xb0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_OC5_SetConfig+0x72>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <TIM_OC5_SetConfig+0xb4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_OC5_SetConfig+0x72>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <TIM_OC5_SetConfig+0xb8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d109      	bne.n	8002c6e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	621a      	str	r2, [r3, #32]
}
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40014000 	.word	0x40014000
 8002c9c:	40014400 	.word	0x40014400
 8002ca0:	40014800 	.word	0x40014800

08002ca4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	051b      	lsls	r3, r3, #20
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a16      	ldr	r2, [pc, #88]	@ (8002d54 <TIM_OC6_SetConfig+0xb0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00b      	beq.n	8002d18 <TIM_OC6_SetConfig+0x74>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a15      	ldr	r2, [pc, #84]	@ (8002d58 <TIM_OC6_SetConfig+0xb4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <TIM_OC6_SetConfig+0x74>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <TIM_OC6_SetConfig+0xb8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_OC6_SetConfig+0x74>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a13      	ldr	r2, [pc, #76]	@ (8002d60 <TIM_OC6_SetConfig+0xbc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d109      	bne.n	8002d2c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800

08002d64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0201 	bic.w	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 030a 	bic.w	r3, r3, #10
 8002da0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b087      	sub	sp, #28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f023 0210 	bic.w	r2, r3, #16
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	031b      	lsls	r3, r3, #12
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002dfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f043 0307 	orr.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	609a      	str	r2, [r3, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2201      	movs	r2, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	401a      	ands	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	621a      	str	r2, [r3, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e04f      	b.n	8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002f2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a14      	ldr	r2, [pc, #80]	@ (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d009      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f64:	d004      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	@ (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000

08002fb0 <memset>:
 8002fb0:	4402      	add	r2, r0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	f803 1b01 	strb.w	r1, [r3], #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff8 <__libc_init_array+0x38>)
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002ffc <__libc_init_array+0x3c>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	2600      	movs	r6, #0
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	4d0b      	ldr	r5, [pc, #44]	@ (8003000 <__libc_init_array+0x40>)
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8003004 <__libc_init_array+0x44>)
 8002fd4:	f000 f818 	bl	8003008 <_init>
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	2600      	movs	r6, #0
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003050 	.word	0x08003050
 8002ffc:	08003050 	.word	0x08003050
 8003000:	08003050 	.word	0x08003050
 8003004:	08003054 	.word	0x08003054

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
