
RS485_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002888  08002888  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002888  08002888  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  0800289c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  0800289c  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006999  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001295  00000000  00000000  000269d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00027c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c8  00000000  00000000  000282b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d28  00000000  00000000  00028878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f5d  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007a068  00000000  00000000  000424fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001830  00000000  00000000  000bc5e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002830 	.word	0x08002830

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002830 	.word	0x08002830

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9c8 	bl	8000560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8aa 	bl	800032c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001d8:	f000 f878 	bl	80002cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f000 fc9b 	bl	8000b20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f4:	f000 fc94 	bl	8000b20 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, "Hello\n", 6, 10);
 80001f8:	230a      	movs	r3, #10
 80001fa:	2206      	movs	r2, #6
 80001fc:	4904      	ldr	r1, [pc, #16]	; (8000210 <main+0x48>)
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <main+0x4c>)
 8000200:	f001 ffb6 	bl	8002170 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000208:	f000 fa10 	bl	800062c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, "Hello\n", 6, 10);
 800020c:	e7f4      	b.n	80001f8 <main+0x30>
 800020e:	bf00      	nop
 8000210:	08002848 	.word	0x08002848
 8000214:	20000028 	.word	0x20000028

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09c      	sub	sp, #112	; 0x70
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fafa 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2230      	movs	r2, #48	; 0x30
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 faec 	bl	8002820 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000248:	2301      	movs	r3, #1
 800024a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000264:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000268:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fc6e 	bl	8000b50 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800027a:	f000 f897 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fb60 	bl	8001960 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002a6:	f000 f881 	bl	80003ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fd89 	bl	8001dcc <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002c0:	f000 f874 	bl	80003ac <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3770      	adds	r7, #112	; 0x70
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002d2:	4a15      	ldr	r2, [pc, #84]	; (8000328 <MX_USART1_UART_Init+0x5c>)
 80002d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002d6:	4b13      	ldr	r3, [pc, #76]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002f2:	220c      	movs	r2, #12
 80002f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_USART1_UART_Init+0x58>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_USART1_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_USART1_UART_Init+0x58>)
 800030a:	2200      	movs	r2, #0
 800030c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_USART1_UART_Init+0x58>)
 8000310:	f001 fee0 	bl	80020d4 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800031a:	f000 f847 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000028 	.word	0x20000028
 8000328:	40013800 	.word	0x40013800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 030c 	add.w	r3, r7, #12
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_GPIO_Init+0x7c>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <MX_GPIO_Init+0x7c>)
 8000348:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_GPIO_Init+0x7c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_GPIO_Init+0x7c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_GPIO_Init+0x7c>)
 8000360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <MX_GPIO_Init+0x7c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800037c:	f000 fbd0 	bl	8000b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800038a:	2301      	movs	r3, #1
 800038c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 030c 	add.w	r3, r7, #12
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fa4e 	bl	800083c <HAL_GPIO_Init>

}
 80003a0:	bf00      	nop
 80003a2:	3720      	adds	r7, #32
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x44>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x44>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6193      	str	r3, [r2, #24]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x44>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <HAL_MspInit+0x44>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <HAL_MspInit+0x44>)
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HAL_MspInit+0x44>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a18      	ldr	r2, [pc, #96]	; (8000484 <HAL_UART_MspInit+0x80>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d129      	bne.n	800047a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <HAL_UART_MspInit+0x84>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <HAL_UART_MspInit+0x84>)
 800042c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_UART_MspInit+0x84>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800043a:	613b      	str	r3, [r7, #16]
 800043c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_UART_MspInit+0x84>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <HAL_UART_MspInit+0x84>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_UART_MspInit+0x84>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000456:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800045a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000468:	2307      	movs	r3, #7
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4619      	mov	r1, r3
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f000 f9e1 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800047a:	bf00      	nop
 800047c:	3728      	adds	r7, #40	; 0x28
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40013800 	.word	0x40013800
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <MemManage_Handler+0x4>

080004a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <BusFault_Handler+0x4>

080004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler+0x4>

080004b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 f884 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <SystemInit+0x20>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <SystemInit+0x20>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800050c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000544 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000512:	490e      	ldr	r1, [pc, #56]	; (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <LoopForever+0xe>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000518:	e002      	b.n	8000520 <LoopCopyDataInit>

0800051a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800051c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800051e:	3304      	adds	r3, #4

08000520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000524:	d3f9      	bcc.n	800051a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000528:	4c0b      	ldr	r4, [pc, #44]	; (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800052c:	e001      	b.n	8000532 <LoopFillZerobss>

0800052e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800052e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000530:	3204      	adds	r2, #4

08000532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000534:	d3fb      	bcc.n	800052e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000536:	f7ff ffd7 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053a:	f002 f94d 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800053e:	f7ff fe43 	bl	80001c8 <main>

08000542 <LoopForever>:

LoopForever:
    b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000544:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000550:	08002890 	.word	0x08002890
  ldr r2, =_sbss
 8000554:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000558:	200000b0 	.word	0x200000b0

0800055c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_IRQHandler>
	...

08000560 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_Init+0x28>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_Init+0x28>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f92f 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 f808 	bl	800058c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800057c:	f7ff ff1e 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40022000 	.word	0x40022000

0800058c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_InitTick+0x54>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x58>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f939 	bl	8000822 <HAL_SYSTICK_Config>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e00e      	b.n	80005d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d80a      	bhi.n	80005d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c0:	2200      	movs	r2, #0
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295
 80005c8:	f000 f90f 	bl	80007ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <HAL_InitTick+0x5c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e000      	b.n	80005d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x20>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_IncTick+0x24>)
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	200000ac 	.word	0x200000ac

08000614 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;  
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_GetTick+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000ac 	.word	0x200000ac

0800062c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff ffee 	bl	8000614 <HAL_GetTick>
 8000638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000644:	d005      	beq.n	8000652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_Delay+0x40>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000652:	bf00      	nop
 8000654:	f7ff ffde 	bl	8000614 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <HAL_Delay+0x28>
  {
  }
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000008 	.word	0x20000008

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db0a      	blt.n	80006fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	490c      	ldr	r1, [pc, #48]	; (8000720 <__NVIC_SetPriority+0x4c>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fc:	e00a      	b.n	8000714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <__NVIC_SetPriority+0x50>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	3b04      	subs	r3, #4
 800070c:	0112      	lsls	r2, r2, #4
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	440b      	add	r3, r1
 8000712:	761a      	strb	r2, [r3, #24]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3304      	adds	r3, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d902      	bls.n	8000758 <NVIC_EncodePriority+0x30>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3b03      	subs	r3, #3
 8000756:	e000      	b.n	800075a <NVIC_EncodePriority+0x32>
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	f04f 32ff 	mov.w	r2, #4294967295
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	401a      	ands	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000770:	f04f 31ff 	mov.w	r1, #4294967295
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43d9      	mvns	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	4313      	orrs	r3, r2
         );
}
 8000782:	4618      	mov	r0, r3
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f7ff ff8e 	bl	80006d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff47 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff5c 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff8e 	bl	8000728 <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5d 	bl	80006d4 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffb0 	bl	8000790 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e14e      	b.n	8000aea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	2101      	movs	r1, #1
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b00      	cmp	r3, #0
 8000860:	f000 8140 	beq.w	8000ae4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00b      	beq.n	8000884 <HAL_GPIO_Init+0x48>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d007      	beq.n	8000884 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000878:	2b11      	cmp	r3, #17
 800087a:	d003      	beq.n	8000884 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b12      	cmp	r3, #18
 8000882:	d130      	bne.n	80008e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ba:	2201      	movs	r2, #1
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43db      	mvns	r3, r3
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	091b      	lsrs	r3, r3, #4
 80008d0:	f003 0201 	and.w	r2, r3, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d003      	beq.n	8000926 <HAL_GPIO_Init+0xea>
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b12      	cmp	r3, #18
 8000924:	d123      	bne.n	800096e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	08da      	lsrs	r2, r3, #3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3208      	adds	r2, #8
 800092e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	220f      	movs	r2, #15
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	691a      	ldr	r2, [r3, #16]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	08da      	lsrs	r2, r3, #3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3208      	adds	r2, #8
 8000968:	6939      	ldr	r1, [r7, #16]
 800096a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0203 	and.w	r2, r3, #3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 809a 	beq.w	8000ae4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b0:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <HAL_GPIO_Init+0x2cc>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a54      	ldr	r2, [pc, #336]	; (8000b08 <HAL_GPIO_Init+0x2cc>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b52      	ldr	r3, [pc, #328]	; (8000b08 <HAL_GPIO_Init+0x2cc>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009c8:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f2:	d013      	beq.n	8000a1c <HAL_GPIO_Init+0x1e0>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_GPIO_Init+0x2d4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1dc>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <HAL_GPIO_Init+0x2d8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1d8>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a44      	ldr	r2, [pc, #272]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1d4>
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e006      	b.n	8000a1e <HAL_GPIO_Init+0x1e2>
 8000a10:	2305      	movs	r3, #5
 8000a12:	e004      	b.n	8000a1e <HAL_GPIO_Init+0x1e2>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e002      	b.n	8000a1e <HAL_GPIO_Init+0x1e2>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <HAL_GPIO_Init+0x1e2>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	f002 0203 	and.w	r2, r2, #3
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	4093      	lsls	r3, r2
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a2e:	4937      	ldr	r1, [pc, #220]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a60:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a8a:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	fa22 f303 	lsr.w	r3, r2, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f47f aea9 	bne.w	800084c <HAL_GPIO_Init+0x10>
  }
}
 8000afa:	bf00      	nop
 8000afc:	371c      	adds	r7, #28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	48000c00 	.word	0x48000c00
 8000b1c:	40010400 	.word	0x40010400

08000b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b30:	787b      	ldrb	r3, [r7, #1]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	f000 bef4 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 816a 	beq.w	8000e4e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b7a:	4bb3      	ldr	r3, [pc, #716]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d00c      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b86:	4bb0      	ldr	r3, [pc, #704]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d159      	bne.n	8000c46 <HAL_RCC_OscConfig+0xf6>
 8000b92:	4bad      	ldr	r3, [pc, #692]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d152      	bne.n	8000c46 <HAL_RCC_OscConfig+0xf6>
 8000ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb8:	fab3 f383 	clz	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d102      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x82>
 8000bcc:	4b9e      	ldr	r3, [pc, #632]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	e015      	b.n	8000bfe <HAL_RCC_OscConfig+0xae>
 8000bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bde:	fa93 f3a3 	rbit	r3, r3
 8000be2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000be6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bee:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bf2:	fa93 f3a3 	rbit	r3, r3
 8000bf6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bfa:	4b93      	ldr	r3, [pc, #588]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c02:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c06:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c0a:	fa92 f2a2 	rbit	r2, r2
 8000c0e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c12:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	f042 0220 	orr.w	r2, r2, #32
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	f002 021f 	and.w	r2, r2, #31
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 810c 	beq.w	8000e4c <HAL_RCC_OscConfig+0x2fc>
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8106 	bne.w	8000e4c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f000 be86 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c50:	d106      	bne.n	8000c60 <HAL_RCC_OscConfig+0x110>
 8000c52:	4b7d      	ldr	r3, [pc, #500]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a7c      	ldr	r2, [pc, #496]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e030      	b.n	8000cc2 <HAL_RCC_OscConfig+0x172>
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10c      	bne.n	8000c84 <HAL_RCC_OscConfig+0x134>
 8000c6a:	4b77      	ldr	r3, [pc, #476]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a76      	ldr	r2, [pc, #472]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b74      	ldr	r3, [pc, #464]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a73      	ldr	r2, [pc, #460]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	e01e      	b.n	8000cc2 <HAL_RCC_OscConfig+0x172>
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c8e:	d10c      	bne.n	8000caa <HAL_RCC_OscConfig+0x15a>
 8000c90:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a6c      	ldr	r2, [pc, #432]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b6a      	ldr	r3, [pc, #424]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a69      	ldr	r2, [pc, #420]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e00b      	b.n	8000cc2 <HAL_RCC_OscConfig+0x172>
 8000caa:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a63      	ldr	r2, [pc, #396]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cc2:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc6:	f023 020f 	bic.w	r2, r3, #15
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	495d      	ldr	r1, [pc, #372]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d059      	beq.n	8000d94 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc98 	bl	8000614 <HAL_GetTick>
 8000ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	e00a      	b.n	8000d00 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cea:	f7ff fc93 	bl	8000614 <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b64      	cmp	r3, #100	; 0x64
 8000cf8:	d902      	bls.n	8000d00 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f000 be29 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
 8000d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d0c:	fa93 f3a3 	rbit	r3, r3
 8000d10:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d102      	bne.n	8000d32 <HAL_RCC_OscConfig+0x1e2>
 8000d2c:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x20e>
 8000d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d4e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d6a:	fa92 f2a2 	rbit	r2, r2
 8000d6e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d72:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	f042 0220 	orr.w	r2, r2, #32
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	f002 021f 	and.w	r2, r2, #31
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0ab      	beq.n	8000cea <HAL_RCC_OscConfig+0x19a>
 8000d92:	e05c      	b.n	8000e4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc3e 	bl	8000614 <HAL_GetTick>
 8000d98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9c:	e00a      	b.n	8000db4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fc39 	bl	8000614 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d902      	bls.n	8000db4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	f000 bdcf 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000dc8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x296>
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	e015      	b.n	8000e12 <HAL_RCC_OscConfig+0x2c2>
 8000de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dfe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e02:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_RCC_OscConfig+0x2f8>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e1e:	fa92 f2a2 	rbit	r2, r2
 8000e22:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e26:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e2a:	fab2 f282 	clz	r2, r2
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	f042 0220 	orr.w	r2, r2, #32
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	f002 021f 	and.w	r2, r2, #31
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1ab      	bne.n	8000d9e <HAL_RCC_OscConfig+0x24e>
 8000e46:	e002      	b.n	8000e4e <HAL_RCC_OscConfig+0x2fe>
 8000e48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 816f 	beq.w	800113c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e5e:	4bd0      	ldr	r3, [pc, #832]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e6a:	4bcd      	ldr	r3, [pc, #820]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d16c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x400>
 8000e76:	4bca      	ldr	r3, [pc, #808]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d166      	bne.n	8000f50 <HAL_RCC_OscConfig+0x400>
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e94:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d102      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x362>
 8000eac:	4bbc      	ldr	r3, [pc, #752]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	e013      	b.n	8000eda <HAL_RCC_OscConfig+0x38a>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ebc:	fa93 f3a3 	rbit	r3, r3
 8000ec0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000ed6:	4bb2      	ldr	r3, [pc, #712]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	2202      	movs	r2, #2
 8000edc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ee0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ee4:	fa92 f2a2 	rbit	r2, r2
 8000ee8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000eec:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ef0:	fab2 f282 	clz	r2, r2
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f042 0220 	orr.w	r2, r2, #32
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	f002 021f 	and.w	r2, r2, #31
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	4013      	ands	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <HAL_RCC_OscConfig+0x3cc>
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d002      	beq.n	8000f1c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f000 bd1b 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4ba0      	ldr	r3, [pc, #640]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	21f8      	movs	r1, #248	; 0xf8
 8000f2c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f34:	fa91 f1a1 	rbit	r1, r1
 8000f38:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f3c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f40:	fab1 f181 	clz	r1, r1
 8000f44:	b2c9      	uxtb	r1, r1
 8000f46:	408b      	lsls	r3, r1
 8000f48:	4995      	ldr	r1, [pc, #596]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4e:	e0f5      	b.n	800113c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8085 	beq.w	8001066 <HAL_RCC_OscConfig+0x516>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	2301      	movs	r3, #1
 8000f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb44 	bl	8000614 <HAL_GetTick>
 8000f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	e00a      	b.n	8000fa8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb3f 	bl	8000614 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d902      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f000 bcd5 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000fba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	095b      	lsrs	r3, r3, #5
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x488>
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	e013      	b.n	8001000 <HAL_RCC_OscConfig+0x4b0>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fe2:	fa93 f3a3 	rbit	r3, r3
 8000fe6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ff0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	2202      	movs	r2, #2
 8001002:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001006:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800100a:	fa92 f2a2 	rbit	r2, r2
 800100e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001012:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001016:	fab2 f282 	clz	r2, r2
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f042 0220 	orr.w	r2, r2, #32
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	f002 021f 	and.w	r2, r2, #31
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0af      	beq.n	8000f92 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b5b      	ldr	r3, [pc, #364]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	21f8      	movs	r1, #248	; 0xf8
 8001042:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800104a:	fa91 f1a1 	rbit	r1, r1
 800104e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001052:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001056:	fab1 f181 	clz	r1, r1
 800105a:	b2c9      	uxtb	r1, r1
 800105c:	408b      	lsls	r3, r1
 800105e:	4950      	ldr	r1, [pc, #320]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e06a      	b.n	800113c <HAL_RCC_OscConfig+0x5ec>
 8001066:	2301      	movs	r3, #1
 8001068:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001070:	fa93 f3a3 	rbit	r3, r3
 8001074:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001086:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	461a      	mov	r2, r3
 800108e:	2300      	movs	r3, #0
 8001090:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fabf 	bl	8000614 <HAL_GetTick>
 8001096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff faba 	bl	8000614 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d902      	bls.n	80010b2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f000 bc50 	b.w	8001952 <HAL_RCC_OscConfig+0xe02>
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d102      	bne.n	80010e2 <HAL_RCC_OscConfig+0x592>
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	e013      	b.n	800110a <HAL_RCC_OscConfig+0x5ba>
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010ec:	fa93 f3a3 	rbit	r3, r3
 80010f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x650>)
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	2202      	movs	r2, #2
 800110c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001110:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001114:	fa92 f2a2 	rbit	r2, r2
 8001118:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800111c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001120:	fab2 f282 	clz	r2, r2
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f002 021f 	and.w	r2, r2, #31
 8001130:	2101      	movs	r1, #1
 8001132:	fa01 f202 	lsl.w	r2, r1, r2
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1af      	bne.n	800109c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80da 	beq.w	8001300 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d069      	beq.n	800122a <HAL_RCC_OscConfig+0x6da>
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x654>)
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	461a      	mov	r2, r3
 800117c:	2301      	movs	r3, #1
 800117e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fa48 	bl	8000614 <HAL_GetTick>
 8001184:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001188:	e00e      	b.n	80011a8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800118a:	f7ff fa43 	bl	8000614 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d906      	bls.n	80011a8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e3d9      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	10908120 	.word	0x10908120
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011be:	2202      	movs	r2, #2
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	fa93 f2a3 	rbit	r2, r3
 80011cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011d6:	2202      	movs	r2, #2
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f2a3 	rbit	r2, r3
 80011e4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4ba5      	ldr	r3, [pc, #660]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80011ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011f2:	2102      	movs	r1, #2
 80011f4:	6019      	str	r1, [r3, #0]
 80011f6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	fa93 f1a3 	rbit	r1, r3
 8001200:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001204:	6019      	str	r1, [r3, #0]
  return result;
 8001206:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0b0      	beq.n	800118a <HAL_RCC_OscConfig+0x63a>
 8001228:	e06a      	b.n	8001300 <HAL_RCC_OscConfig+0x7b0>
 800122a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001240:	601a      	str	r2, [r3, #0]
  return result;
 8001242:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001246:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <HAL_RCC_OscConfig+0x934>)
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	461a      	mov	r2, r3
 8001258:	2300      	movs	r3, #0
 800125a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125c:	f7ff f9da 	bl	8000614 <HAL_GetTick>
 8001260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	e009      	b.n	800127a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff f9d5 	bl	8000614 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e36b      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 800127a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800127e:	2202      	movs	r2, #2
 8001280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	fa93 f2a3 	rbit	r2, r3
 800128c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001296:	2202      	movs	r2, #2
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	fa93 f2a3 	rbit	r2, r3
 80012a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012ae:	2202      	movs	r2, #2
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	fa93 f2a3 	rbit	r2, r3
 80012bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80012c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ca:	2102      	movs	r1, #2
 80012cc:	6019      	str	r1, [r3, #0]
 80012ce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fa93 f1a3 	rbit	r1, r3
 80012d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012dc:	6019      	str	r1, [r3, #0]
  return result;
 80012de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1b2      	bne.n	8001266 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8158 	beq.w	80015c0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d112      	bne.n	8001348 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a56      	ldr	r2, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b54      	ldr	r3, [pc, #336]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x938>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11a      	bne.n	800138a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001354:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <HAL_RCC_OscConfig+0x938>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_RCC_OscConfig+0x938>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001360:	f7ff f958 	bl	8000614 <HAL_GetTick>
 8001364:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001368:	e009      	b.n	800137e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800136a:	f7ff f953 	bl	8000614 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e2e9      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <HAL_RCC_OscConfig+0x938>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0ef      	beq.n	800136a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d106      	bne.n	80013a2 <HAL_RCC_OscConfig+0x852>
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a39      	ldr	r2, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e02f      	b.n	8001402 <HAL_RCC_OscConfig+0x8b2>
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x876>
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a33      	ldr	r2, [pc, #204]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a30      	ldr	r2, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013be:	f023 0304 	bic.w	r3, r3, #4
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	e01d      	b.n	8001402 <HAL_RCC_OscConfig+0x8b2>
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x89a>
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6213      	str	r3, [r2, #32]
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0x8b2>
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6213      	str	r3, [r2, #32]
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d06b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff f902 	bl	8000614 <HAL_GetTick>
 8001410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff f8fd 	bl	8000614 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e291      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 800142e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	fa93 f2a3 	rbit	r2, r3
 8001440:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800145c:	601a      	str	r2, [r3, #0]
  return result;
 800145e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001462:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d109      	bne.n	800148c <HAL_RCC_OscConfig+0x93c>
 8001478:	4b01      	ldr	r3, [pc, #4]	; (8001480 <HAL_RCC_OscConfig+0x930>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x958>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	10908120 	.word	0x10908120
 8001488:	40007000 	.word	0x40007000
 800148c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001494:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	4bbb      	ldr	r3, [pc, #748]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014ac:	2102      	movs	r1, #2
 80014ae:	6011      	str	r1, [r2, #0]
 80014b0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fa92 f1a2 	rbit	r1, r2
 80014ba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014be:	6011      	str	r1, [r2, #0]
  return result;
 80014c0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	fab2 f282 	clz	r2, r2
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	f002 021f 	and.w	r2, r2, #31
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f202 	lsl.w	r2, r1, r2
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d099      	beq.n	8001416 <HAL_RCC_OscConfig+0x8c6>
 80014e2:	e063      	b.n	80015ac <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f896 	bl	8000614 <HAL_GetTick>
 80014e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	e00b      	b.n	8001506 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff f891 	bl	8000614 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e225      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 8001506:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001534:	601a      	str	r2, [r3, #0]
  return result;
 8001536:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800153a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	b2db      	uxtb	r3, r3
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d102      	bne.n	8001556 <HAL_RCC_OscConfig+0xa06>
 8001550:	4b90      	ldr	r3, [pc, #576]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	e00d      	b.n	8001572 <HAL_RCC_OscConfig+0xa22>
 8001556:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800155a:	2202      	movs	r2, #2
 800155c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	4b89      	ldr	r3, [pc, #548]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001576:	2102      	movs	r1, #2
 8001578:	6011      	str	r1, [r2, #0]
 800157a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	fa92 f1a2 	rbit	r1, r2
 8001584:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001588:	6011      	str	r1, [r2, #0]
  return result;
 800158a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	fab2 f282 	clz	r2, r2
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	f002 021f 	and.w	r2, r2, #31
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1a0      	bne.n	80014ee <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015ac:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d105      	bne.n	80015c0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b4:	4b77      	ldr	r3, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a76      	ldr	r2, [pc, #472]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80015ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015be:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 81c2 	beq.w	8001950 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	f000 819c 	beq.w	8001912 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	f040 8114 	bne.w	800180e <HAL_RCC_OscConfig+0xcbe>
 80015e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f2a3 	rbit	r2, r3
 80015fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015fe:	601a      	str	r2, [r3, #0]
  return result;
 8001600:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001604:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001610:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	461a      	mov	r2, r3
 8001618:	2300      	movs	r3, #0
 800161a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7fe fffa 	bl	8000614 <HAL_GetTick>
 8001620:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	e009      	b.n	800163a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001626:	f7fe fff5 	bl	8000614 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e18b      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 800163a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800163e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fa93 f2a3 	rbit	r2, r3
 800164e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001652:	601a      	str	r2, [r3, #0]
  return result;
 8001654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001658:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d102      	bne.n	8001674 <HAL_RCC_OscConfig+0xb24>
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	e01b      	b.n	80016ac <HAL_RCC_OscConfig+0xb5c>
 8001674:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016b4:	6011      	str	r1, [r2, #0]
 80016b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	fa92 f1a2 	rbit	r1, r2
 80016c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016c4:	6011      	str	r1, [r2, #0]
  return result;
 80016c6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	fab2 f282 	clz	r2, r2
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f042 0220 	orr.w	r2, r2, #32
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 021f 	and.w	r2, r2, #31
 80016dc:	2101      	movs	r1, #1
 80016de:	fa01 f202 	lsl.w	r2, r1, r2
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d19e      	bne.n	8001626 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	4925      	ldr	r1, [pc, #148]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800171c:	601a      	str	r2, [r3, #0]
  return result;
 800171e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001722:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800172e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2301      	movs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7fe ff6b 	bl	8000614 <HAL_GetTick>
 800173e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7fe ff66 	bl	8000614 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0fc      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 8001758:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800175c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fa93 f2a3 	rbit	r2, r3
 800176c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001770:	601a      	str	r2, [r3, #0]
  return result;
 8001772:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001776:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0xc48>
 800178c:	4b01      	ldr	r3, [pc, #4]	; (8001794 <HAL_RCC_OscConfig+0xc44>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	e01e      	b.n	80017d0 <HAL_RCC_OscConfig+0xc80>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800179c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0xe0c>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017d8:	6011      	str	r1, [r2, #0]
 80017da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fa92 f1a2 	rbit	r1, r2
 80017e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017e8:	6011      	str	r1, [r2, #0]
  return result;
 80017ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d09b      	beq.n	8001744 <HAL_RCC_OscConfig+0xbf4>
 800180c:	e0a0      	b.n	8001950 <HAL_RCC_OscConfig+0xe00>
 800180e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	601a      	str	r2, [r3, #0]
  return result;
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001838:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	461a      	mov	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001844:	f7fe fee6 	bl	8000614 <HAL_GetTick>
 8001848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e009      	b.n	8001862 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe fee1 	bl	8000614 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e077      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187a:	601a      	str	r2, [r3, #0]
  return result;
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0xd4c>
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0xe0c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e01b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd84>
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_OscConfig+0xe0c>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f107 0210 	add.w	r2, r7, #16
 80018d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018dc:	6011      	str	r1, [r2, #0]
 80018de:	f107 0210 	add.w	r2, r7, #16
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	fa92 f1a2 	rbit	r1, r2
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	6011      	str	r1, [r2, #0]
  return result;
 80018ee:	f107 020c 	add.w	r2, r7, #12
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	f002 021f 	and.w	r2, r2, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f202 	lsl.w	r2, r1, r2
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d19e      	bne.n	800184e <HAL_RCC_OscConfig+0xcfe>
 8001910:	e01e      	b.n	8001950 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_RCC_OscConfig+0xe0c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001928:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800192c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	429a      	cmp	r2, r3
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800193a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800193e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09e      	sub	sp, #120	; 0x78
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e162      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b90      	ldr	r3, [pc, #576]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b8d      	ldr	r3, [pc, #564]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	498b      	ldr	r1, [pc, #556]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e14a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	497f      	ldr	r1, [pc, #508]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80dc 	beq.w	8001b8c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d13c      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xf6>
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xa6>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e00f      	b.n	8001a26 <HAL_RCC_ClockConfig+0xc6>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
 8001a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a2e:	fa92 f2a2 	rbit	r2, r2
 8001a32:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d17b      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e0f3      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d13c      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x178>
 8001a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x128>
 8001a82:	4b4f      	ldr	r3, [pc, #316]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e00f      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
 8001a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aac:	63ba      	str	r2, [r7, #56]	; 0x38
 8001aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab0:	fa92 f2a2 	rbit	r2, r2
 8001ab4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ab8:	fab2 f282 	clz	r2, r2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f042 0220 	orr.w	r2, r2, #32
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f002 021f 	and.w	r2, r2, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d13a      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b2      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1a0>
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e00d      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1bc>
 8001b00:	2302      	movs	r3, #2
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	61ba      	str	r2, [r7, #24]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	617a      	str	r2, [r7, #20]
  return result;
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f042 0220 	orr.w	r2, r2, #32
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	f002 021f 	and.w	r2, r2, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e079      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	491a      	ldr	r1, [pc, #104]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7fe fd5a 	bl	8000614 <HAL_GetTick>
 8001b60:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7fe fd56 	bl	8000614 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e061      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_RCC_ClockConfig+0x260>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d214      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4906      	ldr	r1, [pc, #24]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_RCC_ClockConfig+0x25c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e040      	b.n	8001c3e <HAL_RCC_ClockConfig+0x2de>
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	491a      	ldr	r1, [pc, #104]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4912      	ldr	r1, [pc, #72]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c02:	f000 f829 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c06:	4601      	mov	r1, r0
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_RCC_ClockConfig+0x2e8>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	22f0      	movs	r2, #240	; 0xf0
 8001c12:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	fa92 f2a2 	rbit	r2, r2
 8001c1a:	60fa      	str	r2, [r7, #12]
  return result;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	fab2 f282 	clz	r2, r2
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	40d3      	lsrs	r3, r2
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_RCC_ClockConfig+0x2f0>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_ClockConfig+0x2f4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fca8 	bl	800058c <HAL_InitTick>
  
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3778      	adds	r7, #120	; 0x78
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	08002850 	.word	0x08002850
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x30>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
 8001c86:	e03c      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	e03c      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c94:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c98:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	607a      	str	r2, [r7, #4]
  return result;
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	40d3      	lsrs	r3, r2
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	220f      	movs	r2, #15
 8001cbc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	fa92 f2a2 	rbit	r2, r2
 8001cc4:	60fa      	str	r2, [r7, #12]
  return result;
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	40d3      	lsrs	r3, r2
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	e004      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	623b      	str	r3, [r7, #32]
      break;
 8001d00:	e002      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d04:	623b      	str	r3, [r7, #32]
      break;
 8001d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d08:	6a3b      	ldr	r3, [r7, #32]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	372c      	adds	r7, #44	; 0x2c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	08002868 	.word	0x08002868
 8001d24:	08002878 	.word	0x08002878
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d4a:	f7ff ffef 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d58:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	fa92 f2a2 	rbit	r2, r2
 8001d64:	603a      	str	r2, [r7, #0]
  return result;
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	40d3      	lsrs	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08002860 	.word	0x08002860

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d8e:	f7ff ffcd 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d92:	4601      	mov	r1, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001da0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	603a      	str	r2, [r7, #0]
  return result;
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	40d3      	lsrs	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08002860 	.word	0x08002860

08001dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b092      	sub	sp, #72	; 0x48
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80d4 	beq.w	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df0:	4b4e      	ldr	r3, [pc, #312]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a4a      	ldr	r2, [pc, #296]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e06:	61d3      	str	r3, [r2, #28]
 8001e08:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fbef 	bl	8000614 <HAL_GetTick>
 8001e36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe fbeb 	bl	8000614 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e13c      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8084 	beq.w	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d07c      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eca:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d04b      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fb9b 	bl	8000614 <HAL_GetTick>
 8001ede:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe fb97 	bl	8000614 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0e6      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d108      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f26:	4b01      	ldr	r3, [pc, #4]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
 8001f34:	10908100 	.word	0x10908100
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2202      	movs	r2, #2
 8001f4a:	613a      	str	r2, [r7, #16]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	60fa      	str	r2, [r7, #12]
  return result;
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0b7      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f72:	4b57      	ldr	r3, [pc, #348]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4954      	ldr	r1, [pc, #336]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a4f      	ldr	r2, [pc, #316]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	f023 0203 	bic.w	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4947      	ldr	r1, [pc, #284]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f023 0210 	bic.w	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4940      	ldr	r1, [pc, #256]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f023 0220 	bic.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4938      	ldr	r1, [pc, #224]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4931      	ldr	r1, [pc, #196]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800200c:	4313      	orrs	r3, r2
 800200e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d008      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4929      	ldr	r1, [pc, #164]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	4922      	ldr	r1, [pc, #136]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002048:	4313      	orrs	r3, r2
 800204a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	491a      	ldr	r1, [pc, #104]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002066:	4313      	orrs	r3, r2
 8002068:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	4913      	ldr	r1, [pc, #76]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002084:	4313      	orrs	r3, r2
 8002086:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	490b      	ldr	r1, [pc, #44]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	4904      	ldr	r1, [pc, #16]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3748      	adds	r7, #72	; 0x48
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e040      	b.n	8002168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe f984 	bl	8000404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f8c0 	bl	8002298 <UART_SetConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9ec 	bl	8002508 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800213e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800214e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fa73 	bl	800264c <UART_CheckIdleState>
 8002166:	4603      	mov	r3, r0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002184:	2b20      	cmp	r3, #32
 8002186:	f040 8082 	bne.w	800228e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_UART_Transmit+0x26>
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07a      	b.n	8002290 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_UART_Transmit+0x38>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e073      	b.n	8002290 <HAL_UART_Transmit+0x120>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2221      	movs	r2, #33	; 0x21
 80021bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021be:	f7fe fa29 	bl	8000614 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021dc:	d108      	bne.n	80021f0 <HAL_UART_Transmit+0x80>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e003      	b.n	80021f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002200:	e02d      	b.n	800225e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fa66 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e039      	b.n	8002290 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800222e:	b292      	uxth	r2, r2
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3302      	adds	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e008      	b.n	800224c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b292      	uxth	r2, r2
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1cb      	bne.n	8002202 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fa32 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e005      	b.n	8002290 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <UART_SetConfig+0x258>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	6979      	ldr	r1, [r7, #20]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <UART_SetConfig+0x25c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d121      	bne.n	8002358 <UART_SetConfig+0xc0>
 8002314:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <UART_SetConfig+0x260>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	2b03      	cmp	r3, #3
 800231e:	d817      	bhi.n	8002350 <UART_SetConfig+0xb8>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <UART_SetConfig+0x90>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002339 	.word	0x08002339
 800232c:	08002345 	.word	0x08002345
 8002330:	0800234b 	.word	0x0800234b
 8002334:	0800233f 	.word	0x0800233f
 8002338:	2300      	movs	r3, #0
 800233a:	77fb      	strb	r3, [r7, #31]
 800233c:	e01e      	b.n	800237c <UART_SetConfig+0xe4>
 800233e:	2302      	movs	r3, #2
 8002340:	77fb      	strb	r3, [r7, #31]
 8002342:	e01b      	b.n	800237c <UART_SetConfig+0xe4>
 8002344:	2304      	movs	r3, #4
 8002346:	77fb      	strb	r3, [r7, #31]
 8002348:	e018      	b.n	800237c <UART_SetConfig+0xe4>
 800234a:	2308      	movs	r3, #8
 800234c:	77fb      	strb	r3, [r7, #31]
 800234e:	e015      	b.n	800237c <UART_SetConfig+0xe4>
 8002350:	2310      	movs	r3, #16
 8002352:	77fb      	strb	r3, [r7, #31]
 8002354:	bf00      	nop
 8002356:	e011      	b.n	800237c <UART_SetConfig+0xe4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a67      	ldr	r2, [pc, #412]	; (80024fc <UART_SetConfig+0x264>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d102      	bne.n	8002368 <UART_SetConfig+0xd0>
 8002362:	2300      	movs	r3, #0
 8002364:	77fb      	strb	r3, [r7, #31]
 8002366:	e009      	b.n	800237c <UART_SetConfig+0xe4>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a64      	ldr	r2, [pc, #400]	; (8002500 <UART_SetConfig+0x268>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d102      	bne.n	8002378 <UART_SetConfig+0xe0>
 8002372:	2300      	movs	r3, #0
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	e001      	b.n	800237c <UART_SetConfig+0xe4>
 8002378:	2310      	movs	r3, #16
 800237a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002384:	d15c      	bne.n	8002440 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d828      	bhi.n	80023de <UART_SetConfig+0x146>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <UART_SetConfig+0xfc>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023b9 	.word	0x080023b9
 8002398:	080023c1 	.word	0x080023c1
 800239c:	080023c9 	.word	0x080023c9
 80023a0:	080023df 	.word	0x080023df
 80023a4:	080023cf 	.word	0x080023cf
 80023a8:	080023df 	.word	0x080023df
 80023ac:	080023df 	.word	0x080023df
 80023b0:	080023df 	.word	0x080023df
 80023b4:	080023d7 	.word	0x080023d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023b8:	f7ff fcc4 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80023bc:	61b8      	str	r0, [r7, #24]
        break;
 80023be:	e013      	b.n	80023e8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023c0:	f7ff fce2 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 80023c4:	61b8      	str	r0, [r7, #24]
        break;
 80023c6:	e00f      	b.n	80023e8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023c8:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <UART_SetConfig+0x26c>)
 80023ca:	61bb      	str	r3, [r7, #24]
        break;
 80023cc:	e00c      	b.n	80023e8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ce:	f7ff fc43 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 80023d2:	61b8      	str	r0, [r7, #24]
        break;
 80023d4:	e008      	b.n	80023e8 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023da:	61bb      	str	r3, [r7, #24]
        break;
 80023dc:	e004      	b.n	80023e8 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77bb      	strb	r3, [r7, #30]
        break;
 80023e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d074      	beq.n	80024d8 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	005a      	lsls	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	b29b      	uxth	r3, r3
 8002404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d916      	bls.n	800243a <UART_SetConfig+0x1a2>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d212      	bcs.n	800243a <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f023 030f 	bic.w	r3, r3, #15
 800241c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	b29b      	uxth	r3, r3
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	b29a      	uxth	r2, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	4313      	orrs	r3, r2
 800242e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	89fa      	ldrh	r2, [r7, #14]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	e04e      	b.n	80024d8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	77bb      	strb	r3, [r7, #30]
 800243e:	e04b      	b.n	80024d8 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d827      	bhi.n	8002496 <UART_SetConfig+0x1fe>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <UART_SetConfig+0x1b4>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	08002471 	.word	0x08002471
 8002450:	08002479 	.word	0x08002479
 8002454:	08002481 	.word	0x08002481
 8002458:	08002497 	.word	0x08002497
 800245c:	08002487 	.word	0x08002487
 8002460:	08002497 	.word	0x08002497
 8002464:	08002497 	.word	0x08002497
 8002468:	08002497 	.word	0x08002497
 800246c:	0800248f 	.word	0x0800248f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002470:	f7ff fc68 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8002474:	61b8      	str	r0, [r7, #24]
        break;
 8002476:	e013      	b.n	80024a0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002478:	f7ff fc86 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 800247c:	61b8      	str	r0, [r7, #24]
        break;
 800247e:	e00f      	b.n	80024a0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <UART_SetConfig+0x26c>)
 8002482:	61bb      	str	r3, [r7, #24]
        break;
 8002484:	e00c      	b.n	80024a0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002486:	f7ff fbe7 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 800248a:	61b8      	str	r0, [r7, #24]
        break;
 800248c:	e008      	b.n	80024a0 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002492:	61bb      	str	r3, [r7, #24]
        break;
 8002494:	e004      	b.n	80024a0 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77bb      	strb	r3, [r7, #30]
        break;
 800249e:	bf00      	nop
    }

    if (pclk != 0U)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d018      	beq.n	80024d8 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	085a      	lsrs	r2, r3, #1
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	441a      	add	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0f      	cmp	r3, #15
 80024c0:	d908      	bls.n	80024d4 <UART_SetConfig+0x23c>
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d204      	bcs.n	80024d4 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	e001      	b.n	80024d8 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80024e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	efff69f3 	.word	0xefff69f3
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40004400 	.word	0x40004400
 8002500:	40004800 	.word	0x40004800
 8002504:	007a1200 	.word	0x007a1200

08002508 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01a      	beq.n	800261e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002606:	d10a      	bne.n	800261e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  }
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800265c:	f7fd ffda 	bl	8000614 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b08      	cmp	r3, #8
 800266e:	d10e      	bne.n	800268e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f82d 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e023      	b.n	80026d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d10e      	bne.n	80026ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800269c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f817 	bl	80026de <UART_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00d      	b.n	80026d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ee:	e05e      	b.n	80027ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d05a      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f8:	f7fd ff8c 	bl	8000614 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <UART_WaitOnFlagUntilTimeout+0x30>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11b      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800271c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0201 	bic.w	r2, r2, #1
 800272c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e043      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d02c      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002762:	d124      	bne.n	80027ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800276c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800277c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e00f      	b.n	80027ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4013      	ands	r3, r2
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf0c      	ite	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	2300      	movne	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d091      	beq.n	80026f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4e0d      	ldr	r6, [pc, #52]	; (8002810 <__libc_init_array+0x38>)
 80027dc:	4c0d      	ldr	r4, [pc, #52]	; (8002814 <__libc_init_array+0x3c>)
 80027de:	1ba4      	subs	r4, r4, r6
 80027e0:	10a4      	asrs	r4, r4, #2
 80027e2:	2500      	movs	r5, #0
 80027e4:	42a5      	cmp	r5, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	4e0b      	ldr	r6, [pc, #44]	; (8002818 <__libc_init_array+0x40>)
 80027ea:	4c0c      	ldr	r4, [pc, #48]	; (800281c <__libc_init_array+0x44>)
 80027ec:	f000 f820 	bl	8002830 <_init>
 80027f0:	1ba4      	subs	r4, r4, r6
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	2500      	movs	r5, #0
 80027f6:	42a5      	cmp	r5, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002800:	4798      	blx	r3
 8002802:	3501      	adds	r5, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800280a:	4798      	blx	r3
 800280c:	3501      	adds	r5, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	08002888 	.word	0x08002888
 8002814:	08002888 	.word	0x08002888
 8002818:	08002888 	.word	0x08002888
 800281c:	0800288c 	.word	0x0800288c

08002820 <memset>:
 8002820:	4402      	add	r2, r0
 8002822:	4603      	mov	r3, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <_init>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr

0800283c <_fini>:
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283e:	bf00      	nop
 8002840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002842:	bc08      	pop	{r3}
 8002844:	469e      	mov	lr, r3
 8002846:	4770      	bx	lr
