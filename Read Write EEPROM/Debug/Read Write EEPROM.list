
Read Write EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001e3c  08001e3c  00002e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e6c  08001e6c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e6c  08001e6c  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e6c  08001e6c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e6c  08001e6c  00002e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e70  08001e70  00002e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e74  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001e80  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001e80  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003afa  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e69  00000000  00000000  00006b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  000079a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c4  00000000  00000000  00007d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191d5  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c17  00000000  00000000  00021219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094607  00000000  00000000  00026e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb437  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d98  00000000  00000000  000bb47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000bc214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e24 	.word	0x08001e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e24 	.word	0x08001e24

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f914 	bl	80003f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f804 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f83e 	bl	8000254 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d8:	bf00      	nop
 80001da:	e7fd      	b.n	80001d8 <main+0x10>

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	@ 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	@ 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 fdee 	bl	8001dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fe:	2302      	movs	r3, #2
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000206:	2310      	movs	r3, #16
 8000208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800020a:	2300      	movs	r3, #0
 800020c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fbb6 	bl	8000984 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021e:	f000 f855 	bl	80002cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fbe0 	bl	8001a00 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000246:	f000 f841 	bl	80002cc <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3740      	adds	r7, #64	@ 0x40
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026a:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <MX_GPIO_Init+0x70>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a15      	ldr	r2, [pc, #84]	@ (80002c4 <MX_GPIO_Init+0x70>)
 8000270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000274:	6153      	str	r3, [r2, #20]
 8000276:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <MX_GPIO_Init+0x70>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800027e:	60bb      	str	r3, [r7, #8]
 8000280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <MX_GPIO_Init+0x70>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <MX_GPIO_Init+0x70>)
 8000288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800028c:	6153      	str	r3, [r2, #20]
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <MX_GPIO_Init+0x70>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800029a:	2310      	movs	r3, #16
 800029c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800029e:	2302      	movs	r3, #2
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a6:	2303      	movs	r3, #3
 80002a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80002aa:	2305      	movs	r3, #5
 80002ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <MX_GPIO_Init+0x74>)
 80002b6:	f000 f9eb 	bl	8000690 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ba:	bf00      	nop
 80002bc:	3720      	adds	r7, #32
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	48000400 	.word	0x48000400

080002cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d0:	b672      	cpsid	i
}
 80002d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <Error_Handler+0x8>

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <HAL_MspInit+0x44>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <HAL_MspInit+0x44>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <HAL_MspInit+0x44>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <HAL_MspInit+0x44>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	4a08      	ldr	r2, [pc, #32]	@ (800031c <HAL_MspInit+0x44>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000300:	61d3      	str	r3, [r2, #28]
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <HAL_MspInit+0x44>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <NMI_Handler+0x4>

08000328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <HardFault_Handler+0x4>

08000330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <MemManage_Handler+0x4>

08000338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <BusFault_Handler+0x4>

08000340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000344:	bf00      	nop
 8000346:	e7fd      	b.n	8000344 <UsageFault_Handler+0x4>

08000348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000376:	f000 f885 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <SystemInit+0x20>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <SystemInit+0x20>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff ffea 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	@ (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	@ (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	@ (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f001 fd03 	bl	8001ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d6:	f7ff fef7 	bl	80001c8 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e8:	08001e74 	.word	0x08001e74
  ldr r2, =_sbss
 80003ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003f0:	2000002c 	.word	0x2000002c

080003f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_IRQHandler>
	...

080003f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003fc:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <HAL_Init+0x28>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a07      	ldr	r2, [pc, #28]	@ (8000420 <HAL_Init+0x28>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000408:	2003      	movs	r0, #3
 800040a:	f000 f90d 	bl	8000628 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800040e:	200f      	movs	r0, #15
 8000410:	f000 f808 	bl	8000424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000414:	f7ff ff60 	bl	80002d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40022000 	.word	0x40022000

08000424 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800042c:	4b12      	ldr	r3, [pc, #72]	@ (8000478 <HAL_InitTick+0x54>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <HAL_InitTick+0x58>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800043a:	fbb3 f3f1 	udiv	r3, r3, r1
 800043e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f000 f917 	bl	8000676 <HAL_SYSTICK_Config>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800044e:	2301      	movs	r3, #1
 8000450:	e00e      	b.n	8000470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d80a      	bhi.n	800046e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000458:	2200      	movs	r2, #0
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	f04f 30ff 	mov.w	r0, #4294967295
 8000460:	f000 f8ed 	bl	800063e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000464:	4a06      	ldr	r2, [pc, #24]	@ (8000480 <HAL_InitTick+0x5c>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800046a:	2300      	movs	r3, #0
 800046c:	e000      	b.n	8000470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000000 	.word	0x20000000
 800047c:	20000008 	.word	0x20000008
 8000480:	20000004 	.word	0x20000004

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_IncTick+0x20>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_IncTick+0x24>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_IncTick+0x24>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000008 	.word	0x20000008
 80004a8:	20000028 	.word	0x20000028

080004ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80004b0:	4b03      	ldr	r3, [pc, #12]	@ (80004c0 <HAL_GetTick+0x14>)
 80004b2:	681b      	ldr	r3, [r3, #0]
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000028 	.word	0x20000028

080004c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f003 0307 	and.w	r3, r3, #7
 80004d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <__NVIC_SetPriorityGrouping+0x44>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004da:	68ba      	ldr	r2, [r7, #8]
 80004dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004e0:	4013      	ands	r3, r2
 80004e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004f6:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <__NVIC_SetPriorityGrouping+0x44>)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	60d3      	str	r3, [r2, #12]
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <__NVIC_GetPriorityGrouping+0x18>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	0a1b      	lsrs	r3, r3, #8
 8000516:	f003 0307 	and.w	r3, r3, #7
}
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	6039      	str	r1, [r7, #0]
 8000532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000538:	2b00      	cmp	r3, #0
 800053a:	db0a      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2da      	uxtb	r2, r3
 8000540:	490c      	ldr	r1, [pc, #48]	@ (8000574 <__NVIC_SetPriority+0x4c>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	0112      	lsls	r2, r2, #4
 8000548:	b2d2      	uxtb	r2, r2
 800054a:	440b      	add	r3, r1
 800054c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000550:	e00a      	b.n	8000568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4908      	ldr	r1, [pc, #32]	@ (8000578 <__NVIC_SetPriority+0x50>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	3b04      	subs	r3, #4
 8000560:	0112      	lsls	r2, r2, #4
 8000562:	b2d2      	uxtb	r2, r2
 8000564:	440b      	add	r3, r1
 8000566:	761a      	strb	r2, [r3, #24]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e100 	.word	0xe000e100
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800057c:	b480      	push	{r7}
 800057e:	b089      	sub	sp, #36	@ 0x24
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	f1c3 0307 	rsb	r3, r3, #7
 8000596:	2b04      	cmp	r3, #4
 8000598:	bf28      	it	cs
 800059a:	2304      	movcs	r3, #4
 800059c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3304      	adds	r3, #4
 80005a2:	2b06      	cmp	r3, #6
 80005a4:	d902      	bls.n	80005ac <NVIC_EncodePriority+0x30>
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	3b03      	subs	r3, #3
 80005aa:	e000      	b.n	80005ae <NVIC_EncodePriority+0x32>
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 32ff 	mov.w	r2, #4294967295
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43da      	mvns	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	401a      	ands	r2, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43d9      	mvns	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	4313      	orrs	r3, r2
         );
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3724      	adds	r7, #36	@ 0x24
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005f4:	d301      	bcc.n	80005fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00f      	b.n	800061a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <SysTick_Config+0x40>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000602:	210f      	movs	r1, #15
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f7ff ff8e 	bl	8000528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <SysTick_Config+0x40>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <SysTick_Config+0x40>)
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e000e010 	.word	0xe000e010

08000628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff47 	bl	80004c4 <__NVIC_SetPriorityGrouping>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000650:	f7ff ff5c 	bl	800050c <__NVIC_GetPriorityGrouping>
 8000654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	6978      	ldr	r0, [r7, #20]
 800065c:	f7ff ff8e 	bl	800057c <NVIC_EncodePriority>
 8000660:	4602      	mov	r2, r0
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff5d 	bl	8000528 <__NVIC_SetPriority>
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffb0 	bl	80005e4 <SysTick_Config>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800069e:	e154      	b.n	800094a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	2101      	movs	r1, #1
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4013      	ands	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f000 8146 	beq.w	8000944 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 0303 	and.w	r3, r3, #3
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d005      	beq.n	80006d0 <HAL_GPIO_Init+0x40>
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d130      	bne.n	8000732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	2203      	movs	r2, #3
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	43db      	mvns	r3, r3
 80006e2:	693a      	ldr	r2, [r7, #16]
 80006e4:	4013      	ands	r3, r2
 80006e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000706:	2201      	movs	r2, #1
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43db      	mvns	r3, r3
 8000710:	693a      	ldr	r2, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	091b      	lsrs	r3, r3, #4
 800071c:	f003 0201 	and.w	r2, r3, #1
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	4313      	orrs	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	2b03      	cmp	r3, #3
 800073c:	d017      	beq.n	800076e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2203      	movs	r2, #3
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4013      	ands	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	689a      	ldr	r2, [r3, #8]
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	4313      	orrs	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f003 0303 	and.w	r3, r3, #3
 8000776:	2b02      	cmp	r3, #2
 8000778:	d123      	bne.n	80007c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	08da      	lsrs	r2, r3, #3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3208      	adds	r2, #8
 8000782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	220f      	movs	r2, #15
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	691a      	ldr	r2, [r3, #16]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	f003 0307 	and.w	r3, r3, #7
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	08da      	lsrs	r2, r3, #3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3208      	adds	r2, #8
 80007bc:	6939      	ldr	r1, [r7, #16]
 80007be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	2203      	movs	r2, #3
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	4013      	ands	r3, r2
 80007d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 0203 	and.w	r2, r3, #3
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 80a0 	beq.w	8000944 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000804:	4b58      	ldr	r3, [pc, #352]	@ (8000968 <HAL_GPIO_Init+0x2d8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a57      	ldr	r2, [pc, #348]	@ (8000968 <HAL_GPIO_Init+0x2d8>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <HAL_GPIO_Init+0x2d8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800081c:	4a53      	ldr	r2, [pc, #332]	@ (800096c <HAL_GPIO_Init+0x2dc>)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	089b      	lsrs	r3, r3, #2
 8000822:	3302      	adds	r3, #2
 8000824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	220f      	movs	r2, #15
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000846:	d019      	beq.n	800087c <HAL_GPIO_Init+0x1ec>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a49      	ldr	r2, [pc, #292]	@ (8000970 <HAL_GPIO_Init+0x2e0>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d013      	beq.n	8000878 <HAL_GPIO_Init+0x1e8>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a48      	ldr	r2, [pc, #288]	@ (8000974 <HAL_GPIO_Init+0x2e4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d00d      	beq.n	8000874 <HAL_GPIO_Init+0x1e4>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a47      	ldr	r2, [pc, #284]	@ (8000978 <HAL_GPIO_Init+0x2e8>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d007      	beq.n	8000870 <HAL_GPIO_Init+0x1e0>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a46      	ldr	r2, [pc, #280]	@ (800097c <HAL_GPIO_Init+0x2ec>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d101      	bne.n	800086c <HAL_GPIO_Init+0x1dc>
 8000868:	2304      	movs	r3, #4
 800086a:	e008      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 800086c:	2305      	movs	r3, #5
 800086e:	e006      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000870:	2303      	movs	r3, #3
 8000872:	e004      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000874:	2302      	movs	r3, #2
 8000876:	e002      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 800087c:	2300      	movs	r3, #0
 800087e:	697a      	ldr	r2, [r7, #20]
 8000880:	f002 0203 	and.w	r2, r2, #3
 8000884:	0092      	lsls	r2, r2, #2
 8000886:	4093      	lsls	r3, r2
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	4313      	orrs	r3, r2
 800088c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800088e:	4937      	ldr	r1, [pc, #220]	@ (800096c <HAL_GPIO_Init+0x2dc>)
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	3302      	adds	r3, #2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800089c:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	43db      	mvns	r3, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d003      	beq.n	80008c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d003      	beq.n	80008ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008ea:	4a25      	ldr	r2, [pc, #148]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80008f0:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000908:	2b00      	cmp	r3, #0
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000914:	4a1a      	ldr	r2, [pc, #104]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	43db      	mvns	r3, r3
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800093e:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <HAL_GPIO_Init+0x2f0>)
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa22 f303 	lsr.w	r3, r2, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	f47f aea3 	bne.w	80006a0 <HAL_GPIO_Init+0x10>
  }
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	371c      	adds	r7, #28
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000
 8000970:	48000400 	.word	0x48000400
 8000974:	48000800 	.word	0x48000800
 8000978:	48000c00 	.word	0x48000c00
 800097c:	48001000 	.word	0x48001000
 8000980:	40010400 	.word	0x40010400

08000984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800098a:	af00      	add	r7, sp, #0
 800098c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000990:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000994:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800099a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f001 b823 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80009ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 817d 	beq.w	8000cba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009c0:	4bbc      	ldr	r3, [pc, #752]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d00c      	beq.n	80009e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009cc:	4bb9      	ldr	r3, [pc, #740]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 030c 	and.w	r3, r3, #12
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d15c      	bne.n	8000a92 <HAL_RCC_OscConfig+0x10e>
 80009d8:	4bb6      	ldr	r3, [pc, #728]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009e4:	d155      	bne.n	8000a92 <HAL_RCC_OscConfig+0x10e>
 80009e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80009ea:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	095b      	lsrs	r3, r3, #5
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <HAL_RCC_OscConfig+0x94>
 8000a12:	4ba8      	ldr	r3, [pc, #672]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	e015      	b.n	8000a44 <HAL_RCC_OscConfig+0xc0>
 8000a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a1c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000a24:	fa93 f3a3 	rbit	r3, r3
 8000a28:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000a2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000a30:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000a34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000a40:	4b9c      	ldr	r3, [pc, #624]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a48:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000a4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000a50:	fa92 f2a2 	rbit	r2, r2
 8000a54:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000a58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000a5c:	fab2 f282 	clz	r2, r2
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	f042 0220 	orr.w	r2, r2, #32
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	f002 021f 	and.w	r2, r2, #31
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	4013      	ands	r3, r2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 811f 	beq.w	8000cb8 <HAL_RCC_OscConfig+0x334>
 8000a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8116 	bne.w	8000cb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f000 bfaf 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000a96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aa2:	d106      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x12e>
 8000aa4:	4b83      	ldr	r3, [pc, #524]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a82      	ldr	r2, [pc, #520]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	e036      	b.n	8000b20 <HAL_RCC_OscConfig+0x19c>
 8000ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <HAL_RCC_OscConfig+0x158>
 8000ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b79      	ldr	r3, [pc, #484]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a78      	ldr	r2, [pc, #480]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e021      	b.n	8000b20 <HAL_RCC_OscConfig+0x19c>
 8000adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ae0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000aec:	d10c      	bne.n	8000b08 <HAL_RCC_OscConfig+0x184>
 8000aee:	4b71      	ldr	r3, [pc, #452]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a70      	ldr	r2, [pc, #448]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	4b6e      	ldr	r3, [pc, #440]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a6d      	ldr	r2, [pc, #436]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b04:	6013      	str	r3, [r2, #0]
 8000b06:	e00b      	b.n	8000b20 <HAL_RCC_OscConfig+0x19c>
 8000b08:	4b6a      	ldr	r3, [pc, #424]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a69      	ldr	r2, [pc, #420]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b67      	ldr	r3, [pc, #412]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a66      	ldr	r2, [pc, #408]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b20:	4b64      	ldr	r3, [pc, #400]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b24:	f023 020f 	bic.w	r2, r3, #15
 8000b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	495f      	ldr	r1, [pc, #380]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b36:	4313      	orrs	r3, r2
 8000b38:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d059      	beq.n	8000bfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fcaf 	bl	80004ac <HAL_GetTick>
 8000b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	e00a      	b.n	8000b6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b54:	f7ff fcaa 	bl	80004ac <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b64      	cmp	r3, #100	@ 0x64
 8000b62:	d902      	bls.n	8000b6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f000 bf43 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 8000b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b6e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000b76:	fa93 f3a3 	rbit	r3, r3
 8000b7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000b7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	fab3 f383 	clz	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	095b      	lsrs	r3, r3, #5
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d102      	bne.n	8000b9c <HAL_RCC_OscConfig+0x218>
 8000b96:	4b47      	ldr	r3, [pc, #284]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	e015      	b.n	8000bc8 <HAL_RCC_OscConfig+0x244>
 8000b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ba0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ba4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000ba8:	fa93 f3a3 	rbit	r3, r3
 8000bac:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bb4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000bb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bcc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000bd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000bd4:	fa92 f2a2 	rbit	r2, r2
 8000bd8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000bdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	f042 0220 	orr.w	r2, r2, #32
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	f002 021f 	and.w	r2, r2, #31
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0ab      	beq.n	8000b54 <HAL_RCC_OscConfig+0x1d0>
 8000bfc:	e05d      	b.n	8000cba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfe:	f7ff fc55 	bl	80004ac <HAL_GetTick>
 8000c02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	e00a      	b.n	8000c1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fc50 	bl	80004ac <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b64      	cmp	r3, #100	@ 0x64
 8000c16:	d902      	bls.n	8000c1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f000 bee9 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 8000c1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c22:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	fab3 f383 	clz	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d102      	bne.n	8000c50 <HAL_RCC_OscConfig+0x2cc>
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	e015      	b.n	8000c7c <HAL_RCC_OscConfig+0x2f8>
 8000c50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c54:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c68:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000c6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000c70:	fa93 f3a3 	rbit	r3, r3
 8000c74:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_RCC_OscConfig+0x330>)
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c80:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000c84:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000c88:	fa92 f2a2 	rbit	r2, r2
 8000c8c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000c90:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	f042 0220 	orr.w	r2, r2, #32
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	f002 021f 	and.w	r2, r2, #31
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	4013      	ands	r3, r2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1ab      	bne.n	8000c08 <HAL_RCC_OscConfig+0x284>
 8000cb0:	e003      	b.n	8000cba <HAL_RCC_OscConfig+0x336>
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 817d 	beq.w	8000fca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cd0:	4ba6      	ldr	r3, [pc, #664]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00b      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cdc:	4ba3      	ldr	r3, [pc, #652]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 030c 	and.w	r3, r3, #12
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	d172      	bne.n	8000dce <HAL_RCC_OscConfig+0x44a>
 8000ce8:	4ba0      	ldr	r3, [pc, #640]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d16c      	bne.n	8000dce <HAL_RCC_OscConfig+0x44a>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000d06:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	fab3 f383 	clz	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d102      	bne.n	8000d24 <HAL_RCC_OscConfig+0x3a0>
 8000d1e:	4b93      	ldr	r3, [pc, #588]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	e013      	b.n	8000d4c <HAL_RCC_OscConfig+0x3c8>
 8000d24:	2302      	movs	r3, #2
 8000d26:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000d36:	2302      	movs	r3, #2
 8000d38:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000d3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000d40:	fa93 f3a3 	rbit	r3, r3
 8000d44:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000d48:	4b88      	ldr	r3, [pc, #544]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000d52:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000d56:	fa92 f2a2 	rbit	r2, r2
 8000d5a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000d5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	f002 021f 	and.w	r2, r2, #31
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00a      	beq.n	8000d94 <HAL_RCC_OscConfig+0x410>
 8000d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d002      	beq.n	8000d94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f000 be2e 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d94:	4b75      	ldr	r3, [pc, #468]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	21f8      	movs	r1, #248	@ 0xf8
 8000daa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000db2:	fa91 f1a1 	rbit	r1, r1
 8000db6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000dba:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000dbe:	fab1 f181 	clz	r1, r1
 8000dc2:	b2c9      	uxtb	r1, r1
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	4969      	ldr	r1, [pc, #420]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dcc:	e0fd      	b.n	8000fca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8088 	beq.w	8000ef0 <HAL_RCC_OscConfig+0x56c>
 8000de0:	2301      	movs	r3, #1
 8000de2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000e00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	461a      	mov	r2, r3
 8000e08:	2301      	movs	r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fb4e 	bl	80004ac <HAL_GetTick>
 8000e10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e14:	e00a      	b.n	8000e2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e16:	f7ff fb49 	bl	80004ac <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d902      	bls.n	8000e2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	f000 bde2 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e32:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000e36:	fa93 f3a3 	rbit	r3, r3
 8000e3a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8000e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e42:	fab3 f383 	clz	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	095b      	lsrs	r3, r3, #5
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <HAL_RCC_OscConfig+0x4d8>
 8000e56:	4b45      	ldr	r3, [pc, #276]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	e013      	b.n	8000e84 <HAL_RCC_OscConfig+0x500>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e62:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000e74:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000e78:	fa93 f3a3 	rbit	r3, r3
 8000e7c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8000e80:	4b3a      	ldr	r3, [pc, #232]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e84:	2202      	movs	r2, #2
 8000e86:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8000e8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000e8e:	fa92 f2a2 	rbit	r2, r2
 8000e92:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8000e96:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8000e9a:	fab2 f282 	clz	r2, r2
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	f042 0220 	orr.w	r2, r2, #32
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	f002 021f 	and.w	r2, r2, #31
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0af      	beq.n	8000e16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	21f8      	movs	r1, #248	@ 0xf8
 8000ecc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000ed4:	fa91 f1a1 	rbit	r1, r1
 8000ed8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8000edc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000ee0:	fab1 f181 	clz	r1, r1
 8000ee4:	b2c9      	uxtb	r1, r1
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	4920      	ldr	r1, [pc, #128]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]
 8000eee:	e06c      	b.n	8000fca <HAL_RCC_OscConfig+0x646>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8000f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	461a      	mov	r2, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fac6 	bl	80004ac <HAL_GetTick>
 8000f20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f24:	e00a      	b.n	8000f3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fac1 	bl	80004ac <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d902      	bls.n	8000f3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	f000 bd5a 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8000f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	fab3 f383 	clz	r3, r3
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	095b      	lsrs	r3, r3, #5
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d104      	bne.n	8000f70 <HAL_RCC_OscConfig+0x5ec>
 8000f66:	4b01      	ldr	r3, [pc, #4]	@ (8000f6c <HAL_RCC_OscConfig+0x5e8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	e015      	b.n	8000f98 <HAL_RCC_OscConfig+0x614>
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000f88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f8c:	fa93 f3a3 	rbit	r3, r3
 8000f90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000f94:	4bc8      	ldr	r3, [pc, #800]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000f9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000fa2:	fa92 f2a2 	rbit	r2, r2
 8000fa6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8000faa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000fae:	fab2 f282 	clz	r2, r2
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f002 021f 	and.w	r2, r2, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ad      	bne.n	8000f26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8110 	beq.w	8001200 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d079      	beq.n	80010e4 <HAL_RCC_OscConfig+0x760>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	4bab      	ldr	r3, [pc, #684]	@ (80012bc <HAL_RCC_OscConfig+0x938>)
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	461a      	mov	r2, r3
 8001016:	2301      	movs	r3, #1
 8001018:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff fa47 	bl	80004ac <HAL_GetTick>
 800101e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001022:	e00a      	b.n	800103a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fa42 	bl	80004ac <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d902      	bls.n	800103a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	f000 bcdb 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 800103a:	2302      	movs	r3, #2
 800103c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001044:	fa93 f3a3 	rbit	r3, r3
 8001048:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800104c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001050:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	fa93 f2a3 	rbit	r2, r3
 8001066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800106a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	fa93 f2a3 	rbit	r2, r3
 800108a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800108e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001092:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001094:	4b88      	ldr	r3, [pc, #544]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 8001096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800109c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010a0:	2102      	movs	r1, #2
 80010a2:	6019      	str	r1, [r3, #0]
 80010a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	fa93 f1a3 	rbit	r1, r3
 80010b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010ba:	6019      	str	r1, [r3, #0]
  return result;
 80010bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	fab3 f383 	clz	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0a0      	beq.n	8001024 <HAL_RCC_OscConfig+0x6a0>
 80010e2:	e08d      	b.n	8001200 <HAL_RCC_OscConfig+0x87c>
 80010e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	fa93 f2a3 	rbit	r2, r3
 80010fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001102:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001106:	601a      	str	r2, [r3, #0]
  return result;
 8001108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800110c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001110:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001112:	fab3 f383 	clz	r3, r3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <HAL_RCC_OscConfig+0x938>)
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	461a      	mov	r2, r3
 8001122:	2300      	movs	r3, #0
 8001124:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff f9c1 	bl	80004ac <HAL_GetTick>
 800112a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	e00a      	b.n	8001146 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001130:	f7ff f9bc 	bl	80004ac <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d902      	bls.n	8001146 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	f000 bc55 	b.w	80019f0 <HAL_RCC_OscConfig+0x106c>
 8001146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800114e:	2202      	movs	r2, #2
 8001150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001156:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fa93 f2a3 	rbit	r2, r3
 8001160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001164:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800116e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800117a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	fa93 f2a3 	rbit	r2, r3
 8001184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001192:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001196:	2202      	movs	r2, #2
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	fa93 f2a3 	rbit	r2, r3
 80011a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b2:	4b41      	ldr	r3, [pc, #260]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 80011b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011be:	2102      	movs	r1, #2
 80011c0:	6019      	str	r1, [r3, #0]
 80011c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	fa93 f1a3 	rbit	r1, r3
 80011d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80011d8:	6019      	str	r1, [r3, #0]
  return result;
 80011da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d197      	bne.n	8001130 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001204:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 81a1 	beq.w	8001558 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d116      	bne.n	8001256 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	4b23      	ldr	r3, [pc, #140]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	4a22      	ldr	r2, [pc, #136]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 800122e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001232:	61d3      	str	r3, [r2, #28]
 8001234:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800123c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001240:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800124a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800124e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001250:	2301      	movs	r3, #1
 8001252:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_RCC_OscConfig+0x93c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11a      	bne.n	8001298 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_RCC_OscConfig+0x93c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a16      	ldr	r2, [pc, #88]	@ (80012c0 <HAL_RCC_OscConfig+0x93c>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800126c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126e:	f7ff f91d 	bl	80004ac <HAL_GetTick>
 8001272:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	e009      	b.n	800128c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001278:	f7ff f918 	bl	80004ac <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	@ 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e3b1      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_RCC_OscConfig+0x93c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ef      	beq.n	8001278 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10d      	bne.n	80012c4 <HAL_RCC_OscConfig+0x940>
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	4a02      	ldr	r2, [pc, #8]	@ (80012b8 <HAL_RCC_OscConfig+0x934>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6213      	str	r3, [r2, #32]
 80012b4:	e03c      	b.n	8001330 <HAL_RCC_OscConfig+0x9ac>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	10908120 	.word	0x10908120
 80012c0:	40007000 	.word	0x40007000
 80012c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x96a>
 80012d4:	4bc1      	ldr	r3, [pc, #772]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4ac0      	ldr	r2, [pc, #768]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	4bbe      	ldr	r3, [pc, #760]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4abd      	ldr	r2, [pc, #756]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	6213      	str	r3, [r2, #32]
 80012ec:	e020      	b.n	8001330 <HAL_RCC_OscConfig+0x9ac>
 80012ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x994>
 80012fe:	4bb7      	ldr	r3, [pc, #732]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4ab6      	ldr	r2, [pc, #728]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	4bb4      	ldr	r3, [pc, #720]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4ab3      	ldr	r2, [pc, #716]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0x9ac>
 8001318:	4bb0      	ldr	r3, [pc, #704]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4aaf      	ldr	r2, [pc, #700]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	4bad      	ldr	r3, [pc, #692]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4aac      	ldr	r2, [pc, #688]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800132a:	f023 0304 	bic.w	r3, r3, #4
 800132e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8081 	beq.w	8001444 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff f8b3 	bl	80004ac <HAL_GetTick>
 8001346:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800134c:	f7ff f8ae 	bl	80004ac <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e345      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
 8001364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001368:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001374:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	fa93 f2a3 	rbit	r2, r3
 800137e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001382:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001390:	2202      	movs	r2, #2
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001398:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013aa:	601a      	str	r2, [r3, #0]
  return result;
 80013ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80013b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	095b      	lsrs	r3, r3, #5
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d102      	bne.n	80013d0 <HAL_RCC_OscConfig+0xa4c>
 80013ca:	4b84      	ldr	r3, [pc, #528]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	e013      	b.n	80013f8 <HAL_RCC_OscConfig+0xa74>
 80013d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013d8:	2202      	movs	r2, #2
 80013da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	fa93 f2a3 	rbit	r2, r3
 80013ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	4b79      	ldr	r3, [pc, #484]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80013fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001400:	2102      	movs	r1, #2
 8001402:	6011      	str	r1, [r2, #0]
 8001404:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001408:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	fa92 f1a2 	rbit	r1, r2
 8001412:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001416:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800141a:	6011      	str	r1, [r2, #0]
  return result;
 800141c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001420:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	fab2 f282 	clz	r2, r2
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f002 021f 	and.w	r2, r2, #31
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d084      	beq.n	800134c <HAL_RCC_OscConfig+0x9c8>
 8001442:	e07f      	b.n	8001544 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff f832 	bl	80004ac <HAL_GetTick>
 8001448:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144c:	e00b      	b.n	8001466 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff f82d 	bl	80004ac <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e2c4      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
 8001466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800146a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800146e:	2202      	movs	r2, #2
 8001470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001476:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	fa93 f2a3 	rbit	r2, r3
 8001480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001484:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80014ac:	601a      	str	r2, [r3, #0]
  return result;
 80014ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80014b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d102      	bne.n	80014d2 <HAL_RCC_OscConfig+0xb4e>
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	e013      	b.n	80014fa <HAL_RCC_OscConfig+0xb76>
 80014d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80014fe:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001502:	2102      	movs	r1, #2
 8001504:	6011      	str	r1, [r2, #0]
 8001506:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800150a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	fa92 f1a2 	rbit	r1, r2
 8001514:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001518:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800151c:	6011      	str	r1, [r2, #0]
  return result;
 800151e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001522:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	fab2 f282 	clz	r2, r2
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	f002 021f 	and.w	r2, r2, #31
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d184      	bne.n	800144e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001544:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154c:	4b23      	ldr	r3, [pc, #140]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 8001552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001556:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8242 	beq.w	80019ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <HAL_RCC_OscConfig+0xc58>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	f000 8213 	beq.w	800199e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b02      	cmp	r3, #2
 8001586:	f040 8162 	bne.w	800184e <HAL_RCC_OscConfig+0xeca>
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001592:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80015ae:	601a      	str	r2, [r3, #0]
  return result;
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80015b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	461a      	mov	r2, r3
 80015cc:	2300      	movs	r3, #0
 80015ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7fe ff6c 	bl	80004ac <HAL_GetTick>
 80015d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	e00c      	b.n	80015f4 <HAL_RCC_OscConfig+0xc70>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7fe ff64 	bl	80004ac <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1fd      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
 80015f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80015fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001606:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001618:	601a      	str	r2, [r3, #0]
  return result;
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001622:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	b2db      	uxtb	r3, r3
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <HAL_RCC_OscConfig+0xcba>
 8001638:	4bb0      	ldr	r3, [pc, #704]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	e027      	b.n	800168e <HAL_RCC_OscConfig+0xd0a>
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800164a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001668:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800166c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001676:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fa93 f2a3 	rbit	r2, r3
 8001680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001684:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	4b9c      	ldr	r3, [pc, #624]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001692:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001696:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800169a:	6011      	str	r1, [r2, #0]
 800169c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	fa92 f1a2 	rbit	r1, r2
 80016aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016ae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80016b2:	6011      	str	r1, [r2, #0]
  return result;
 80016b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	fab2 f282 	clz	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f042 0220 	orr.w	r2, r2, #32
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f002 021f 	and.w	r2, r2, #31
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d182      	bne.n	80015e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016da:	4b88      	ldr	r3, [pc, #544]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80016ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	497f      	ldr	r1, [pc, #508]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800170a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001714:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fa93 f2a3 	rbit	r2, r3
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001726:	601a      	str	r2, [r3, #0]
  return result;
 8001728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001730:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800173c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	461a      	mov	r2, r3
 8001744:	2301      	movs	r3, #1
 8001746:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7fe feb0 	bl	80004ac <HAL_GetTick>
 800174c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	e009      	b.n	8001766 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7fe feab 	bl	80004ac <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e144      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800176e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800178a:	601a      	str	r2, [r3, #0]
  return result;
 800178c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001790:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0xe2c>
 80017aa:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e027      	b.n	8001800 <HAL_RCC_OscConfig+0xe7c>
 80017b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80017b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80017de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001804:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001808:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800180c:	6011      	str	r1, [r2, #0]
 800180e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001812:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fa92 f1a2 	rbit	r1, r2
 800181c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001820:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001824:	6011      	str	r1, [r2, #0]
  return result;
 8001826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800182a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d082      	beq.n	8001752 <HAL_RCC_OscConfig+0xdce>
 800184c:	e0cf      	b.n	80019ee <HAL_RCC_OscConfig+0x106a>
 800184e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001852:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001856:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800185a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001860:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	fa93 f2a3 	rbit	r2, r3
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001872:	601a      	str	r2, [r3, #0]
  return result;
 8001874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001878:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800187c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	fab3 f383 	clz	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001888:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	461a      	mov	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7fe fe0a 	bl	80004ac <HAL_GetTick>
 8001898:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7fe fe05 	bl	80004ac <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e09e      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
 80018b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80018ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	fa93 f2a3 	rbit	r2, r3
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80018d6:	601a      	str	r2, [r3, #0]
  return result;
 80018d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018dc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80018e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d104      	bne.n	8001900 <HAL_RCC_OscConfig+0xf7c>
 80018f6:	4b01      	ldr	r3, [pc, #4]	@ (80018fc <HAL_RCC_OscConfig+0xf78>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e029      	b.n	8001950 <HAL_RCC_OscConfig+0xfcc>
 80018fc:	40021000 	.word	0x40021000
 8001900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001904:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001908:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001912:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800192e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001938:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	fa93 f2a3 	rbit	r2, r3
 8001942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001946:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_RCC_OscConfig+0x1078>)
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001954:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001958:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001962:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001970:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001974:	6011      	str	r1, [r2, #0]
  return result;
 8001976:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800197a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	fab2 f282 	clz	r2, r2
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f042 0220 	orr.w	r2, r2, #32
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f002 021f 	and.w	r2, r2, #31
 8001990:	2101      	movs	r1, #1
 8001992:	fa01 f202 	lsl.w	r2, r1, r2
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d180      	bne.n	800189e <HAL_RCC_OscConfig+0xf1a>
 800199c:	e027      	b.n	80019ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e01e      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_RCC_OscConfig+0x1078>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d10b      	bne.n	80019ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b09e      	sub	sp, #120	@ 0x78
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e162      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b90      	ldr	r3, [pc, #576]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d910      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b8d      	ldr	r3, [pc, #564]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 0207 	bic.w	r2, r3, #7
 8001a2e:	498b      	ldr	r1, [pc, #556]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b89      	ldr	r3, [pc, #548]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e14a      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b82      	ldr	r3, [pc, #520]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	497f      	ldr	r1, [pc, #508]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80dc 	beq.w	8001c2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d13c      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xf6>
 8001a7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xa6>
 8001aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e00f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xc6>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ac2:	4b67      	ldr	r3, [pc, #412]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ace:	fa92 f2a2 	rbit	r2, r2
 8001ad2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ad4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ad6:	fab2 f282 	clz	r2, r2
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d17b      	bne.n	8001bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0f3      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d13c      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x178>
 8001afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b06:	fa93 f3a3 	rbit	r3, r3
 8001b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x128>
 8001b22:	4b4f      	ldr	r3, [pc, #316]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e00f      	b.n	8001b48 <HAL_RCC_ClockConfig+0x148>
 8001b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b30:	fa93 f3a3 	rbit	r3, r3
 8001b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b44:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001b4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b50:	fa92 f2a2 	rbit	r2, r2
 8001b54:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001b56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d13a      	bne.n	8001bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b2      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	095b      	lsrs	r3, r3, #5
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x1a0>
 8001b9a:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e00d      	b.n	8001bbc <HAL_RCC_ClockConfig+0x1bc>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bac:	2302      	movs	r3, #2
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	61ba      	str	r2, [r7, #24]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	617a      	str	r2, [r7, #20]
  return result;
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e079      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	491a      	ldr	r1, [pc, #104]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7fe fc56 	bl	80004ac <HAL_GetTick>
 8001c00:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7fe fc52 	bl	80004ac <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e061      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d214      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4906      	ldr	r1, [pc, #24]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <HAL_RCC_ClockConfig+0x25c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e040      	b.n	8001cde <HAL_RCC_ClockConfig+0x2de>
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	491a      	ldr	r1, [pc, #104]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4912      	ldr	r1, [pc, #72]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ca2:	f000 f829 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_RCC_ClockConfig+0x2e8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cb0:	22f0      	movs	r2, #240	@ 0xf0
 8001cb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	fa92 f2a2 	rbit	r2, r2
 8001cba:	60fa      	str	r2, [r7, #12]
  return result;
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	40d3      	lsrs	r3, r2
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_RCC_ClockConfig+0x2ec>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	fa21 f303 	lsr.w	r3, r1, r3
 8001cce:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <HAL_RCC_ClockConfig+0x2f0>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_RCC_ClockConfig+0x2f4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fba4 	bl	8000424 <HAL_InitTick>
  
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3778      	adds	r7, #120	@ 0x78
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08001e3c 	.word	0x08001e3c
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b08b      	sub	sp, #44	@ 0x2c
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d12:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x30>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x36>
 8001d26:	e03c      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d2a:	623b      	str	r3, [r7, #32]
      break;
 8001d2c:	e03c      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001d34:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001d38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	fa92 f2a2 	rbit	r2, r2
 8001d40:	607a      	str	r2, [r7, #4]
  return result;
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	40d3      	lsrs	r3, r2
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	fa92 f2a2 	rbit	r2, r2
 8001d64:	60fa      	str	r2, [r7, #12]
  return result;
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	40d3      	lsrs	r3, r2
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d80:	4a0e      	ldr	r2, [pc, #56]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d90:	e004      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	623b      	str	r3, [r7, #32]
      break;
 8001da0:	e002      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001da4:	623b      	str	r3, [r7, #32]
      break;
 8001da6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	372c      	adds	r7, #44	@ 0x2c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	08001e4c 	.word	0x08001e4c
 8001dc4:	08001e5c 	.word	0x08001e5c
 8001dc8:	003d0900 	.word	0x003d0900

08001dcc <memset>:
 8001dcc:	4402      	add	r2, r0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <memset+0xa>
 8001dd4:	4770      	bx	lr
 8001dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dda:	e7f9      	b.n	8001dd0 <memset+0x4>

08001ddc <__libc_init_array>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	4d0d      	ldr	r5, [pc, #52]	@ (8001e14 <__libc_init_array+0x38>)
 8001de0:	4c0d      	ldr	r4, [pc, #52]	@ (8001e18 <__libc_init_array+0x3c>)
 8001de2:	1b64      	subs	r4, r4, r5
 8001de4:	10a4      	asrs	r4, r4, #2
 8001de6:	2600      	movs	r6, #0
 8001de8:	42a6      	cmp	r6, r4
 8001dea:	d109      	bne.n	8001e00 <__libc_init_array+0x24>
 8001dec:	4d0b      	ldr	r5, [pc, #44]	@ (8001e1c <__libc_init_array+0x40>)
 8001dee:	4c0c      	ldr	r4, [pc, #48]	@ (8001e20 <__libc_init_array+0x44>)
 8001df0:	f000 f818 	bl	8001e24 <_init>
 8001df4:	1b64      	subs	r4, r4, r5
 8001df6:	10a4      	asrs	r4, r4, #2
 8001df8:	2600      	movs	r6, #0
 8001dfa:	42a6      	cmp	r6, r4
 8001dfc:	d105      	bne.n	8001e0a <__libc_init_array+0x2e>
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e04:	4798      	blx	r3
 8001e06:	3601      	adds	r6, #1
 8001e08:	e7ee      	b.n	8001de8 <__libc_init_array+0xc>
 8001e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0e:	4798      	blx	r3
 8001e10:	3601      	adds	r6, #1
 8001e12:	e7f2      	b.n	8001dfa <__libc_init_array+0x1e>
 8001e14:	08001e6c 	.word	0x08001e6c
 8001e18:	08001e6c 	.word	0x08001e6c
 8001e1c:	08001e6c 	.word	0x08001e6c
 8001e20:	08001e70 	.word	0x08001e70

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
