
LED Blink Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000168c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017bc  080017bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080017bc  080017bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017bc  080017bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017bc  080017bc  000117bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017c0  080017c0  000117c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  080017d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080017d0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045d5  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001224  00000000  00000000  0002460a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  00025830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000460  00000000  00000000  00025d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162f8  00000000  00000000  00026198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ea3  00000000  00000000  0003c490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080c45  00000000  00000000  00042333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2f78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001228  00000000  00000000  000c2fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001780 	.word	0x08001780

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001780 	.word	0x08001780

0800014c <main>:
  * @brief  The application entry point.
  * @retval int
  */
uint32_t Adc_Val;
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f96e 	bl	8000430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f89c 	bl	8000294 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f85c 	bl	8000218 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Adc_Val = HAL_ADC_GetValue(&hadc1);
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000162:	f000 fa9f 	bl	80006a4 <HAL_ADC_GetValue>
 8000166:	4603      	mov	r3, r0
 8000168:	4a02      	ldr	r2, [pc, #8]	; (8000174 <main+0x28>)
 800016a:	6013      	str	r3, [r2, #0]
 800016c:	e7f8      	b.n	8000160 <main+0x14>
 800016e:	bf00      	nop
 8000170:	20000028 	.word	0x20000028
 8000174:	20000058 	.word	0x20000058

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 faf2 	bl	8001770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a8:	2302      	movs	r3, #2
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001b0:	2310      	movs	r3, #16
 80001b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f000 fe1f 	bl	8000e00 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001c8:	f000 f87a 	bl	80002c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001d0:	2300      	movs	r3, #0
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 f88c 	bl	8001304 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80001f2:	f000 f865 	bl	80002c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80001f6:	2302      	movs	r3, #2
 80001f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4618      	mov	r0, r3
 8000202:	f001 f9db 	bl	80015bc <HAL_RCCEx_PeriphCLKConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800020c:	f000 f858 	bl	80002c0 <Error_Handler>
  }
}
 8000210:	bf00      	nop
 8000212:	3750      	adds	r7, #80	; 0x50
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <MX_ADC1_Init+0x74>)
 800022a:	4a19      	ldr	r2, [pc, #100]	; (8000290 <MX_ADC1_Init+0x78>)
 800022c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <MX_ADC1_Init+0x74>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <MX_ADC1_Init+0x74>)
 8000236:	2201      	movs	r2, #1
 8000238:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <MX_ADC1_Init+0x74>)
 8000242:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000246:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_ADC1_Init+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_ADC1_Init+0x74>)
 8000250:	2201      	movs	r2, #1
 8000252:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <MX_ADC1_Init+0x74>)
 8000256:	f000 f94d 	bl	80004f4 <HAL_ADC_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000260:	f000 f82e 	bl	80002c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000268:	2301      	movs	r3, #1
 800026a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4619      	mov	r1, r3
 8000274:	4805      	ldr	r0, [pc, #20]	; (800028c <MX_ADC1_Init+0x74>)
 8000276:	f000 fa21 	bl	80006bc <HAL_ADC_ConfigChannel>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000280:	f000 f81e 	bl	80002c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000028 	.word	0x20000028
 8000290:	40012400 	.word	0x40012400

08000294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_GPIO_Init+0x28>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_GPIO_Init+0x28>)
 80002a0:	f043 0304 	orr.w	r3, r3, #4
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_GPIO_Init+0x28>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0304 	and.w	r3, r3, #4
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
}
 80002c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <Error_Handler+0x8>
	...

080002cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <HAL_MspInit+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <HAL_MspInit+0x40>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <HAL_MspInit+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <HAL_MspInit+0x40>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <HAL_MspInit+0x40>)
 80002f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f4:	61d3      	str	r3, [r2, #28]
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_MspInit+0x40>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	40021000 	.word	0x40021000

08000310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_ADC_MspInit+0x6c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d121      	bne.n	8000374 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000330:	4b13      	ldr	r3, [pc, #76]	; (8000380 <HAL_ADC_MspInit+0x70>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a12      	ldr	r2, [pc, #72]	; (8000380 <HAL_ADC_MspInit+0x70>)
 8000336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b10      	ldr	r3, [pc, #64]	; (8000380 <HAL_ADC_MspInit+0x70>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <HAL_ADC_MspInit+0x70>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <HAL_ADC_MspInit+0x70>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <HAL_ADC_MspInit+0x70>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	60bb      	str	r3, [r7, #8]
 800035e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Read_Sensor_Value_Pin;
 8000360:	2301      	movs	r3, #1
 8000362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000364:	2303      	movs	r3, #3
 8000366:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Read_Sensor_Value_GPIO_Port, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <HAL_ADC_MspInit+0x74>)
 8000370:	f000 fbc2 	bl	8000af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000374:	bf00      	nop
 8000376:	3720      	adds	r7, #32
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40012400 	.word	0x40012400
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler+0x4>

0800038e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler+0x4>

0800039a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ce:	f000 f875 	bl	80004bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
	...

080003e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e4:	f7ff fff7 	bl	80003d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480b      	ldr	r0, [pc, #44]	; (8000418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003ea:	490c      	ldr	r1, [pc, #48]	; (800041c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003ec:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a09      	ldr	r2, [pc, #36]	; (8000424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000400:	4c09      	ldr	r4, [pc, #36]	; (8000428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040e:	f001 f98b 	bl	8001728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000412:	f7ff fe9b 	bl	800014c <main>
  bx lr
 8000416:	4770      	bx	lr
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000420:	080017c4 	.word	0x080017c4
  ldr r2, =_sbss
 8000424:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000428:	20000060 	.word	0x20000060

0800042c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC1_2_IRQHandler>
	...

08000430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <HAL_Init+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <HAL_Init+0x28>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000440:	2003      	movs	r0, #3
 8000442:	f000 fb25 	bl	8000a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000446:	200f      	movs	r0, #15
 8000448:	f000 f808 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800044c:	f7ff ff3e 	bl	80002cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40022000 	.word	0x40022000

0800045c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_InitTick+0x54>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <HAL_InitTick+0x58>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	4619      	mov	r1, r3
 800046e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000472:	fbb3 f3f1 	udiv	r3, r3, r1
 8000476:	fbb2 f3f3 	udiv	r3, r2, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fb2f 	bl	8000ade <HAL_SYSTICK_Config>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000486:	2301      	movs	r3, #1
 8000488:	e00e      	b.n	80004a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2b0f      	cmp	r3, #15
 800048e:	d80a      	bhi.n	80004a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000490:	2200      	movs	r2, #0
 8000492:	6879      	ldr	r1, [r7, #4]
 8000494:	f04f 30ff 	mov.w	r0, #4294967295
 8000498:	f000 fb05 	bl	8000aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <HAL_InitTick+0x5c>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
 80004a4:	e000      	b.n	80004a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000008 	.word	0x20000008
 80004b8:	20000004 	.word	0x20000004

080004bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_IncTick+0x1c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <HAL_IncTick+0x20>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a03      	ldr	r2, [pc, #12]	; (80004dc <HAL_IncTick+0x20>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000008 	.word	0x20000008
 80004dc:	2000005c 	.word	0x2000005c

080004e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  return uwTick;
 80004e4:	4b02      	ldr	r3, [pc, #8]	; (80004f0 <HAL_GetTick+0x10>)
 80004e6:	681b      	ldr	r3, [r3, #0]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	2000005c 	.word	0x2000005c

080004f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d101      	bne.n	8000516 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e0be      	b.n	8000694 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000520:	2b00      	cmp	r3, #0
 8000522:	d109      	bne.n	8000538 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2200      	movs	r2, #0
 800052e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff feec 	bl	8000310 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f9b7 	bl	80008ac <ADC_ConversionStop_Disable>
 800053e:	4603      	mov	r3, r0
 8000540:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000546:	f003 0310 	and.w	r3, r3, #16
 800054a:	2b00      	cmp	r3, #0
 800054c:	f040 8099 	bne.w	8000682 <HAL_ADC_Init+0x18e>
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	2b00      	cmp	r3, #0
 8000554:	f040 8095 	bne.w	8000682 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800055c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000560:	f023 0302 	bic.w	r3, r3, #2
 8000564:	f043 0202 	orr.w	r2, r3, #2
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000574:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b1b      	ldrb	r3, [r3, #12]
 800057a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800057c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	4313      	orrs	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800058c:	d003      	beq.n	8000596 <HAL_ADC_Init+0xa2>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d102      	bne.n	800059c <HAL_ADC_Init+0xa8>
 8000596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059a:	e000      	b.n	800059e <HAL_ADC_Init+0xaa>
 800059c:	2300      	movs	r3, #0
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7d1b      	ldrb	r3, [r3, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d119      	bne.n	80005e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7b1b      	ldrb	r3, [r3, #12]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	035a      	lsls	r2, r3, #13
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	e00b      	b.n	80005e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	f043 0220 	orr.w	r2, r3, #32
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d8:	f043 0201 	orr.w	r2, r3, #1
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <HAL_ADC_Init+0x1a8>)
 80005fc:	4013      	ands	r3, r2
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	68b9      	ldr	r1, [r7, #8]
 8000604:	430b      	orrs	r3, r1
 8000606:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000610:	d003      	beq.n	800061a <HAL_ADC_Init+0x126>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d104      	bne.n	8000624 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	691b      	ldr	r3, [r3, #16]
 800061e:	3b01      	subs	r3, #1
 8000620:	051b      	lsls	r3, r3, #20
 8000622:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	430a      	orrs	r2, r1
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_ADC_Init+0x1ac>)
 8000640:	4013      	ands	r3, r2
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d10b      	bne.n	8000660 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800065e:	e018      	b.n	8000692 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000664:	f023 0312 	bic.w	r3, r3, #18
 8000668:	f043 0210 	orr.w	r2, r3, #16
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000674:	f043 0201 	orr.w	r2, r3, #1
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000680:	e007      	b.n	8000692 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000686:	f043 0210 	orr.w	r2, r3, #16
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000692:	7dfb      	ldrb	r3, [r7, #23]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	ffe1f7fd 	.word	0xffe1f7fd
 80006a0:	ff1f0efe 	.word	0xff1f0efe

080006a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d101      	bne.n	80006dc <HAL_ADC_ConfigChannel+0x20>
 80006d8:	2302      	movs	r3, #2
 80006da:	e0dc      	b.n	8000896 <HAL_ADC_ConfigChannel+0x1da>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	d81c      	bhi.n	8000726 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	3b05      	subs	r3, #5
 80006fe:	221f      	movs	r2, #31
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	43db      	mvns	r3, r3
 8000706:	4019      	ands	r1, r3
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	3b05      	subs	r3, #5
 8000718:	fa00 f203 	lsl.w	r2, r0, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	430a      	orrs	r2, r1
 8000722:	635a      	str	r2, [r3, #52]	; 0x34
 8000724:	e03c      	b.n	80007a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b0c      	cmp	r3, #12
 800072c:	d81c      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	3b23      	subs	r3, #35	; 0x23
 8000740:	221f      	movs	r2, #31
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43db      	mvns	r3, r3
 8000748:	4019      	ands	r1, r3
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	3b23      	subs	r3, #35	; 0x23
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	631a      	str	r2, [r3, #48]	; 0x30
 8000766:	e01b      	b.n	80007a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b41      	subs	r3, #65	; 0x41
 800077a:	221f      	movs	r2, #31
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	4019      	ands	r1, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	6818      	ldr	r0, [r3, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	3b41      	subs	r3, #65	; 0x41
 8000794:	fa00 f203 	lsl.w	r2, r0, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	430a      	orrs	r2, r1
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b09      	cmp	r3, #9
 80007a6:	d91c      	bls.n	80007e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68d9      	ldr	r1, [r3, #12]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	3b1e      	subs	r3, #30
 80007ba:	2207      	movs	r2, #7
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4019      	ands	r1, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	6898      	ldr	r0, [r3, #8]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4413      	add	r3, r2
 80007d2:	3b1e      	subs	r3, #30
 80007d4:	fa00 f203 	lsl.w	r2, r0, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	e019      	b.n	8000816 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6919      	ldr	r1, [r3, #16]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4613      	mov	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	2207      	movs	r2, #7
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	4019      	ands	r1, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	6898      	ldr	r0, [r3, #8]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	fa00 f203 	lsl.w	r2, r0, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	430a      	orrs	r2, r1
 8000814:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b10      	cmp	r3, #16
 800081c:	d003      	beq.n	8000826 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000822:	2b11      	cmp	r3, #17
 8000824:	d132      	bne.n	800088c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1d      	ldr	r2, [pc, #116]	; (80008a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d125      	bne.n	800087c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800083a:	2b00      	cmp	r3, #0
 800083c:	d126      	bne.n	800088c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800084c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b10      	cmp	r3, #16
 8000854:	d11a      	bne.n	800088c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9a      	lsrs	r2, r3, #18
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800086c:	e002      	b.n	8000874 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3b01      	subs	r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f9      	bne.n	800086e <HAL_ADC_ConfigChannel+0x1b2>
 800087a:	e007      	b.n	800088c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	f043 0220 	orr.w	r2, r3, #32
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40012400 	.word	0x40012400
 80008a4:	20000000 	.word	0x20000000
 80008a8:	431bde83 	.word	0x431bde83

080008ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12e      	bne.n	8000924 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f022 0201 	bic.w	r2, r2, #1
 80008d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80008d6:	f7ff fe03 	bl	80004e0 <HAL_GetTick>
 80008da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008dc:	e01b      	b.n	8000916 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008de:	f7ff fdff 	bl	80004e0 <HAL_GetTick>
 80008e2:	4602      	mov	r2, r0
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d914      	bls.n	8000916 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10d      	bne.n	8000916 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fe:	f043 0210 	orr.w	r2, r3, #16
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	f043 0201 	orr.w	r2, r3, #1
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e007      	b.n	8000926 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b01      	cmp	r3, #1
 8000922:	d0dc      	beq.n	80008de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	; (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a5c:	d301      	bcc.n	8000a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00f      	b.n	8000a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <SysTick_Config+0x40>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f7ff ff90 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <SysTick_Config+0x40>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Config+0x40>)
 8000a7c:	2207      	movs	r2, #7
 8000a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff49 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5e 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb0 	bl	8000a4c <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b08b      	sub	sp, #44	; 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e169      	b.n	8000de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	f040 8158 	bne.w	8000dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	4a9a      	ldr	r2, [pc, #616]	; (8000d98 <HAL_GPIO_Init+0x2a0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d05e      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b34:	4a98      	ldr	r2, [pc, #608]	; (8000d98 <HAL_GPIO_Init+0x2a0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d875      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b3a:	4a98      	ldr	r2, [pc, #608]	; (8000d9c <HAL_GPIO_Init+0x2a4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d058      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b40:	4a96      	ldr	r2, [pc, #600]	; (8000d9c <HAL_GPIO_Init+0x2a4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d86f      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b46:	4a96      	ldr	r2, [pc, #600]	; (8000da0 <HAL_GPIO_Init+0x2a8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d052      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b4c:	4a94      	ldr	r2, [pc, #592]	; (8000da0 <HAL_GPIO_Init+0x2a8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d869      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b52:	4a94      	ldr	r2, [pc, #592]	; (8000da4 <HAL_GPIO_Init+0x2ac>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d04c      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b58:	4a92      	ldr	r2, [pc, #584]	; (8000da4 <HAL_GPIO_Init+0x2ac>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d863      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b5e:	4a92      	ldr	r2, [pc, #584]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d046      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
 8000b64:	4a90      	ldr	r2, [pc, #576]	; (8000da8 <HAL_GPIO_Init+0x2b0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d85d      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b6a:	2b12      	cmp	r3, #18
 8000b6c:	d82a      	bhi.n	8000bc4 <HAL_GPIO_Init+0xcc>
 8000b6e:	2b12      	cmp	r3, #18
 8000b70:	d859      	bhi.n	8000c26 <HAL_GPIO_Init+0x12e>
 8000b72:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <HAL_GPIO_Init+0x80>)
 8000b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b78:	08000bf3 	.word	0x08000bf3
 8000b7c:	08000bcd 	.word	0x08000bcd
 8000b80:	08000bdf 	.word	0x08000bdf
 8000b84:	08000c21 	.word	0x08000c21
 8000b88:	08000c27 	.word	0x08000c27
 8000b8c:	08000c27 	.word	0x08000c27
 8000b90:	08000c27 	.word	0x08000c27
 8000b94:	08000c27 	.word	0x08000c27
 8000b98:	08000c27 	.word	0x08000c27
 8000b9c:	08000c27 	.word	0x08000c27
 8000ba0:	08000c27 	.word	0x08000c27
 8000ba4:	08000c27 	.word	0x08000c27
 8000ba8:	08000c27 	.word	0x08000c27
 8000bac:	08000c27 	.word	0x08000c27
 8000bb0:	08000c27 	.word	0x08000c27
 8000bb4:	08000c27 	.word	0x08000c27
 8000bb8:	08000c27 	.word	0x08000c27
 8000bbc:	08000bd5 	.word	0x08000bd5
 8000bc0:	08000be9 	.word	0x08000be9
 8000bc4:	4a79      	ldr	r2, [pc, #484]	; (8000dac <HAL_GPIO_Init+0x2b4>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bca:	e02c      	b.n	8000c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e029      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	623b      	str	r3, [r7, #32]
          break;
 8000bdc:	e024      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	3308      	adds	r3, #8
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e01f      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	330c      	adds	r3, #12
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e01a      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e013      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	611a      	str	r2, [r3, #16]
          break;
 8000c12:	e009      	b.n	8000c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	615a      	str	r2, [r3, #20]
          break;
 8000c1e:	e003      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x130>
          break;
 8000c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	; 0xff
 8000c2c:	d801      	bhi.n	8000c32 <HAL_GPIO_Init+0x13a>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	e001      	b.n	8000c36 <HAL_GPIO_Init+0x13e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2bff      	cmp	r3, #255	; 0xff
 8000c3c:	d802      	bhi.n	8000c44 <HAL_GPIO_Init+0x14c>
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x152>
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	3b08      	subs	r3, #8
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	210f      	movs	r1, #15
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	6a39      	ldr	r1, [r7, #32]
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	431a      	orrs	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80b1 	beq.w	8000dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c78:	4b4d      	ldr	r3, [pc, #308]	; (8000db0 <HAL_GPIO_Init+0x2b8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a4c      	ldr	r2, [pc, #304]	; (8000db0 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <HAL_GPIO_Init+0x2b8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c90:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <HAL_GPIO_Init+0x2bc>)
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a40      	ldr	r2, [pc, #256]	; (8000db8 <HAL_GPIO_Init+0x2c0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1ec>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3f      	ldr	r2, [pc, #252]	; (8000dbc <HAL_GPIO_Init+0x2c4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e8>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3e      	ldr	r2, [pc, #248]	; (8000dc0 <HAL_GPIO_Init+0x2c8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1e4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a3d      	ldr	r2, [pc, #244]	; (8000dc4 <HAL_GPIO_Init+0x2cc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1e0>
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x1ee>
 8000cd8:	2304      	movs	r3, #4
 8000cda:	e004      	b.n	8000ce6 <HAL_GPIO_Init+0x1ee>
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e002      	b.n	8000ce6 <HAL_GPIO_Init+0x1ee>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce8:	f002 0203 	and.w	r2, r2, #3
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	4093      	lsls	r3, r2
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cf6:	492f      	ldr	r1, [pc, #188]	; (8000db4 <HAL_GPIO_Init+0x2bc>)
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d12:	689a      	ldr	r2, [r3, #8]
 8000d14:	492c      	ldr	r1, [pc, #176]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4928      	ldr	r1, [pc, #160]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d006      	beq.n	8000d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	4922      	ldr	r1, [pc, #136]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60cb      	str	r3, [r1, #12]
 8000d44:	e006      	b.n	8000d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d46:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	491e      	ldr	r1, [pc, #120]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	4918      	ldr	r1, [pc, #96]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4914      	ldr	r1, [pc, #80]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d021      	beq.n	8000dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e021      	b.n	8000dda <HAL_GPIO_Init+0x2e2>
 8000d96:	bf00      	nop
 8000d98:	10320000 	.word	0x10320000
 8000d9c:	10310000 	.word	0x10310000
 8000da0:	10220000 	.word	0x10220000
 8000da4:	10210000 	.word	0x10210000
 8000da8:	10120000 	.word	0x10120000
 8000dac:	10110000 	.word	0x10110000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40011400 	.word	0x40011400
 8000dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_GPIO_Init+0x304>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4909      	ldr	r1, [pc, #36]	; (8000dfc <HAL_GPIO_Init+0x304>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f ae8e 	bne.w	8000b0c <HAL_GPIO_Init+0x14>
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e272      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8087 	beq.w	8000f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e20:	4b92      	ldr	r3, [pc, #584]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 030c 	and.w	r3, r3, #12
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d00c      	beq.n	8000e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e2c:	4b8f      	ldr	r3, [pc, #572]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d112      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
 8000e38:	4b8c      	ldr	r3, [pc, #560]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d10b      	bne.n	8000e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e46:	4b89      	ldr	r3, [pc, #548]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d06c      	beq.n	8000f2c <HAL_RCC_OscConfig+0x12c>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d168      	bne.n	8000f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e24c      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x76>
 8000e68:	4b80      	ldr	r3, [pc, #512]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a7f      	ldr	r2, [pc, #508]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e02e      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0x98>
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7a      	ldr	r2, [pc, #488]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b78      	ldr	r3, [pc, #480]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a77      	ldr	r2, [pc, #476]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e01d      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0xbc>
 8000ea2:	4b72      	ldr	r3, [pc, #456]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a71      	ldr	r2, [pc, #452]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6e      	ldr	r2, [pc, #440]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
 8000ebc:	4b6b      	ldr	r3, [pc, #428]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a6a      	ldr	r2, [pc, #424]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b68      	ldr	r3, [pc, #416]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a67      	ldr	r2, [pc, #412]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fb00 	bl	80004e0 <HAL_GetTick>
 8000ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee2:	e008      	b.n	8000ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fafc 	bl	80004e0 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d901      	bls.n	8000ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e200      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef6:	4b5d      	ldr	r3, [pc, #372]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f0      	beq.n	8000ee4 <HAL_RCC_OscConfig+0xe4>
 8000f02:	e014      	b.n	8000f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff faec 	bl	80004e0 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fae8 	bl	80004e0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e1ec      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	4b53      	ldr	r3, [pc, #332]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x10c>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d063      	beq.n	8001002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f3a:	4b4c      	ldr	r3, [pc, #304]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00b      	beq.n	8000f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f46:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b08      	cmp	r3, #8
 8000f50:	d11c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x18c>
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d116      	bne.n	8000f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x176>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e1c0      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f76:	4b3d      	ldr	r3, [pc, #244]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4939      	ldr	r1, [pc, #228]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8a:	e03a      	b.n	8001002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d020      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff faa1 	bl	80004e0 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fa9d 	bl	80004e0 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e1a1      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4927      	ldr	r1, [pc, #156]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	600b      	str	r3, [r1, #0]
 8000fd4:	e015      	b.n	8001002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fd6:	4b26      	ldr	r3, [pc, #152]	; (8001070 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fa80 	bl	80004e0 <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fe4:	f7ff fa7c 	bl	80004e0 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e180      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d03a      	beq.n	8001084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d019      	beq.n	800104a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_RCC_OscConfig+0x274>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101c:	f7ff fa60 	bl	80004e0 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff fa5c 	bl	80004e0 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e160      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_RCC_OscConfig+0x26c>)
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 fa9c 	bl	8001580 <RCC_Delay>
 8001048:	e01c      	b.n	8001084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_RCC_OscConfig+0x274>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fa46 	bl	80004e0 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001056:	e00f      	b.n	8001078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fa42 	bl	80004e0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d908      	bls.n	8001078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e146      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	42420000 	.word	0x42420000
 8001074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001078:	4b92      	ldr	r3, [pc, #584]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e9      	bne.n	8001058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80a6 	beq.w	80011de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001096:	4b8b      	ldr	r3, [pc, #556]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10d      	bne.n	80010be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	4b88      	ldr	r3, [pc, #544]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a87      	ldr	r2, [pc, #540]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b85      	ldr	r3, [pc, #532]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010be:	4b82      	ldr	r3, [pc, #520]	; (80012c8 <HAL_RCC_OscConfig+0x4c8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ca:	4b7f      	ldr	r3, [pc, #508]	; (80012c8 <HAL_RCC_OscConfig+0x4c8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7e      	ldr	r2, [pc, #504]	; (80012c8 <HAL_RCC_OscConfig+0x4c8>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d6:	f7ff fa03 	bl	80004e0 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010de:	f7ff f9ff 	bl	80004e0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	; 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e103      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	4b75      	ldr	r3, [pc, #468]	; (80012c8 <HAL_RCC_OscConfig+0x4c8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x312>
 8001104:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4a6e      	ldr	r2, [pc, #440]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6213      	str	r3, [r2, #32]
 8001110:	e02d      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x334>
 800111a:	4b6a      	ldr	r3, [pc, #424]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a69      	ldr	r2, [pc, #420]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a66      	ldr	r2, [pc, #408]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f023 0304 	bic.w	r3, r3, #4
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	e01c      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b05      	cmp	r3, #5
 800113a:	d10c      	bne.n	8001156 <HAL_RCC_OscConfig+0x356>
 800113c:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	4a60      	ldr	r2, [pc, #384]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6213      	str	r3, [r2, #32]
 8001148:	4b5e      	ldr	r3, [pc, #376]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a5d      	ldr	r2, [pc, #372]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	e00b      	b.n	800116e <HAL_RCC_OscConfig+0x36e>
 8001156:	4b5b      	ldr	r3, [pc, #364]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d015      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff f9b3 	bl	80004e0 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117c:	e00a      	b.n	8001194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff f9af 	bl	80004e0 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f241 3288 	movw	r2, #5000	; 0x1388
 800118c:	4293      	cmp	r3, r2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e0b1      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0ee      	beq.n	800117e <HAL_RCC_OscConfig+0x37e>
 80011a0:	e014      	b.n	80011cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff f99d 	bl	80004e0 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a8:	e00a      	b.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff f999 	bl	80004e0 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e09b      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c0:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ee      	bne.n	80011aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d2:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8087 	beq.w	80012f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d061      	beq.n	80012b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d146      	bne.n	800128a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <HAL_RCC_OscConfig+0x4cc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001202:	f7ff f96d 	bl	80004e0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff f969 	bl	80004e0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e06d      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d108      	bne.n	8001244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4921      	ldr	r1, [pc, #132]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a19      	ldr	r1, [r3, #32]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	430b      	orrs	r3, r1
 8001256:	491b      	ldr	r1, [pc, #108]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_RCC_OscConfig+0x4cc>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff f93d 	bl	80004e0 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126a:	f7ff f939 	bl	80004e0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e03d      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x46a>
 8001288:	e035      	b.n	80012f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_RCC_OscConfig+0x4cc>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff f926 	bl	80004e0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff f922 	bl	80004e0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e026      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x498>
 80012b6:	e01e      	b.n	80012f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d107      	bne.n	80012d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e019      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40007000 	.word	0x40007000
 80012cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x500>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0d0      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d910      	bls.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 0207 	bic.w	r2, r3, #7
 800132e:	4965      	ldr	r1, [pc, #404]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b63      	ldr	r3, [pc, #396]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0b8      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d020      	beq.n	8001396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800136a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001378:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001384:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	494d      	ldr	r1, [pc, #308]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	4313      	orrs	r3, r2
 8001394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d040      	beq.n	8001424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d115      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e07f      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e073      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d2:	4b3d      	ldr	r3, [pc, #244]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e06b      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f023 0203 	bic.w	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013f4:	f7ff f874 	bl	80004e0 <HAL_GetTick>
 80013f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013fc:	f7ff f870 	bl	80004e0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e053      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 020c 	and.w	r2, r3, #12
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	429a      	cmp	r2, r3
 8001422:	d1eb      	bne.n	80013fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d210      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 0207 	bic.w	r2, r3, #7
 800143a:	4922      	ldr	r1, [pc, #136]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e032      	b.n	80014ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4916      	ldr	r1, [pc, #88]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d009      	beq.n	8001492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001492:	f000 f821 	bl	80014d8 <HAL_RCC_GetSysClockFreq>
 8001496:	4602      	mov	r2, r0
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	490a      	ldr	r1, [pc, #40]	; (80014cc <HAL_RCC_ClockConfig+0x1c8>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	fa22 f303 	lsr.w	r3, r2, r3
 80014aa:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <HAL_RCC_ClockConfig+0x1cc>)
 80014ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_ClockConfig+0x1d0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffd2 	bl	800045c <HAL_InitTick>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08001798 	.word	0x08001798
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_RCC_GetSysClockFreq+0x94>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d002      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x30>
 8001502:	2b08      	cmp	r3, #8
 8001504:	d003      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x36>
 8001506:	e027      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_RCC_GetSysClockFreq+0x98>)
 800150a:	613b      	str	r3, [r7, #16]
      break;
 800150c:	e027      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d010      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_RCC_GetSysClockFreq+0x94>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	0c5b      	lsrs	r3, r3, #17
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_RCC_GetSysClockFreq+0x98>)
 800153a:	fb03 f202 	mul.w	r2, r3, r2
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e004      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_RCC_GetSysClockFreq+0xa4>)
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	613b      	str	r3, [r7, #16]
      break;
 8001556:	e002      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_RCC_GetSysClockFreq+0x98>)
 800155a:	613b      	str	r3, [r7, #16]
      break;
 800155c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800155e:	693b      	ldr	r3, [r7, #16]
}
 8001560:	4618      	mov	r0, r3
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	007a1200 	.word	0x007a1200
 8001574:	080017a8 	.word	0x080017a8
 8001578:	080017b8 	.word	0x080017b8
 800157c:	003d0900 	.word	0x003d0900

08001580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <RCC_Delay+0x34>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <RCC_Delay+0x38>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0a5b      	lsrs	r3, r3, #9
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800159c:	bf00      	nop
  }
  while (Delay --);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	60fa      	str	r2, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f9      	bne.n	800159c <RCC_Delay+0x1c>
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000000 	.word	0x20000000
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d07d      	beq.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015dc:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10d      	bne.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	61d3      	str	r3, [r2, #28]
 80015f4:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001600:	2301      	movs	r3, #1
 8001602:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d118      	bne.n	8001642 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a42      	ldr	r2, [pc, #264]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161c:	f7fe ff60 	bl	80004e0 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	e008      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001624:	f7fe ff5c 	bl	80004e0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e06d      	b.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02e      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	d027      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001668:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001676:	4a29      	ldr	r2, [pc, #164]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d014      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7fe ff2b 	bl	80004e0 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	e00a      	b.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7fe ff27 	bl	80004e0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	f241 3288 	movw	r2, #5000	; 0x1388
 800169c:	4293      	cmp	r3, r2
 800169e:	d901      	bls.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e036      	b.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ee      	beq.n	800168e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4917      	ldr	r1, [pc, #92]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d105      	bne.n	80016d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	490b      	ldr	r1, [pc, #44]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	4904      	ldr	r1, [pc, #16]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
 8001724:	42420440 	.word	0x42420440

08001728 <__libc_init_array>:
 8001728:	b570      	push	{r4, r5, r6, lr}
 800172a:	2600      	movs	r6, #0
 800172c:	4d0c      	ldr	r5, [pc, #48]	; (8001760 <__libc_init_array+0x38>)
 800172e:	4c0d      	ldr	r4, [pc, #52]	; (8001764 <__libc_init_array+0x3c>)
 8001730:	1b64      	subs	r4, r4, r5
 8001732:	10a4      	asrs	r4, r4, #2
 8001734:	42a6      	cmp	r6, r4
 8001736:	d109      	bne.n	800174c <__libc_init_array+0x24>
 8001738:	f000 f822 	bl	8001780 <_init>
 800173c:	2600      	movs	r6, #0
 800173e:	4d0a      	ldr	r5, [pc, #40]	; (8001768 <__libc_init_array+0x40>)
 8001740:	4c0a      	ldr	r4, [pc, #40]	; (800176c <__libc_init_array+0x44>)
 8001742:	1b64      	subs	r4, r4, r5
 8001744:	10a4      	asrs	r4, r4, #2
 8001746:	42a6      	cmp	r6, r4
 8001748:	d105      	bne.n	8001756 <__libc_init_array+0x2e>
 800174a:	bd70      	pop	{r4, r5, r6, pc}
 800174c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001750:	4798      	blx	r3
 8001752:	3601      	adds	r6, #1
 8001754:	e7ee      	b.n	8001734 <__libc_init_array+0xc>
 8001756:	f855 3b04 	ldr.w	r3, [r5], #4
 800175a:	4798      	blx	r3
 800175c:	3601      	adds	r6, #1
 800175e:	e7f2      	b.n	8001746 <__libc_init_array+0x1e>
 8001760:	080017bc 	.word	0x080017bc
 8001764:	080017bc 	.word	0x080017bc
 8001768:	080017bc 	.word	0x080017bc
 800176c:	080017c0 	.word	0x080017c0

08001770 <memset>:
 8001770:	4603      	mov	r3, r0
 8001772:	4402      	add	r2, r0
 8001774:	4293      	cmp	r3, r2
 8001776:	d100      	bne.n	800177a <memset+0xa>
 8001778:	4770      	bx	lr
 800177a:	f803 1b01 	strb.w	r1, [r3], #1
 800177e:	e7f9      	b.n	8001774 <memset+0x4>

08001780 <_init>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	bf00      	nop
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr

0800178c <_fini>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	bf00      	nop
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr
