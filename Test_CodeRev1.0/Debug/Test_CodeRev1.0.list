
Test_CodeRev1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026dc  080026dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080026f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080026f0  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bc4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001522  00000000  00000000  00028c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  0002a128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002aa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ccd  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072de  00000000  00000000  0003bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00065b0b  00000000  00000000  000432db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a8de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002688  00000000  00000000  000a8e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002694 	.word	0x08002694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002694 	.word	0x08002694

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa2c 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ca 	bl	800036c <MX_GPIO_Init>
  MX_NVIC_Init();
 80001d8:	f000 f869 	bl	80002ae <MX_NVIC_Init>
  MX_TIM1_Init();
 80001dc:	f000 f874 	bl	80002c8 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <main+0x2c>)
 80001e2:	f001 ffd9 	bl	8002198 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2104      	movs	r1, #4
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ee:	f000 fd05 	bl	8000bfc <HAL_GPIO_WritePin>
 80001f2:	e7f8      	b.n	80001e6 <main+0x1e>
 80001f4:	2000002c 	.word	0x2000002c

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09c      	sub	sp, #112	; 0x70
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fa3c 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2230      	movs	r2, #48	; 0x30
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fa2e 	bl	8002684 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure. */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000230:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000248:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800024e:	4618      	mov	r0, r3
 8000250:	f000 fd04 	bl	8000c5c <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f920 	bl	800049e <Error_Handler>
  }
//  /** Initializes the CPU, AHB and APB buses clocks
//  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fbf6 	bl	8001a6c <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f90a 	bl	800049e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800028a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800028e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fdce 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002a2:	f000 f8fc 	bl	800049e <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3770      	adds	r7, #112	; 0x70
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2100      	movs	r1, #0
 80002b6:	2028      	movs	r0, #40	; 0x28
 80002b8:	f000 faf7 	bl	80008aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002bc:	2028      	movs	r0, #40	; 0x28
 80002be:	f000 fb10 	bl	80008e2 <HAL_NVIC_EnableIRQ>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e6:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <MX_TIM1_Init+0x9c>)
 80002e8:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <MX_TIM1_Init+0xa0>)
 80002ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <MX_TIM1_Init+0x9c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f2:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <MX_TIM1_Init+0x9c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6;
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_TIM1_Init+0x9c>)
 80002fa:	2206      	movs	r2, #6
 80002fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fe:	4b19      	ldr	r3, [pc, #100]	; (8000364 <MX_TIM1_Init+0x9c>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_TIM1_Init+0x9c>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <MX_TIM1_Init+0x9c>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000310:	4814      	ldr	r0, [pc, #80]	; (8000364 <MX_TIM1_Init+0x9c>)
 8000312:	f001 ff15 	bl	8002140 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800031c:	f000 f8bf 	bl	800049e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <MX_TIM1_Init+0x9c>)
 800032e:	f001 ff5d 	bl	80021ec <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000338:	f000 f8b1 	bl	800049e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	4619      	mov	r1, r3
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_TIM1_Init+0x9c>)
 800034e:	f002 f90f 	bl	8002570 <HAL_TIMEx_MasterConfigSynchronization>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000358:	f000 f8a1 	bl	800049e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000002c 	.word	0x2000002c
 8000368:	40012c00 	.word	0x40012c00

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 030c 	add.w	r3, r7, #12
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b3e      	ldr	r3, [pc, #248]	; (800047c <MX_GPIO_Init+0x110>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a3d      	ldr	r2, [pc, #244]	; (800047c <MX_GPIO_Init+0x110>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b3b      	ldr	r3, [pc, #236]	; (800047c <MX_GPIO_Init+0x110>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039a:	4b38      	ldr	r3, [pc, #224]	; (800047c <MX_GPIO_Init+0x110>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a37      	ldr	r2, [pc, #220]	; (800047c <MX_GPIO_Init+0x110>)
 80003a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <MX_GPIO_Init+0x110>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b32      	ldr	r3, [pc, #200]	; (800047c <MX_GPIO_Init+0x110>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a31      	ldr	r2, [pc, #196]	; (800047c <MX_GPIO_Init+0x110>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <MX_GPIO_Init+0x110>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	603b      	str	r3, [r7, #0]
 80003c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAMERA_TRIGGER_PIN, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d0:	482b      	ldr	r0, [pc, #172]	; (8000480 <MX_GPIO_Init+0x114>)
 80003d2:	f000 fc13 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_TRIGGER_PIN, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 fc0c 	bl	8000bfc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2104      	movs	r1, #4
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f000 fc06 	bl	8000bfc <HAL_GPIO_WritePin>

//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f000 fc00 	bl	8000bfc <HAL_GPIO_WritePin>



  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = T1_TRIGGER_PIN|T2_TRIGGER_PIN;
 80003fc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000400:	60fb      	str	r3, [r7, #12]
//  GPIO_InitStruct.Pin = T1_TRIGGER_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_GPIO_Init+0x118>)
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	4619      	mov	r1, r3
 8000410:	481b      	ldr	r0, [pc, #108]	; (8000480 <MX_GPIO_Init+0x114>)
 8000412:	f000 fa81 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = CAMERA_TRIGGER_PIN;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	4814      	ldr	r0, [pc, #80]	; (8000480 <MX_GPIO_Init+0x114>)
 8000430:	f000 fa72 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */


   GPIO_InitStruct.Pin = LASER_TRIGGER_PIN |GPIO_PIN_2;
 8000434:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000438:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800043a:	2311      	movs	r3, #17
 800043c:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000442:	2303      	movs	r3, #3
 8000444:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	4619      	mov	r1, r3
 800044c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000450:	f000 fa62 	bl	8000918 <HAL_GPIO_Init>
//     GPIO_InitStruct.Pull = GPIO_NOPULL;
//     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000454:	2320      	movs	r3, #32
 8000456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000458:	2301      	movs	r3, #1
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	4619      	mov	r1, r3
 800046a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046e:	f000 fa53 	bl	8000918 <HAL_GPIO_Init>

}
 8000472:	bf00      	nop
 8000474:	3720      	adds	r7, #32
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	48000400 	.word	0x48000400
 8000484:	10210000 	.word	0x10210000

08000488 <HAL_GPIO_EXTI_Callback>:
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
//	  HAL_GPIO_WritePin(GPIOB, CAMERA_TRIGGER_PIN, GPIO_PIN_RESET); //CAMERA OFF
//
//  }


}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x44>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_MspInit+0x44>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_TIM_Base_MspInit+0x38>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d10b      	bne.n	800051e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a09      	ldr	r2, [pc, #36]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 800050c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <HAL_TIM_Base_MspInit+0x3c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40012c00 	.word	0x40012c00
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <MemManage_Handler+0x4>

0800054e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <UsageFault_Handler+0x4>

0800055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000588:	f000 f894 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000594:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000598:	f000 fb48 	bl	8000c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800059c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005a0:	f000 fb44 	bl	8000c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <SystemInit+0x28>)
 80005ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <SystemInit+0x28>)
 80005b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SystemInit+0x28>)
 80005be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c2:	609a      	str	r2, [r3, #8]
#endif
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800060c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005da:	e003      	b.n	80005e4 <LoopCopyDataInit>

080005dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005e2:	3104      	adds	r1, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005ec:	d3f6      	bcc.n	80005dc <CopyDataInit>
	ldr	r2, =_sbss
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <LoopForever+0x12>)
	b	LoopFillZerobss
 80005f0:	e002      	b.n	80005f8 <LoopFillZerobss>

080005f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f4:	f842 3b04 	str.w	r3, [r2], #4

080005f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <LoopForever+0x16>)
	cmp	r2, r3
 80005fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005fc:	d3f9      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fe:	f7ff ffd3 	bl	80005a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000602:	f002 f81b 	bl	800263c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000606:	f7ff fddf 	bl	80001c8 <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800060c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000610:	080026e4 	.word	0x080026e4
	ldr	r0, =_sdata
 8000614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000618:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800061c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000620:	20000070 	.word	0x20000070

08000624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_IRQHandler>
	...

08000628 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f92b 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f808 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff ff32 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x54>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_InitTick+0x58>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f943 	bl	80008fe <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f90b 	bl	80008aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x5c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000008 	.word	0x20000008
 80006d8:	2000006c 	.word	0x2000006c

080006dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;  
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000006c 	.word	0x2000006c

080006f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	60d3      	str	r3, [r2, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <__NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0b      	blt.n	8000782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4907      	ldr	r1, [pc, #28]	; (8000790 <__NVIC_EnableIRQ+0x38>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	; (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	; (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f003 0307 	and.w	r3, r3, #7
 80007fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f1c3 0307 	rsb	r3, r3, #7
 8000802:	2b04      	cmp	r3, #4
 8000804:	bf28      	it	cs
 8000806:	2304      	movcs	r3, #4
 8000808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3304      	adds	r3, #4
 800080e:	2b06      	cmp	r3, #6
 8000810:	d902      	bls.n	8000818 <NVIC_EncodePriority+0x30>
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3b03      	subs	r3, #3
 8000816:	e000      	b.n	800081a <NVIC_EncodePriority+0x32>
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	43da      	mvns	r2, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	401a      	ands	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000830:	f04f 31ff 	mov.w	r1, #4294967295
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	fa01 f303 	lsl.w	r3, r1, r3
 800083a:	43d9      	mvns	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	4313      	orrs	r3, r2
         );
}
 8000842:	4618      	mov	r0, r3
 8000844:	3724      	adds	r7, #36	; 0x24
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff8e 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff29 	bl	80006f4 <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff3e 	bl	800073c <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff8e 	bl	80007e8 <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5d 	bl	8000794 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff31 	bl	8000758 <__NVIC_EnableIRQ>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa2 	bl	8000850 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000926:	e14e      	b.n	8000bc6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4013      	ands	r3, r2
 8000936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 8140 	beq.w	8000bc0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d00b      	beq.n	8000960 <HAL_GPIO_Init+0x48>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d007      	beq.n	8000960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000954:	2b11      	cmp	r3, #17
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b12      	cmp	r3, #18
 800095e:	d130      	bne.n	80009c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000996:	2201      	movs	r2, #1
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	f003 0201 	and.w	r2, r3, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xea>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d123      	bne.n	8000a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	691a      	ldr	r2, [r3, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0307 	and.w	r3, r3, #7
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	6939      	ldr	r1, [r7, #16]
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2203      	movs	r2, #3
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 0203 	and.w	r2, r3, #3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 809a 	beq.w	8000bc0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8c:	4b55      	ldr	r3, [pc, #340]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a54      	ldr	r2, [pc, #336]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa4:	4a50      	ldr	r2, [pc, #320]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	220f      	movs	r2, #15
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ace:	d013      	beq.n	8000af8 <HAL_GPIO_Init+0x1e0>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <HAL_GPIO_Init+0x2d4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d00d      	beq.n	8000af4 <HAL_GPIO_Init+0x1dc>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a45      	ldr	r2, [pc, #276]	; (8000bf0 <HAL_GPIO_Init+0x2d8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d007      	beq.n	8000af0 <HAL_GPIO_Init+0x1d8>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a44      	ldr	r2, [pc, #272]	; (8000bf4 <HAL_GPIO_Init+0x2dc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d101      	bne.n	8000aec <HAL_GPIO_Init+0x1d4>
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e006      	b.n	8000afa <HAL_GPIO_Init+0x1e2>
 8000aec:	2305      	movs	r3, #5
 8000aee:	e004      	b.n	8000afa <HAL_GPIO_Init+0x1e2>
 8000af0:	2302      	movs	r3, #2
 8000af2:	e002      	b.n	8000afa <HAL_GPIO_Init+0x1e2>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <HAL_GPIO_Init+0x1e2>
 8000af8:	2300      	movs	r3, #0
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	f002 0203 	and.w	r2, r2, #3
 8000b00:	0092      	lsls	r2, r2, #2
 8000b02:	4093      	lsls	r3, r2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b0a:	4937      	ldr	r1, [pc, #220]	; (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3302      	adds	r3, #2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b18:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b3c:	4a2e      	ldr	r2, [pc, #184]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b66:	4a24      	ldr	r2, [pc, #144]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_GPIO_Init+0x2e0>)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f47f aea9 	bne.w	8000928 <HAL_GPIO_Init+0x10>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	48000c00 	.word	0x48000c00
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c38:	695a      	ldr	r2, [r3, #20]
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d006      	beq.n	8000c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc1c 	bl	8000488 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	f000 bef4 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 816a 	beq.w	8000f5a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c86:	4bb3      	ldr	r3, [pc, #716]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d00c      	beq.n	8000cac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c92:	4bb0      	ldr	r3, [pc, #704]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d159      	bne.n	8000d52 <HAL_RCC_OscConfig+0xf6>
 8000c9e:	4bad      	ldr	r3, [pc, #692]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000caa:	d152      	bne.n	8000d52 <HAL_RCC_OscConfig+0xf6>
 8000cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	fab3 f383 	clz	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d102      	bne.n	8000cde <HAL_RCC_OscConfig+0x82>
 8000cd8:	4b9e      	ldr	r3, [pc, #632]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	e015      	b.n	8000d0a <HAL_RCC_OscConfig+0xae>
 8000cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cfa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d06:	4b93      	ldr	r3, [pc, #588]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d0e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d12:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d16:	fa92 f2a2 	rbit	r2, r2
 8000d1a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d1e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	f042 0220 	orr.w	r2, r2, #32
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	f002 021f 	and.w	r2, r2, #31
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 810c 	beq.w	8000f58 <HAL_RCC_OscConfig+0x2fc>
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 8106 	bne.w	8000f58 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f000 be86 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5c:	d106      	bne.n	8000d6c <HAL_RCC_OscConfig+0x110>
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a7c      	ldr	r2, [pc, #496]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e030      	b.n	8000dce <HAL_RCC_OscConfig+0x172>
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x134>
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a76      	ldr	r2, [pc, #472]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b74      	ldr	r3, [pc, #464]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a73      	ldr	r2, [pc, #460]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e01e      	b.n	8000dce <HAL_RCC_OscConfig+0x172>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9a:	d10c      	bne.n	8000db6 <HAL_RCC_OscConfig+0x15a>
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a6c      	ldr	r2, [pc, #432]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b6a      	ldr	r3, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a69      	ldr	r2, [pc, #420]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	e00b      	b.n	8000dce <HAL_RCC_OscConfig+0x172>
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a66      	ldr	r2, [pc, #408]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a63      	ldr	r2, [pc, #396]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dcc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dce:	4b61      	ldr	r3, [pc, #388]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd2:	f023 020f 	bic.w	r2, r3, #15
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	495d      	ldr	r1, [pc, #372]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d059      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc76 	bl	80006dc <HAL_GetTick>
 8000df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df4:	e00a      	b.n	8000e0c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df6:	f7ff fc71 	bl	80006dc <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d902      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f000 be29 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
 8000e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d102      	bne.n	8000e3e <HAL_RCC_OscConfig+0x1e2>
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	e015      	b.n	8000e6a <HAL_RCC_OscConfig+0x20e>
 8000e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e5a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e76:	fa92 f2a2 	rbit	r2, r2
 8000e7a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e7e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e82:	fab2 f282 	clz	r2, r2
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	f042 0220 	orr.w	r2, r2, #32
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	f002 021f 	and.w	r2, r2, #31
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0ab      	beq.n	8000df6 <HAL_RCC_OscConfig+0x19a>
 8000e9e:	e05c      	b.n	8000f5a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fc1c 	bl	80006dc <HAL_GetTick>
 8000ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fc17 	bl	80006dc <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b64      	cmp	r3, #100	; 0x64
 8000eb8:	d902      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f000 bdcf 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
 8000ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ec4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ed4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed8:	fab3 f383 	clz	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x296>
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e015      	b.n	8000f1e <HAL_RCC_OscConfig+0x2c2>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f0e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_RCC_OscConfig+0x2f8>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f22:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f26:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f32:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f36:	fab2 f282 	clz	r2, r2
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	f042 0220 	orr.w	r2, r2, #32
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f002 021f 	and.w	r2, r2, #31
 8000f46:	2101      	movs	r1, #1
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1ab      	bne.n	8000eaa <HAL_RCC_OscConfig+0x24e>
 8000f52:	e002      	b.n	8000f5a <HAL_RCC_OscConfig+0x2fe>
 8000f54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 816f 	beq.w	8001248 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6a:	4bd0      	ldr	r3, [pc, #832]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f76:	4bcd      	ldr	r3, [pc, #820]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d16c      	bne.n	800105c <HAL_RCC_OscConfig+0x400>
 8000f82:	4bca      	ldr	r3, [pc, #808]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d166      	bne.n	800105c <HAL_RCC_OscConfig+0x400>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fa0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa4:	fab3 f383 	clz	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d102      	bne.n	8000fbe <HAL_RCC_OscConfig+0x362>
 8000fb8:	4bbc      	ldr	r3, [pc, #752]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	e013      	b.n	8000fe6 <HAL_RCC_OscConfig+0x38a>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000fd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fe2:	4bb2      	ldr	r3, [pc, #712]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ff0:	fa92 f2a2 	rbit	r2, r2
 8000ff4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ff8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	f002 021f 	and.w	r2, r2, #31
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <HAL_RCC_OscConfig+0x3cc>
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d002      	beq.n	8001028 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f000 bd1b 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	21f8      	movs	r1, #248	; 0xf8
 8001038:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001040:	fa91 f1a1 	rbit	r1, r1
 8001044:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001048:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800104c:	fab1 f181 	clz	r1, r1
 8001050:	b2c9      	uxtb	r1, r1
 8001052:	408b      	lsls	r3, r1
 8001054:	4995      	ldr	r1, [pc, #596]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e0f5      	b.n	8001248 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8085 	beq.w	8001172 <HAL_RCC_OscConfig+0x516>
 8001068:	2301      	movs	r3, #1
 800106a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800107a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	461a      	mov	r2, r3
 8001090:	2301      	movs	r3, #1
 8001092:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fb22 	bl	80006dc <HAL_GetTick>
 8001098:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109e:	f7ff fb1d 	bl	80006dc <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d902      	bls.n	80010b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f000 bcd5 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x488>
 80010de:	4b73      	ldr	r3, [pc, #460]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e013      	b.n	800110c <HAL_RCC_OscConfig+0x4b0>
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	2202      	movs	r2, #2
 800110e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001112:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001116:	fa92 f2a2 	rbit	r2, r2
 800111a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800111e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001122:	fab2 f282 	clz	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f042 0220 	orr.w	r2, r2, #32
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f002 021f 	and.w	r2, r2, #31
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0af      	beq.n	800109e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	21f8      	movs	r1, #248	; 0xf8
 800114e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001156:	fa91 f1a1 	rbit	r1, r1
 800115a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800115e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001162:	fab1 f181 	clz	r1, r1
 8001166:	b2c9      	uxtb	r1, r1
 8001168:	408b      	lsls	r3, r1
 800116a:	4950      	ldr	r1, [pc, #320]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e06a      	b.n	8001248 <HAL_RCC_OscConfig+0x5ec>
 8001172:	2301      	movs	r3, #1
 8001174:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001184:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001192:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	461a      	mov	r2, r3
 800119a:	2300      	movs	r3, #0
 800119c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fa9d 	bl	80006dc <HAL_GetTick>
 80011a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a6:	e00a      	b.n	80011be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fa98 	bl	80006dc <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d902      	bls.n	80011be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	f000 bc50 	b.w	8001a5e <HAL_RCC_OscConfig+0xe02>
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d4:	fab3 f383 	clz	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <HAL_RCC_OscConfig+0x592>
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	e013      	b.n	8001216 <HAL_RCC_OscConfig+0x5ba>
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001206:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_RCC_OscConfig+0x650>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	2202      	movs	r2, #2
 8001218:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800121c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001220:	fa92 f2a2 	rbit	r2, r2
 8001224:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001228:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800122c:	fab2 f282 	clz	r2, r2
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f042 0220 	orr.w	r2, r2, #32
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	f002 021f 	and.w	r2, r2, #31
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1af      	bne.n	80011a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80da 	beq.w	800140c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d069      	beq.n	8001336 <HAL_RCC_OscConfig+0x6da>
 8001262:	2301      	movs	r3, #1
 8001264:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001278:	fab3 f383 	clz	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x654>)
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	461a      	mov	r2, r3
 8001288:	2301      	movs	r3, #1
 800128a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fa26 	bl	80006dc <HAL_GetTick>
 8001290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001294:	e00e      	b.n	80012b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff fa21 	bl	80006dc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d906      	bls.n	80012b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e3d9      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	10908120 	.word	0x10908120
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012ca:	2202      	movs	r2, #2
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fa93 f2a3 	rbit	r2, r3
 80012d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fa93 f2a3 	rbit	r2, r3
 80012f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f6:	4ba5      	ldr	r3, [pc, #660]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80012f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012fe:	2102      	movs	r1, #2
 8001300:	6019      	str	r1, [r3, #0]
 8001302:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fa93 f1a3 	rbit	r1, r3
 800130c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001310:	6019      	str	r1, [r3, #0]
  return result;
 8001312:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	4013      	ands	r3, r2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0b0      	beq.n	8001296 <HAL_RCC_OscConfig+0x63a>
 8001334:	e06a      	b.n	800140c <HAL_RCC_OscConfig+0x7b0>
 8001336:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fa93 f2a3 	rbit	r2, r3
 8001348:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800134c:	601a      	str	r2, [r3, #0]
  return result;
 800134e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001352:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x934>)
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	461a      	mov	r2, r3
 8001364:	2300      	movs	r3, #0
 8001366:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff f9b8 	bl	80006dc <HAL_GetTick>
 800136c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001370:	e009      	b.n	8001386 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff f9b3 	bl	80006dc <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e36b      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 8001386:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800138a:	2202      	movs	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	fa93 f2a3 	rbit	r2, r3
 8001398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	fa93 f2a3 	rbit	r2, r3
 80013b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013ba:	2202      	movs	r2, #2
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f2a3 	rbit	r2, r3
 80013c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80013d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013d6:	2102      	movs	r1, #2
 80013d8:	6019      	str	r1, [r3, #0]
 80013da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	fa93 f1a3 	rbit	r1, r3
 80013e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013e8:	6019      	str	r1, [r3, #0]
  return result;
 80013ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1b2      	bne.n	8001372 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8158 	beq.w	80016cc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <HAL_RCC_OscConfig+0x930>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <HAL_RCC_OscConfig+0x938>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d11a      	bne.n	8001496 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001460:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x938>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_RCC_OscConfig+0x938>)
 8001466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146c:	f7ff f936 	bl	80006dc <HAL_GetTick>
 8001470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	e009      	b.n	800148a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff f931 	bl	80006dc <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2e9      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <HAL_RCC_OscConfig+0x938>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0ef      	beq.n	8001476 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d106      	bne.n	80014ae <HAL_RCC_OscConfig+0x852>
 80014a0:	4b3a      	ldr	r3, [pc, #232]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a39      	ldr	r2, [pc, #228]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	e02f      	b.n	800150e <HAL_RCC_OscConfig+0x8b2>
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x876>
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a33      	ldr	r2, [pc, #204]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4b31      	ldr	r3, [pc, #196]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a30      	ldr	r2, [pc, #192]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e01d      	b.n	800150e <HAL_RCC_OscConfig+0x8b2>
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x89a>
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x8b2>
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a24      	ldr	r2, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x930>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a21      	ldr	r2, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001508:	f023 0304 	bic.w	r3, r3, #4
 800150c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d06b      	beq.n	80015f0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff f8e0 	bl	80006dc <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff f8db 	bl	80006dc <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e291      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 800153a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001568:	601a      	str	r2, [r3, #0]
  return result;
 800156a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800156e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d109      	bne.n	8001598 <HAL_RCC_OscConfig+0x93c>
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <HAL_RCC_OscConfig+0x930>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x958>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	10908120 	.word	0x10908120
 8001594:	40007000 	.word	0x40007000
 8001598:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f2a3 	rbit	r2, r3
 80015aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	4bbb      	ldr	r3, [pc, #748]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015b8:	2102      	movs	r1, #2
 80015ba:	6011      	str	r1, [r2, #0]
 80015bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	fa92 f1a2 	rbit	r1, r2
 80015c6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015ca:	6011      	str	r1, [r2, #0]
  return result;
 80015cc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	fab2 f282 	clz	r2, r2
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	f002 021f 	and.w	r2, r2, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f202 	lsl.w	r2, r1, r2
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d099      	beq.n	8001522 <HAL_RCC_OscConfig+0x8c6>
 80015ee:	e063      	b.n	80016b8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff f874 	bl	80006dc <HAL_GetTick>
 80015f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff f86f 	bl	80006dc <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f241 3288 	movw	r2, #5000	; 0x1388
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e225      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 8001612:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	fa93 f2a3 	rbit	r2, r3
 800163c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001640:	601a      	str	r2, [r3, #0]
  return result;
 8001642:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001646:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0xa06>
 800165c:	4b90      	ldr	r3, [pc, #576]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	e00d      	b.n	800167e <HAL_RCC_OscConfig+0xa22>
 8001662:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	fa93 f2a3 	rbit	r2, r3
 8001674:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001682:	2102      	movs	r1, #2
 8001684:	6011      	str	r1, [r2, #0]
 8001686:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fa92 f1a2 	rbit	r1, r2
 8001690:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001694:	6011      	str	r1, [r2, #0]
  return result;
 8001696:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f002 021f 	and.w	r2, r2, #31
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f202 	lsl.w	r2, r1, r2
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1a0      	bne.n	80015fa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016b8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d105      	bne.n	80016cc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c0:	4b77      	ldr	r3, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a76      	ldr	r2, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80016c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 81c2 	beq.w	8001a5c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d8:	4b71      	ldr	r3, [pc, #452]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	f000 819c 	beq.w	8001a1e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	f040 8114 	bne.w	800191a <HAL_RCC_OscConfig+0xcbe>
 80016f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800170a:	601a      	str	r2, [r3, #0]
  return result;
 800170c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001710:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800171c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	461a      	mov	r2, r3
 8001724:	2300      	movs	r3, #0
 8001726:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7fe ffd8 	bl	80006dc <HAL_GetTick>
 800172c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	e009      	b.n	8001746 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001732:	f7fe ffd3 	bl	80006dc <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e18b      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 8001746:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800174a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800174e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	fa93 f2a3 	rbit	r2, r3
 800175a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800175e:	601a      	str	r2, [r3, #0]
  return result;
 8001760:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001764:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	fab3 f383 	clz	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	095b      	lsrs	r3, r3, #5
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_RCC_OscConfig+0xb24>
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	e01b      	b.n	80017b8 <HAL_RCC_OscConfig+0xb5c>
 8001780:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001784:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800179e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017c0:	6011      	str	r1, [r2, #0]
 80017c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	fa92 f1a2 	rbit	r1, r2
 80017cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017d0:	6011      	str	r1, [r2, #0]
  return result;
 80017d2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	fab2 f282 	clz	r2, r2
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	f042 0220 	orr.w	r2, r2, #32
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	f002 021f 	and.w	r2, r2, #31
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f202 	lsl.w	r2, r1, r2
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d19e      	bne.n	8001732 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	430b      	orrs	r3, r1
 800180a:	4925      	ldr	r1, [pc, #148]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fa93 f2a3 	rbit	r2, r3
 8001824:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001828:	601a      	str	r2, [r3, #0]
  return result;
 800182a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800182e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	461a      	mov	r2, r3
 8001842:	2301      	movs	r3, #1
 8001844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7fe ff49 	bl	80006dc <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001850:	f7fe ff44 	bl	80006dc <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0fc      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 8001864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001868:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800187c:	601a      	str	r2, [r3, #0]
  return result;
 800187e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001882:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0xc48>
 8001898:	4b01      	ldr	r3, [pc, #4]	; (80018a0 <HAL_RCC_OscConfig+0xc44>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	e01e      	b.n	80018dc <HAL_RCC_OscConfig+0xc80>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	4b63      	ldr	r3, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0xe0c>)
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018e4:	6011      	str	r1, [r2, #0]
 80018e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fa92 f1a2 	rbit	r1, r2
 80018f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018f4:	6011      	str	r1, [r2, #0]
  return result;
 80018f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	fab2 f282 	clz	r2, r2
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	f042 0220 	orr.w	r2, r2, #32
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f002 021f 	and.w	r2, r2, #31
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d09b      	beq.n	8001850 <HAL_RCC_OscConfig+0xbf4>
 8001918:	e0a0      	b.n	8001a5c <HAL_RCC_OscConfig+0xe00>
 800191a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	601a      	str	r2, [r3, #0]
  return result;
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001944:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	2300      	movs	r3, #0
 800194e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe fec4 	bl	80006dc <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001958:	e009      	b.n	800196e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195a:	f7fe febf 	bl	80006dc <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e077      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001976:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	601a      	str	r2, [r3, #0]
  return result;
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0xd4c>
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_RCC_OscConfig+0xe0c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd84>
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_OscConfig+0xe0c>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e8:	6011      	str	r1, [r2, #0]
 80019ea:	f107 0210 	add.w	r2, r7, #16
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	fa92 f1a2 	rbit	r1, r2
 80019f4:	f107 020c 	add.w	r2, r7, #12
 80019f8:	6011      	str	r1, [r2, #0]
  return result;
 80019fa:	f107 020c 	add.w	r2, r7, #12
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d19e      	bne.n	800195a <HAL_RCC_OscConfig+0xcfe>
 8001a1c:	e01e      	b.n	8001a5c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e018      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCC_OscConfig+0xe0c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a34:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d108      	bne.n	8001a58 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000

08001a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b09e      	sub	sp, #120	; 0x78
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e162      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	498b      	ldr	r1, [pc, #556]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e14a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	497f      	ldr	r1, [pc, #508]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80dc 	beq.w	8001c98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d13c      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xf6>
 8001ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xa6>
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e00f      	b.n	8001b32 <HAL_RCC_ClockConfig+0xc6>
 8001b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b24:	663b      	str	r3, [r7, #96]	; 0x60
 8001b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b3a:	fa92 f2a2 	rbit	r2, r2
 8001b3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d17b      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0f3      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d13c      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x178>
 8001b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d102      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x128>
 8001b8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	e00f      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x148>
 8001b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9c:	fa93 f3a3 	rbit	r3, r3
 8001ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb0:	4b46      	ldr	r3, [pc, #280]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bbc:	fa92 f2a2 	rbit	r2, r2
 8001bc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	f042 0220 	orr.w	r2, r2, #32
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f002 021f 	and.w	r2, r2, #31
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13a      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b2      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
 8001be4:	2302      	movs	r3, #2
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x1a0>
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e00d      	b.n	8001c28 <HAL_RCC_ClockConfig+0x1bc>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	61ba      	str	r2, [r7, #24]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	fa92 f2a2 	rbit	r2, r2
 8001c32:	617a      	str	r2, [r7, #20]
  return result;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e079      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f023 0203 	bic.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	491a      	ldr	r1, [pc, #104]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c68:	f7fe fd38 	bl	80006dc <HAL_GetTick>
 8001c6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c70:	f7fe fd34 	bl	80006dc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e061      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_ClockConfig+0x260>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 020c 	and.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d1eb      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d214      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4906      	ldr	r1, [pc, #24]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <HAL_RCC_ClockConfig+0x25c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e040      	b.n	8001d4a <HAL_RCC_ClockConfig+0x2de>
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_ClockConfig+0x2e8>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	491a      	ldr	r1, [pc, #104]	; (8001d54 <HAL_RCC_ClockConfig+0x2e8>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x2e8>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4912      	ldr	r1, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d0e:	f000 f829 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d12:	4601      	mov	r1, r0
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_ClockConfig+0x2e8>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	22f0      	movs	r2, #240	; 0xf0
 8001d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	60fa      	str	r2, [r7, #12]
  return result;
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	fab2 f282 	clz	r2, r2
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	40d3      	lsrs	r3, r2
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x2ec>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	fa21 f303 	lsr.w	r3, r1, r3
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_RCC_ClockConfig+0x2f0>)
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_RCC_ClockConfig+0x2f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc86 	bl	8000654 <HAL_InitTick>
  
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3778      	adds	r7, #120	; 0x78
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	080026ac 	.word	0x080026ac
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000004 	.word	0x20000004

08001d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b08b      	sub	sp, #44	; 0x2c
 8001d68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x30>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x36>
 8001d92:	e03c      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d96:	623b      	str	r3, [r7, #32]
      break;
 8001d98:	e03c      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001da0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001da4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	fa92 f2a2 	rbit	r2, r2
 8001dac:	607a      	str	r2, [r7, #4]
  return result;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	40d3      	lsrs	r3, r2
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	60fa      	str	r2, [r7, #12]
  return result;
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	40d3      	lsrs	r3, r2
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	623b      	str	r3, [r7, #32]
      break;
 8001e0c:	e002      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e10:	623b      	str	r3, [r7, #32]
      break;
 8001e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	372c      	adds	r7, #44	; 0x2c
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	007a1200 	.word	0x007a1200
 8001e2c:	080026bc 	.word	0x080026bc
 8001e30:	080026cc 	.word	0x080026cc
 8001e34:	003d0900 	.word	0x003d0900

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b092      	sub	sp, #72	; 0x48
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80d7 	beq.w	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5c:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10e      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	61d3      	str	r3, [r2, #28]
 8001e74:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b45      	ldr	r3, [pc, #276]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fc1d 	bl	80006dc <HAL_GetTick>
 8001ea2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7fe fc19 	bl	80006dc <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e13c      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 8084 	beq.w	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d07c      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2301      	movs	r3, #1
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	461a      	mov	r2, r3
 8001f32:	2300      	movs	r3, #0
 8001f34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f36:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d04b      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fbc9 	bl	80006dc <HAL_GetTick>
 8001f4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fbc5 	bl	80006dc <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0e6      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	61fb      	str	r3, [r7, #28]
  return result;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f92:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	e00d      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	10908100 	.word	0x10908100
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	613a      	str	r2, [r7, #16]
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	fa92 f2a2 	rbit	r2, r2
 8001fbe:	60fa      	str	r2, [r7, #12]
  return result;
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	fab2 f282 	clz	r2, r2
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	f002 021f 	and.w	r2, r2, #31
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0b7      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4954      	ldr	r1, [pc, #336]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a4f      	ldr	r2, [pc, #316]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002002:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002010:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f023 0203 	bic.w	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4947      	ldr	r1, [pc, #284]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800201e:	4313      	orrs	r3, r2
 8002020:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f023 0210 	bic.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4940      	ldr	r1, [pc, #256]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800203c:	4313      	orrs	r3, r2
 800203e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f023 0220 	bic.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	4938      	ldr	r1, [pc, #224]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800205a:	4313      	orrs	r3, r2
 800205c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4931      	ldr	r1, [pc, #196]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002078:	4313      	orrs	r3, r2
 800207a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4929      	ldr	r1, [pc, #164]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	4922      	ldr	r1, [pc, #136]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	491a      	ldr	r1, [pc, #104]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	490b      	ldr	r1, [pc, #44]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800210e:	4313      	orrs	r3, r2
 8002110:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d008      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	4904      	ldr	r1, [pc, #16]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800212c:	4313      	orrs	r3, r2
 800212e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3748      	adds	r7, #72	; 0x48
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01d      	b.n	800218e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe f9c4 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	4619      	mov	r1, r3
 800217e:	4610      	mov	r0, r2
 8002180:	f000 f8ee 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_TIM_Base_Start+0x50>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d00b      	beq.n	80021d2 <HAL_TIM_Base_Start+0x3a>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c0:	d007      	beq.n	80021d2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	00010007 	.word	0x00010007

080021ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_TIM_ConfigClockSource+0x18>
 8002200:	2302      	movs	r3, #2
 8002202:	e0a8      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x16a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d067      	beq.n	8002310 <HAL_TIM_ConfigClockSource+0x124>
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d80b      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x70>
 8002244:	2b10      	cmp	r3, #16
 8002246:	d073      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x144>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d802      	bhi.n	8002252 <HAL_TIM_ConfigClockSource+0x66>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06f      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002250:	e078      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002252:	2b20      	cmp	r3, #32
 8002254:	d06c      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x144>
 8002256:	2b30      	cmp	r3, #48	; 0x30
 8002258:	d06a      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800225a:	e073      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d00d      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x90>
 8002260:	2b70      	cmp	r3, #112	; 0x70
 8002262:	d804      	bhi.n	800226e <HAL_TIM_ConfigClockSource+0x82>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d033      	beq.n	80022d0 <HAL_TIM_ConfigClockSource+0xe4>
 8002268:	2b60      	cmp	r3, #96	; 0x60
 800226a:	d041      	beq.n	80022f0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800226c:	e06a      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	d066      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x156>
 8002274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002278:	d017      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800227a:	e063      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f000 f950 	bl	8002530 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800229e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]
      break;
 80022a8:	e04c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f000 f939 	bl	8002530 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022cc:	609a      	str	r2, [r3, #8]
      break;
 80022ce:	e039      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	461a      	mov	r2, r3
 80022de:	f000 f8ad 	bl	800243c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2150      	movs	r1, #80	; 0x50
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f906 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 80022ee:	e029      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f000 f8cc 	bl	800249a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2160      	movs	r1, #96	; 0x60
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f8f6 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 800230e:	e019      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	461a      	mov	r2, r3
 800231e:	f000 f88d 	bl	800243c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f8e6 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 800232e:	e009      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 f8dd 	bl	80024fa <TIM_ITRx_SetConfig>
      break;
 8002340:	e000      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a2e      	ldr	r2, [pc, #184]	; (800242c <TIM_Base_SetConfig+0xcc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_Base_SetConfig+0x20>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d108      	bne.n	8002392 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a25      	ldr	r2, [pc, #148]	; (800242c <TIM_Base_SetConfig+0xcc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00f      	beq.n	80023ba <TIM_Base_SetConfig+0x5a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x5a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a22      	ldr	r2, [pc, #136]	; (8002430 <TIM_Base_SetConfig+0xd0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x5a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a21      	ldr	r2, [pc, #132]	; (8002434 <TIM_Base_SetConfig+0xd4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x5a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a20      	ldr	r2, [pc, #128]	; (8002438 <TIM_Base_SetConfig+0xd8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	; (800242c <TIM_Base_SetConfig+0xcc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00b      	beq.n	8002410 <TIM_Base_SetConfig+0xb0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <TIM_Base_SetConfig+0xd0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <TIM_Base_SetConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <TIM_Base_SetConfig+0xd4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_Base_SetConfig+0xb0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <TIM_Base_SetConfig+0xd8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40014000 	.word	0x40014000
 8002434:	40014400 	.word	0x40014400
 8002438:	40014800 	.word	0x40014800

0800243c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0201 	bic.w	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 030a 	bic.w	r3, r3, #10
 8002478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800249a:	b480      	push	{r7}
 800249c:	b087      	sub	sp, #28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f023 0210 	bic.w	r2, r3, #16
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	031b      	lsls	r3, r3, #12
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	f043 0307 	orr.w	r3, r3, #7
 800251c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800254a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	431a      	orrs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002584:	2302      	movs	r3, #2
 8002586:	e04f      	b.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d009      	beq.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d004      	beq.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d10c      	bne.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002602:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00
 8002638:	40014000 	.word	0x40014000

0800263c <__libc_init_array>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4e0d      	ldr	r6, [pc, #52]	; (8002674 <__libc_init_array+0x38>)
 8002640:	4c0d      	ldr	r4, [pc, #52]	; (8002678 <__libc_init_array+0x3c>)
 8002642:	1ba4      	subs	r4, r4, r6
 8002644:	10a4      	asrs	r4, r4, #2
 8002646:	2500      	movs	r5, #0
 8002648:	42a5      	cmp	r5, r4
 800264a:	d109      	bne.n	8002660 <__libc_init_array+0x24>
 800264c:	4e0b      	ldr	r6, [pc, #44]	; (800267c <__libc_init_array+0x40>)
 800264e:	4c0c      	ldr	r4, [pc, #48]	; (8002680 <__libc_init_array+0x44>)
 8002650:	f000 f820 	bl	8002694 <_init>
 8002654:	1ba4      	subs	r4, r4, r6
 8002656:	10a4      	asrs	r4, r4, #2
 8002658:	2500      	movs	r5, #0
 800265a:	42a5      	cmp	r5, r4
 800265c:	d105      	bne.n	800266a <__libc_init_array+0x2e>
 800265e:	bd70      	pop	{r4, r5, r6, pc}
 8002660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002664:	4798      	blx	r3
 8002666:	3501      	adds	r5, #1
 8002668:	e7ee      	b.n	8002648 <__libc_init_array+0xc>
 800266a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266e:	4798      	blx	r3
 8002670:	3501      	adds	r5, #1
 8002672:	e7f2      	b.n	800265a <__libc_init_array+0x1e>
 8002674:	080026dc 	.word	0x080026dc
 8002678:	080026dc 	.word	0x080026dc
 800267c:	080026dc 	.word	0x080026dc
 8002680:	080026e0 	.word	0x080026e0

08002684 <memset>:
 8002684:	4402      	add	r2, r0
 8002686:	4603      	mov	r3, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
