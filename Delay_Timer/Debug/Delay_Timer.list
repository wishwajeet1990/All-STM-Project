
Delay_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002994  08002994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080029a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080029a8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009949  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015e2  00000000  00000000  00029985  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002af68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d0  00000000  00000000  0002b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014351  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008764  00000000  00000000  00040511  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f533  00000000  00000000  00048c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c81a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000c8224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800294c 	.word	0x0800294c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800294c 	.word	0x0800294c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9ca 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8c4 	bl	8000360 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f870 	bl	80002bc <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 80001dc:	4802      	ldr	r0, [pc, #8]	; (80001e8 <main+0x20>)
 80001de:	f001 ffa7 	bl	8002130 <HAL_TIM_Base_Start>
  /* Initialize interrupts */
  MX_NVIC_Init();
 80001e2:	f000 f85e 	bl	80002a2 <MX_NVIC_Init>
//  HAL_TIM_Base_Start(&htim1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x1e>
 80001e8:	20000028 	.word	0x20000028

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fb9e 	bl	800293c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2230      	movs	r2, #48	; 0x30
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fb90 	bl	800293c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fcaa 	bl	8000b9c <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 f8c5 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000252:	230f      	movs	r3, #15
 8000254:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fb9c 	bl	80019ac <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 f8af 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800027e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000282:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000284:	2300      	movs	r3, #0
 8000286:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fd74 	bl	8001d78 <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000296:	f000 f8a1 	bl	80003dc <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3770      	adds	r7, #112	; 0x70
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2100      	movs	r1, #0
 80002aa:	2019      	movs	r0, #25
 80002ac:	f000 fa9b 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80002b0:	2019      	movs	r0, #25
 80002b2:	f000 fab4 	bl	800081e <HAL_NVIC_EnableIRQ>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002da:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002dc:	4a1f      	ldr	r2, [pc, #124]	; (800035c <MX_TIM1_Init+0xa0>)
 80002de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6;
 80002ec:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002ee:	2206      	movs	r2, #6
 80002f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f2:	4b19      	ldr	r3, [pc, #100]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_TIM1_Init+0x9c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_TIM1_Init+0x9c>)
 8000300:	2200      	movs	r2, #0
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000304:	4814      	ldr	r0, [pc, #80]	; (8000358 <MX_TIM1_Init+0x9c>)
 8000306:	f001 febb 	bl	8002080 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000310:	f000 f864 	bl	80003dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <MX_TIM1_Init+0x9c>)
 8000322:	f002 f870 	bl	8002406 <HAL_TIM_ConfigClockSource>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800032c:	f000 f856 	bl	80003dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_TIM1_Init+0x9c>)
 8000342:	f002 fa53 	bl	80027ec <HAL_TIMEx_MasterConfigSynchronization>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800034c:	f000 f846 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000028 	.word	0x20000028
 800035c:	40012c00 	.word	0x40012c00

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x78>)
 800037c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x78>)
 8000394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_GPIO_Init+0x78>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2104      	movs	r1, #4
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fbc3 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003b2:	2304      	movs	r3, #4
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f000 fa42 	bl	8000854 <HAL_GPIO_Init>

}
 80003d0:	bf00      	nop
 80003d2:	3720      	adds	r7, #32
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40021000 	.word	0x40021000

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0a      	ldr	r2, [pc, #40]	; (800046c <HAL_TIM_Base_MspInit+0x38>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d10b      	bne.n	800045e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_TIM_Base_MspInit+0x3c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <HAL_TIM_Base_MspInit+0x3c>)
 800044c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <HAL_TIM_Base_MspInit+0x3c>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40012c00 	.word	0x40012c00
 8000470:	40021000 	.word	0x40021000

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f892 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80004d6:	f001 fe77 	bl	80021c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80004da:	2104      	movs	r1, #4
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fb42 	bl	8000b68 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000028 	.word	0x20000028

080004ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <SystemInit+0x20>)
 80004f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <SystemInit+0x20>)
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000548 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f7ff ffd7 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f002 f9d9 	bl	80028f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f7ff fe41 	bl	80001c8 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000548:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000554:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000558:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800055c:	20000078 	.word	0x20000078

08000560 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_IRQHandler>
	...

08000564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f92b 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f808 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff34 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x58>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f943 	bl	800083a <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00e      	b.n	80005dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d80a      	bhi.n	80005da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f90b 	bl	80007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_InitTick+0x5c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	20000074 	.word	0x20000074

08000618 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;  
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000074 	.word	0x20000074

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	e14e      	b.n	8000b02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	2101      	movs	r1, #1
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8140 	beq.w	8000afc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d00b      	beq.n	800089c <HAL_GPIO_Init+0x48>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d007      	beq.n	800089c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000890:	2b11      	cmp	r3, #17
 8000892:	d003      	beq.n	800089c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b12      	cmp	r3, #18
 800089a:	d130      	bne.n	80008fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68da      	ldr	r2, [r3, #12]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d2:	2201      	movs	r2, #1
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	091b      	lsrs	r3, r3, #4
 80008e8:	f003 0201 	and.w	r2, r3, #1
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0xea>
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d123      	bne.n	8000986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3208      	adds	r2, #8
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	6939      	ldr	r1, [r7, #16]
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2203      	movs	r2, #3
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0203 	and.w	r2, r3, #3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 809a 	beq.w	8000afc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e0:	4a50      	ldr	r2, [pc, #320]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	220f      	movs	r2, #15
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a0a:	d013      	beq.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <HAL_GPIO_Init+0x2d4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1dc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <HAL_GPIO_Init+0x2d8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1d8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <HAL_GPIO_Init+0x2dc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1d4>
 8000a24:	2303      	movs	r3, #3
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a28:	2305      	movs	r3, #5
 8000a2a:	e004      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a34:	2300      	movs	r3, #0
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	f002 0203 	and.w	r2, r2, #3
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a46:	4937      	ldr	r1, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a78:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000aa2:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f47f aea9 	bne.w	8000864 <HAL_GPIO_Init+0x10>
  }
}
 8000b12:	bf00      	nop
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000c00 	.word	0x48000c00
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43d9      	mvns	r1, r3
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	400b      	ands	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	f000 bef4 	b.w	800199e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 816a 	beq.w	8000e9a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bc6:	4bb3      	ldr	r3, [pc, #716]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 030c 	and.w	r3, r3, #12
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d00c      	beq.n	8000bec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd2:	4bb0      	ldr	r3, [pc, #704]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 030c 	and.w	r3, r3, #12
 8000bda:	2b08      	cmp	r3, #8
 8000bdc:	d159      	bne.n	8000c92 <HAL_RCC_OscConfig+0xf6>
 8000bde:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bea:	d152      	bne.n	8000c92 <HAL_RCC_OscConfig+0xf6>
 8000bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d102      	bne.n	8000c1e <HAL_RCC_OscConfig+0x82>
 8000c18:	4b9e      	ldr	r3, [pc, #632]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	e015      	b.n	8000c4a <HAL_RCC_OscConfig+0xae>
 8000c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c26:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c56:	fa92 f2a2 	rbit	r2, r2
 8000c5a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	f042 0220 	orr.w	r2, r2, #32
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f002 021f 	and.w	r2, r2, #31
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 810c 	beq.w	8000e98 <HAL_RCC_OscConfig+0x2fc>
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8106 	bne.w	8000e98 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f000 be86 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9c:	d106      	bne.n	8000cac <HAL_RCC_OscConfig+0x110>
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a7c      	ldr	r2, [pc, #496]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e030      	b.n	8000d0e <HAL_RCC_OscConfig+0x172>
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x134>
 8000cb6:	4b77      	ldr	r3, [pc, #476]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b74      	ldr	r3, [pc, #464]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a73      	ldr	r2, [pc, #460]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01e      	b.n	8000d0e <HAL_RCC_OscConfig+0x172>
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cda:	d10c      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x15a>
 8000cdc:	4b6d      	ldr	r3, [pc, #436]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a6c      	ldr	r2, [pc, #432]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a69      	ldr	r2, [pc, #420]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	e00b      	b.n	8000d0e <HAL_RCC_OscConfig+0x172>
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a66      	ldr	r2, [pc, #408]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	4b64      	ldr	r3, [pc, #400]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a63      	ldr	r2, [pc, #396]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d12:	f023 020f 	bic.w	r2, r3, #15
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	495d      	ldr	r1, [pc, #372]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d059      	beq.n	8000de0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fc74 	bl	8000618 <HAL_GetTick>
 8000d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	e00a      	b.n	8000d4c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d36:	f7ff fc6f 	bl	8000618 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	; 0x64
 8000d44:	d902      	bls.n	8000d4c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	f000 be29 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
 8000d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d102      	bne.n	8000d7e <HAL_RCC_OscConfig+0x1e2>
 8000d78:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	e015      	b.n	8000daa <HAL_RCC_OscConfig+0x20e>
 8000d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d8a:	fa93 f3a3 	rbit	r3, r3
 8000d8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d9e:	fa93 f3a3 	rbit	r3, r3
 8000da2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000da6:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000db2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000db6:	fa92 f2a2 	rbit	r2, r2
 8000dba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000dbe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f042 0220 	orr.w	r2, r2, #32
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	f002 021f 	and.w	r2, r2, #31
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0ab      	beq.n	8000d36 <HAL_RCC_OscConfig+0x19a>
 8000dde:	e05c      	b.n	8000e9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc1a 	bl	8000618 <HAL_GetTick>
 8000de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de8:	e00a      	b.n	8000e00 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dea:	f7ff fc15 	bl	8000618 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d902      	bls.n	8000e00 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f000 bdcf 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
 8000e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x296>
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0x2c2>
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e6a:	fa92 f2a2 	rbit	r2, r2
 8000e6e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e76:	fab2 f282 	clz	r2, r2
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	f002 021f 	and.w	r2, r2, #31
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1ab      	bne.n	8000dea <HAL_RCC_OscConfig+0x24e>
 8000e92:	e002      	b.n	8000e9a <HAL_RCC_OscConfig+0x2fe>
 8000e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 816f 	beq.w	8001188 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eaa:	4bd0      	ldr	r3, [pc, #832]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eb6:	4bcd      	ldr	r3, [pc, #820]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d16c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x400>
 8000ec2:	4bca      	ldr	r3, [pc, #808]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d166      	bne.n	8000f9c <HAL_RCC_OscConfig+0x400>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000ed8:	fa93 f3a3 	rbit	r3, r3
 8000edc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ee0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee4:	fab3 f383 	clz	r3, r3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d102      	bne.n	8000efe <HAL_RCC_OscConfig+0x362>
 8000ef8:	4bbc      	ldr	r3, [pc, #752]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	e013      	b.n	8000f26 <HAL_RCC_OscConfig+0x38a>
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f22:	4bb2      	ldr	r3, [pc, #712]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2202      	movs	r2, #2
 8000f28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f30:	fa92 f2a2 	rbit	r2, r2
 8000f34:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f38:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f3c:	fab2 f282 	clz	r2, r2
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	f042 0220 	orr.w	r2, r2, #32
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	f002 021f 	and.w	r2, r2, #31
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <HAL_RCC_OscConfig+0x3cc>
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d002      	beq.n	8000f68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	f000 bd1b 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4ba0      	ldr	r3, [pc, #640]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	21f8      	movs	r1, #248	; 0xf8
 8000f78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f80:	fa91 f1a1 	rbit	r1, r1
 8000f84:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f8c:	fab1 f181 	clz	r1, r1
 8000f90:	b2c9      	uxtb	r1, r1
 8000f92:	408b      	lsls	r3, r1
 8000f94:	4995      	ldr	r1, [pc, #596]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8000f96:	4313      	orrs	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	e0f5      	b.n	8001188 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8085 	beq.w	80010b2 <HAL_RCC_OscConfig+0x516>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fb2:	fa93 f3a3 	rbit	r3, r3
 8000fb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000fba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb20 	bl	8000618 <HAL_GetTick>
 8000fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	e00a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fb1b 	bl	8000618 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d902      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f000 bcd5 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001006:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d102      	bne.n	8001024 <HAL_RCC_OscConfig+0x488>
 800101e:	4b73      	ldr	r3, [pc, #460]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	e013      	b.n	800104c <HAL_RCC_OscConfig+0x4b0>
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800103c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001040:	fa93 f3a3 	rbit	r3, r3
 8001044:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001048:	4b68      	ldr	r3, [pc, #416]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	2202      	movs	r2, #2
 800104e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001052:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001056:	fa92 f2a2 	rbit	r2, r2
 800105a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800105e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f002 021f 	and.w	r2, r2, #31
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0af      	beq.n	8000fde <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107e:	4b5b      	ldr	r3, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	21f8      	movs	r1, #248	; 0xf8
 800108e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001096:	fa91 f1a1 	rbit	r1, r1
 800109a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800109e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010a2:	fab1 f181 	clz	r1, r1
 80010a6:	b2c9      	uxtb	r1, r1
 80010a8:	408b      	lsls	r3, r1
 80010aa:	4950      	ldr	r1, [pc, #320]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	600b      	str	r3, [r1, #0]
 80010b0:	e06a      	b.n	8001188 <HAL_RCC_OscConfig+0x5ec>
 80010b2:	2301      	movs	r3, #1
 80010b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	461a      	mov	r2, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff fa9b 	bl	8000618 <HAL_GetTick>
 80010e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fa96 	bl	8000618 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d902      	bls.n	80010fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f000 bc50 	b.w	800199e <HAL_RCC_OscConfig+0xe02>
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <HAL_RCC_OscConfig+0x592>
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0x5ba>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_RCC_OscConfig+0x650>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2202      	movs	r2, #2
 8001158:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800115c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001160:	fa92 f2a2 	rbit	r2, r2
 8001164:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001168:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1af      	bne.n	80010e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80da 	beq.w	800134c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d069      	beq.n	8001276 <HAL_RCC_OscConfig+0x6da>
 80011a2:	2301      	movs	r3, #1
 80011a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b8:	fab3 f383 	clz	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_RCC_OscConfig+0x654>)
 80011c2:	4413      	add	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	461a      	mov	r2, r3
 80011c8:	2301      	movs	r3, #1
 80011ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fa24 	bl	8000618 <HAL_GetTick>
 80011d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d4:	e00e      	b.n	80011f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fa1f 	bl	8000618 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d906      	bls.n	80011f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e3d9      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	10908120 	.word	0x10908120
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800120a:	2202      	movs	r2, #2
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	fa93 f2a3 	rbit	r2, r3
 8001218:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	fa93 f2a3 	rbit	r2, r3
 8001230:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	4ba5      	ldr	r3, [pc, #660]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800123a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800123e:	2102      	movs	r1, #2
 8001240:	6019      	str	r1, [r3, #0]
 8001242:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	fa93 f1a3 	rbit	r1, r3
 800124c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001250:	6019      	str	r1, [r3, #0]
  return result;
 8001252:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0b0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x63a>
 8001274:	e06a      	b.n	800134c <HAL_RCC_OscConfig+0x7b0>
 8001276:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fa93 f2a3 	rbit	r2, r3
 8001288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800128c:	601a      	str	r2, [r3, #0]
  return result;
 800128e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001292:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff f9b6 	bl	8000618 <HAL_GetTick>
 80012ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	e009      	b.n	80012c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff f9b1 	bl	8000618 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e36b      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 80012c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012ca:	2202      	movs	r2, #2
 80012cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fa93 f2a3 	rbit	r2, r3
 80012d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fa93 f2a3 	rbit	r2, r3
 80012f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012fa:	2202      	movs	r2, #2
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fa93 f2a3 	rbit	r2, r3
 8001308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001312:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001316:	2102      	movs	r1, #2
 8001318:	6019      	str	r1, [r3, #0]
 800131a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	fa93 f1a3 	rbit	r1, r3
 8001324:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001328:	6019      	str	r1, [r3, #0]
  return result;
 800132a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800133a:	b2db      	uxtb	r3, r3
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1b2      	bne.n	80012b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8158 	beq.w	800160c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001362:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d112      	bne.n	8001394 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001382:	f107 0308 	add.w	r3, r7, #8
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800138e:	2301      	movs	r3, #1
 8001390:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11a      	bne.n	80013d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a0:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ac:	f7ff f934 	bl	8000618 <HAL_GetTick>
 80013b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	e009      	b.n	80013ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff f92f 	bl	8000618 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e2e9      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ef      	beq.n	80013b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x852>
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e02f      	b.n	800144e <HAL_RCC_OscConfig+0x8b2>
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x876>
 80013f8:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a33      	ldr	r2, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a30      	ldr	r2, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e01d      	b.n	800144e <HAL_RCC_OscConfig+0x8b2>
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x89a>
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x8b2>
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a24      	ldr	r2, [pc, #144]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d06b      	beq.n	8001530 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff f8de 	bl	8000618 <HAL_GetTick>
 800145c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff f8d9 	bl	8000618 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e291      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 800147a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fa93 f2a3 	rbit	r2, r3
 800148c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001496:	2202      	movs	r2, #2
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014a8:	601a      	str	r2, [r3, #0]
  return result;
 80014aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	fab3 f383 	clz	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d109      	bne.n	80014d8 <HAL_RCC_OscConfig+0x93c>
 80014c4:	4b01      	ldr	r3, [pc, #4]	; (80014cc <HAL_RCC_OscConfig+0x930>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x958>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	10908120 	.word	0x10908120
 80014d4:	40007000 	.word	0x40007000
 80014d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	fa93 f2a3 	rbit	r2, r3
 80014ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	4bbb      	ldr	r3, [pc, #748]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014f8:	2102      	movs	r1, #2
 80014fa:	6011      	str	r1, [r2, #0]
 80014fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	fa92 f1a2 	rbit	r1, r2
 8001506:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800150a:	6011      	str	r1, [r2, #0]
  return result;
 800150c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800151c:	b2d2      	uxtb	r2, r2
 800151e:	f002 021f 	and.w	r2, r2, #31
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d099      	beq.n	8001462 <HAL_RCC_OscConfig+0x8c6>
 800152e:	e063      	b.n	80015f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff f872 	bl	8000618 <HAL_GetTick>
 8001534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff f86d 	bl	8000618 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e225      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 8001552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	fa93 f2a3 	rbit	r2, r3
 800157c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001580:	601a      	str	r2, [r3, #0]
  return result;
 8001582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001586:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d102      	bne.n	80015a2 <HAL_RCC_OscConfig+0xa06>
 800159c:	4b90      	ldr	r3, [pc, #576]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	e00d      	b.n	80015be <HAL_RCC_OscConfig+0xa22>
 80015a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015c2:	2102      	movs	r1, #2
 80015c4:	6011      	str	r1, [r2, #0]
 80015c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	fa92 f1a2 	rbit	r1, r2
 80015d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015d4:	6011      	str	r1, [r2, #0]
  return result;
 80015d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f002 021f 	and.w	r2, r2, #31
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1a0      	bne.n	800153a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b77      	ldr	r3, [pc, #476]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a76      	ldr	r2, [pc, #472]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 8001606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800160a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 81c2 	beq.w	800199c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001618:	4b71      	ldr	r3, [pc, #452]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	f000 819c 	beq.w	800195e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 8114 	bne.w	800185a <HAL_RCC_OscConfig+0xcbe>
 8001632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001636:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800163a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800164a:	601a      	str	r2, [r3, #0]
  return result;
 800164c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001650:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	461a      	mov	r2, r3
 8001664:	2300      	movs	r3, #0
 8001666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7fe ffd6 	bl	8000618 <HAL_GetTick>
 800166c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7fe ffd1 	bl	8000618 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e18b      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 8001686:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800168a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800169e:	601a      	str	r2, [r3, #0]
  return result;
 80016a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <HAL_RCC_OscConfig+0xb24>
 80016ba:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0xb5c>
 80016c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001700:	6011      	str	r1, [r2, #0]
 8001702:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fa92 f1a2 	rbit	r1, r2
 800170c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001710:	6011      	str	r1, [r2, #0]
  return result;
 8001712:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	fab2 f282 	clz	r2, r2
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	f042 0220 	orr.w	r2, r2, #32
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	f002 021f 	and.w	r2, r2, #31
 8001728:	2101      	movs	r1, #1
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d19e      	bne.n	8001672 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	430b      	orrs	r3, r1
 800174a:	4925      	ldr	r1, [pc, #148]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001768:	601a      	str	r2, [r3, #0]
  return result;
 800176a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800176e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001770:	fab3 f383 	clz	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800177a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	461a      	mov	r2, r3
 8001782:	2301      	movs	r3, #1
 8001784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7fe ff47 	bl	8000618 <HAL_GetTick>
 800178a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178e:	e009      	b.n	80017a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7fe ff42 	bl	8000618 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0fc      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 80017a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <HAL_RCC_OscConfig+0xc48>
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <HAL_RCC_OscConfig+0xc44>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	e01e      	b.n	800181c <HAL_RCC_OscConfig+0xc80>
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	fa93 f2a3 	rbit	r2, r3
 8001812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0xe0c>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001824:	6011      	str	r1, [r2, #0]
 8001826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fa92 f1a2 	rbit	r1, r2
 8001830:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001834:	6011      	str	r1, [r2, #0]
  return result;
 8001836:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0220 	orr.w	r2, r2, #32
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d09b      	beq.n	8001790 <HAL_RCC_OscConfig+0xbf4>
 8001858:	e0a0      	b.n	800199c <HAL_RCC_OscConfig+0xe00>
 800185a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	601a      	str	r2, [r3, #0]
  return result;
 8001874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001878:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	461a      	mov	r2, r3
 800188c:	2300      	movs	r3, #0
 800188e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7fe fec2 	bl	8000618 <HAL_GetTick>
 8001894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e009      	b.n	80018ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7fe febd 	bl	8000618 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e077      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	fa93 f2a3 	rbit	r2, r3
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	601a      	str	r2, [r3, #0]
  return result;
 80018c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <HAL_RCC_OscConfig+0xd4c>
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <HAL_RCC_OscConfig+0xe0c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	e01b      	b.n	8001920 <HAL_RCC_OscConfig+0xd84>
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	fa93 f2a3 	rbit	r2, r3
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_RCC_OscConfig+0xe0c>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f107 0210 	add.w	r2, r7, #16
 8001924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001928:	6011      	str	r1, [r2, #0]
 800192a:	f107 0210 	add.w	r2, r7, #16
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	fa92 f1a2 	rbit	r1, r2
 8001934:	f107 020c 	add.w	r2, r7, #12
 8001938:	6011      	str	r1, [r2, #0]
  return result;
 800193a:	f107 020c 	add.w	r2, r7, #12
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	fab2 f282 	clz	r2, r2
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d19e      	bne.n	800189a <HAL_RCC_OscConfig+0xcfe>
 800195c:	e01e      	b.n	800199c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_RCC_OscConfig+0xe0c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001974:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	429a      	cmp	r2, r3
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800198a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09e      	sub	sp, #120	; 0x78
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e162      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b90      	ldr	r3, [pc, #576]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b8d      	ldr	r3, [pc, #564]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	498b      	ldr	r1, [pc, #556]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e14a      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	497f      	ldr	r1, [pc, #508]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80dc 	beq.w	8001bd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d13c      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xf6>
 8001a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a38:	fab3 f383 	clz	r3, r3
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xa6>
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	e00f      	b.n	8001a72 <HAL_RCC_ClockConfig+0xc6>
 8001a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	663b      	str	r3, [r7, #96]	; 0x60
 8001a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a6e:	4b67      	ldr	r3, [pc, #412]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a76:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a7a:	fa92 f2a2 	rbit	r2, r2
 8001a7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0220 	orr.w	r2, r2, #32
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d17b      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0f3      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d13c      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x178>
 8001aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d102      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x128>
 8001ace:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	e00f      	b.n	8001af4 <HAL_RCC_ClockConfig+0x148>
 8001ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001afc:	fa92 f2a2 	rbit	r2, r2
 8001b00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b04:	fab2 f282 	clz	r2, r2
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	f042 0220 	orr.w	r2, r2, #32
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f002 021f 	and.w	r2, r2, #31
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13a      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b2      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
 8001b24:	2302      	movs	r3, #2
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x1a0>
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e00d      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1bc>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	2302      	movs	r3, #2
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2202      	movs	r2, #2
 8001b6a:	61ba      	str	r2, [r7, #24]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	fa92 f2a2 	rbit	r2, r2
 8001b72:	617a      	str	r2, [r7, #20]
  return result;
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	fab2 f282 	clz	r2, r2
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f042 0220 	orr.w	r2, r2, #32
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f002 021f 	and.w	r2, r2, #31
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e079      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f023 0203 	bic.w	r2, r3, #3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	491a      	ldr	r1, [pc, #104]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fd36 	bl	8000618 <HAL_GetTick>
 8001bac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7fe fd32 	bl	8000618 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e061      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 020c 	and.w	r2, r3, #12
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1eb      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d214      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4906      	ldr	r1, [pc, #24]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_RCC_ClockConfig+0x25c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e040      	b.n	8001c8a <HAL_RCC_ClockConfig+0x2de>
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_ClockConfig+0x2e8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	491a      	ldr	r1, [pc, #104]	; (8001c94 <HAL_RCC_ClockConfig+0x2e8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_RCC_ClockConfig+0x2e8>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4912      	ldr	r1, [pc, #72]	; (8001c94 <HAL_RCC_ClockConfig+0x2e8>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c4e:	f000 f829 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c52:	4601      	mov	r1, r0
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_RCC_ClockConfig+0x2e8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5c:	22f0      	movs	r2, #240	; 0xf0
 8001c5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	60fa      	str	r2, [r7, #12]
  return result;
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	40d3      	lsrs	r3, r2
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x2ec>)
 8001c74:	5cd3      	ldrb	r3, [r2, r3]
 8001c76:	fa21 f303 	lsr.w	r3, r1, r3
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_RCC_ClockConfig+0x2f0>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_RCC_ClockConfig+0x2f4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc84 	bl	8000590 <HAL_InitTick>
  
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3778      	adds	r7, #120	; 0x78
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08002964 	.word	0x08002964
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b08b      	sub	sp, #44	; 0x2c
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x36>
 8001cd2:	e03c      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cd6:	623b      	str	r3, [r7, #32]
      break;
 8001cd8:	e03c      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ce0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001ce4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	fa92 f2a2 	rbit	r2, r2
 8001cec:	607a      	str	r2, [r7, #4]
  return result;
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	40d3      	lsrs	r3, r2
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	220f      	movs	r2, #15
 8001d08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	60fa      	str	r2, [r7, #12]
  return result;
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	40d3      	lsrs	r3, r2
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d3c:	e004      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	623b      	str	r3, [r7, #32]
      break;
 8001d4c:	e002      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d50:	623b      	str	r3, [r7, #32]
      break;
 8001d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	372c      	adds	r7, #44	; 0x2c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	007a1200 	.word	0x007a1200
 8001d6c:	08002974 	.word	0x08002974
 8001d70:	08002984 	.word	0x08002984
 8001d74:	003d0900 	.word	0x003d0900

08001d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b092      	sub	sp, #72	; 0x48
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80d4 	beq.w	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10e      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4a4a      	ldr	r2, [pc, #296]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	61d3      	str	r3, [r2, #28]
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b45      	ldr	r3, [pc, #276]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b42      	ldr	r3, [pc, #264]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a41      	ldr	r2, [pc, #260]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe fc1b 	bl	8000618 <HAL_GetTick>
 8001de2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe fc17 	bl	8000618 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e13c      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8084 	beq.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d07c      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2301      	movs	r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d04b      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fbc7 	bl	8000618 <HAL_GetTick>
 8001e8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7fe fbc3 	bl	8000618 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0e6      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	61fb      	str	r3, [r7, #28]
  return result;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d108      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001ed2:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	10908100 	.word	0x10908100
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	613a      	str	r2, [r7, #16]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	fa92 f2a2 	rbit	r2, r2
 8001efe:	60fa      	str	r2, [r7, #12]
  return result;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0b7      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4954      	ldr	r1, [pc, #336]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f50:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f023 0203 	bic.w	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4947      	ldr	r1, [pc, #284]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4940      	ldr	r1, [pc, #256]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f023 0220 	bic.w	r2, r3, #32
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4938      	ldr	r1, [pc, #224]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001faa:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4931      	ldr	r1, [pc, #196]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4929      	ldr	r1, [pc, #164]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	491a      	ldr	r1, [pc, #104]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002012:	4313      	orrs	r3, r2
 8002014:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	4913      	ldr	r1, [pc, #76]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002030:	4313      	orrs	r3, r2
 8002032:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	490b      	ldr	r1, [pc, #44]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800204e:	4313      	orrs	r3, r2
 8002050:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	4904      	ldr	r1, [pc, #16]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800206c:	4313      	orrs	r3, r2
 800206e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3748      	adds	r7, #72	; 0x48
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e049      	b.n	8002126 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe f9c4 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fa8c 	bl	80025dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e033      	b.n	80021b0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_TIM_Base_Start+0x8c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_TIM_Base_Start+0x3e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002162:	d004      	beq.n	800216e <HAL_TIM_Base_Start+0x3e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_TIM_Base_Start+0x90>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d115      	bne.n	800219a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_TIM_Base_Start+0x94>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b06      	cmp	r3, #6
 800217e:	d015      	beq.n	80021ac <HAL_TIM_Base_Start+0x7c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d011      	beq.n	80021ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002198:	e008      	b.n	80021ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e000      	b.n	80021ae <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40014000 	.word	0x40014000
 80021c4:	00010007 	.word	0x00010007

080021c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0202 	mvn.w	r2, #2
 80021f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f9c8 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9ba 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f9cb 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0204 	mvn.w	r2, #4
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f99e 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f990 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f9a1 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0208 	mvn.w	r2, #8
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f974 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f966 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f977 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0210 	mvn.w	r2, #16
 80022f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2208      	movs	r2, #8
 80022f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f94a 	bl	80025a0 <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f93c 	bl	800258c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f94d 	bl	80025b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f916 	bl	8002578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b80      	cmp	r3, #128	; 0x80
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 faaa 	bl	80028cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002386:	d10e      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002392:	2b80      	cmp	r3, #128	; 0x80
 8002394:	d107      	bne.n	80023a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800239e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa9d 	bl	80028e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d10e      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f8fb 	bl	80025c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d10e      	bne.n	80023fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d107      	bne.n	80023fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0220 	mvn.w	r2, #32
 80023f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa5d 	bl	80028b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_TIM_ConfigClockSource+0x18>
 800241a:	2302      	movs	r3, #2
 800241c:	e0a8      	b.n	8002570 <HAL_TIM_ConfigClockSource+0x16a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002440:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002448:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d067      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x124>
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d80b      	bhi.n	8002476 <HAL_TIM_ConfigClockSource+0x70>
 800245e:	2b10      	cmp	r3, #16
 8002460:	d073      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x144>
 8002462:	2b10      	cmp	r3, #16
 8002464:	d802      	bhi.n	800246c <HAL_TIM_ConfigClockSource+0x66>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d06f      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800246a:	e078      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800246c:	2b20      	cmp	r3, #32
 800246e:	d06c      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x144>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d06a      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002474:	e073      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002476:	2b70      	cmp	r3, #112	; 0x70
 8002478:	d00d      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x90>
 800247a:	2b70      	cmp	r3, #112	; 0x70
 800247c:	d804      	bhi.n	8002488 <HAL_TIM_ConfigClockSource+0x82>
 800247e:	2b50      	cmp	r3, #80	; 0x50
 8002480:	d033      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xe4>
 8002482:	2b60      	cmp	r3, #96	; 0x60
 8002484:	d041      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002486:	e06a      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d066      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x156>
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002492:	d017      	beq.n	80024c4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002494:	e063      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6899      	ldr	r1, [r3, #8]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f000 f981 	bl	80027ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
      break;
 80024c2:	e04c      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f000 f96a 	bl	80027ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024e6:	609a      	str	r2, [r3, #8]
      break;
 80024e8:	e039      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f000 f8de 	bl	80026b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2150      	movs	r1, #80	; 0x50
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f937 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002508:	e029      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	461a      	mov	r2, r3
 8002518:	f000 f8fd 	bl	8002716 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2160      	movs	r1, #96	; 0x60
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f927 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002528:	e019      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f8be 	bl	80026b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f917 	bl	8002776 <TIM_ITRx_SetConfig>
      break;
 8002548:	e009      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f000 f90e 	bl	8002776 <TIM_ITRx_SetConfig>
        break;
 800255a:	e000      	b.n	800255e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800255c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a2e      	ldr	r2, [pc, #184]	; (80026a8 <TIM_Base_SetConfig+0xcc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x20>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <TIM_Base_SetConfig+0xcc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x5a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x5a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a22      	ldr	r2, [pc, #136]	; (80026ac <TIM_Base_SetConfig+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x5a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <TIM_Base_SetConfig+0xd4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x5a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <TIM_Base_SetConfig+0xd8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <TIM_Base_SetConfig+0xcc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00b      	beq.n	800268c <TIM_Base_SetConfig+0xb0>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <TIM_Base_SetConfig+0xd0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d007      	beq.n	800268c <TIM_Base_SetConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <TIM_Base_SetConfig+0xd4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d003      	beq.n	800268c <TIM_Base_SetConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a0b      	ldr	r2, [pc, #44]	; (80026b4 <TIM_Base_SetConfig+0xd8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d103      	bne.n	8002694 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	615a      	str	r2, [r3, #20]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800

080026b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0201 	bic.w	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 030a 	bic.w	r3, r3, #10
 80026f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f023 0210 	bic.w	r2, r3, #16
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	031b      	lsls	r3, r3, #12
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	621a      	str	r2, [r3, #32]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002776:	b480      	push	{r7}
 8002778:	b085      	sub	sp, #20
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	f043 0307 	orr.w	r3, r3, #7
 8002798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	021a      	lsls	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002800:	2302      	movs	r3, #2
 8002802:	e04f      	b.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002834:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d004      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40014000 	.word	0x40014000

080028b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4e0d      	ldr	r6, [pc, #52]	; (800292c <__libc_init_array+0x38>)
 80028f8:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <__libc_init_array+0x3c>)
 80028fa:	1ba4      	subs	r4, r4, r6
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	2500      	movs	r5, #0
 8002900:	42a5      	cmp	r5, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	4e0b      	ldr	r6, [pc, #44]	; (8002934 <__libc_init_array+0x40>)
 8002906:	4c0c      	ldr	r4, [pc, #48]	; (8002938 <__libc_init_array+0x44>)
 8002908:	f000 f820 	bl	800294c <_init>
 800290c:	1ba4      	subs	r4, r4, r6
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	2500      	movs	r5, #0
 8002912:	42a5      	cmp	r5, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800291c:	4798      	blx	r3
 800291e:	3501      	adds	r5, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002926:	4798      	blx	r3
 8002928:	3501      	adds	r5, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08002994 	.word	0x08002994
 8002930:	08002994 	.word	0x08002994
 8002934:	08002994 	.word	0x08002994
 8002938:	08002998 	.word	0x08002998

0800293c <memset>:
 800293c:	4402      	add	r2, r0
 800293e:	4603      	mov	r3, r0
 8002940:	4293      	cmp	r3, r2
 8002942:	d100      	bne.n	8002946 <memset+0xa>
 8002944:	4770      	bx	lr
 8002946:	f803 1b01 	strb.w	r1, [r3], #1
 800294a:	e7f9      	b.n	8002940 <memset+0x4>

0800294c <_init>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr

08002958 <_fini>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	bf00      	nop
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr
